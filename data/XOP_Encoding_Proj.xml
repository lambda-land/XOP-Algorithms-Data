<?xml version="1.0" encoding="US-ASCII" standalone="yes"?>
<storedHU xmlns:aml="http://www.atlasti.com/hu/ns2003" lastSaved="2017-10-08T12:27:37" creator="ATLAS.ti" method="AML (ATLAS Markup Language)" version="7.1.5" mode="complete">
    <hermUnit name="XOP_Encoding_Proj" au="dyg" cDate="2017-07-10T10:45:35" mDate="2017-07-24T09:38:55" lastPD="" prot="private"/>
    <coAuthors/>
    <dataSources size="15">
        <dataSource id="doc_1" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_2" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_3" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_4" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_5" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_6" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_7" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_8" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_9" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_10" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_11" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_12" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_13" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_14" loc="" mime="text/pdf" renderer=""/>
        <dataSource id="doc_15" loc="" mime="text/pdf" renderer=""/>
    </dataSources>
    <primDocs size="15">
        <primDoc name="AVT01.pdf" id="pd_2_1" loc="doc_1" au="dyg" cDate="2017-07-10T10:55:50" mDate="2017-08-24T11:14:29" qIndex="">
            <quotations size="63">
                <q name="Binary search trees are an excellent data structure to implement associa- tive arrays, maps, sets, a&#8230;" id="q2_1_1" au="dyg" cDate="2017-07-10T10:56:21" mDate="2017-07-10T10:56:21" loc="start=128 end=250 startpage=0 endpage=0">
                    <content size="122">
                        <p>Binary search trees are an excellent data structure to implement associa- tive arrays, maps, sets, and similar interfaces.</p>
                    </content>
                </q>
                <q name="The main difficulty, as dis- cussed in last lecture, is that they are efficient only when they are b&#8230;" id="q2_2_2" au="dyg" cDate="2017-07-10T13:54:21" mDate="2017-07-10T13:54:21" loc="start=251 end=359 startpage=0 endpage=0">
                    <content size="108">
                        <p>The main difficulty, as dis- cussed in last lecture, is that they are efficient only when they are balanced.</p>
                    </content>
                </q>
                <q name="Straightforward sequences of insertions can lead to highly unbalanced trees with poor asymptotic com&#8230;" id="q2_3_3" au="dyg" cDate="2017-07-10T13:57:36" mDate="2017-07-10T13:57:36" loc="start=360 end=506 startpage=0 endpage=0">
                    <content size="146">
                        <p>Straightforward sequences of insertions can lead to highly unbalanced trees with poor asymptotic complexity and unacceptable practical efficiency.</p>
                    </content>
                </q>
                <q name="For example, if we insert n elements with keys that are in strictly increasing or decreasing order,&#8230;" id="q2_4_4" au="dyg" cDate="2017-07-10T13:58:04" mDate="2017-07-10T13:58:04" loc="start=507 end=636 startpage=0 endpage=0">
                    <content size="129">
                        <p>For example, if we insert n elements with keys that are in strictly increasing or decreasing order, the complexity will be O(n2).</p>
                    </content>
                </q>
                <q name="On the other hand, if we can keep the height to O(log(n)), as it is for a perfectly balanced tree, t&#8230;" id="q2_5_5" au="dyg" cDate="2017-07-10T14:00:32" mDate="2017-07-10T14:00:32" loc="start=637 end=785 startpage=0 endpage=0">
                    <content size="148">
                        <p>On the other hand, if we can keep the height to O(log(n)), as it is for a perfectly balanced tree, then the commplexity is bounded by O(n &#8727; log(n)).</p>
                    </content>
                </q>
                <q name="The solution is to dynamically rebalance the search tree during insert or search operations." id="q2_6_6" au="dyg" cDate="2017-07-10T14:04:07" mDate="2017-07-10T14:04:07" loc="start=786 end=878 startpage=0 endpage=0">
                    <content size="92">
                        <p>The solution is to dynamically rebalance the search tree during insert or search operations.</p>
                    </content>
                </q>
                <q name="We have to be careful not to destroy the ordering invariant of the tree while we rebalance." id="q2_7_7" au="dyg" cDate="2017-07-10T14:10:50" mDate="2017-07-10T14:10:50" loc="start=879 end=970 startpage=0 endpage=0">
                    <content size="91">
                        <p>We have to be careful not to destroy the ordering invariant of the tree while we rebalance.</p>
                    </content>
                </q>
                <q name="Because of the importance of bi- nary search trees, researchers have developed many different algori&#8230;" id="q2_8_8" au="dyg" cDate="2017-07-10T14:11:46" mDate="2017-07-10T14:12:02" loc="start=971 end=1321 startpage=0 endpage=0">
                    <content size="350">
                        <p>Because of the importance of bi- nary search trees, researchers have developed many different algorithms for keeping trees in balance, such as AVL trees, red/black trees, splay trees, or randomized binary search trees. They differ in the invariants they main- tain (in addition to the ordering invariant), and when and how the rebal- ancing is done.</p>
                    </content>
                </q>
                <q name="In this lecture we use AVL trees, which is a simple and efficient data structure to maintain balance&#8230;" id="q2_9_9" au="dyg" cDate="2017-07-10T14:17:09" mDate="2017-07-10T14:17:09" loc="start=1321 end=1468 startpage=0 endpage=0">
                    <content size="147">
                        <p>In this lecture we use AVL trees, which is a simple and efficient data structure to maintain balance, and is also the first that has been proposed.</p>
                    </content>
                </q>
                <q name="It is named after its inventors, G.M. Adelson-Velskii and E.M. Landis, who described it in 1962." id="q2_10_10" au="dyg" cDate="2017-07-10T14:18:53" mDate="2017-07-10T14:18:53" loc="start=1469 end=1565 startpage=0 endpage=0">
                    <content size="96">
                        <p>It is named after its inventors, G.M. Adelson-Velskii and E.M. Landis, who described it in 1962.</p>
                    </content>
                </q>
                <q name="Recall the ordering invariant" id="q2_11_11" au="dyg" cDate="2017-07-10T14:21:15" mDate="2017-08-16T12:44:29" loc="start=33 end=62 startpage=1 endpage=1">
                    <content size="29">
                        <p>Recall the ordering invariant</p>
                    </content>
                </q>
                <q name="At any node with key k in a binary search tree, all keys of the elements in the left subtree are str&#8230;" id="q2_12_12" au="dyg" cDate="2017-07-10T14:21:41" mDate="2017-07-10T14:21:41" loc="start=108 end=307 startpage=1 endpage=1">
                    <content size="199">
                        <p>At any node with key k in a binary search tree, all keys of the elements in the left subtree are strictly less than k, while all keys of the elements in the right subtree are strictly greater than k.</p>
                    </content>
                </q>
                <q name="To describe AVL trees we need the concept of tree height, which we de- fine as the maximal length of&#8230;" id="q2_13_13" au="dyg" cDate="2017-07-10T14:22:53" mDate="2017-08-16T12:49:16" loc="start=314 end=802 startpage=1 endpage=1">
                    <content size="488">
                        <p>To describe AVL trees we need the concept of tree height, which we de- fine as the maximal length of a path from the root to a leaf. So the empty tree has height 0, the tree with one node has height 1, a balanced tree with three nodes has height 2. If we add one more node to this last tree is will have height 3. Alternatively, we can define it recursively by saying that the empty tree has height 0, and the height of any node is one greater than the maximal height of its two children.</p>
                    </content>
                </q>
                <q name="AVL trees maintain a height invariant (also sometimes called a balance invariant)." id="q2_16_14" au="dyg" cDate="2017-07-10T14:25:24" mDate="2017-07-10T14:25:24" loc="start=803 end=885 startpage=1 endpage=1">
                    <content size="82">
                        <p>AVL trees maintain a height invariant (also sometimes called a balance invariant).</p>
                    </content>
                </q>
                <q name="At any node in the tree, the heights of the left and right subtrees differs by at most 1." id="q2_17_15" au="dyg" cDate="2017-07-10T14:25:37" mDate="2017-07-10T14:25:37" loc="start=904 end=993 startpage=1 endpage=1">
                    <content size="89">
                        <p>At any node in the tree, the heights of the left and right subtrees differs by at most 1.</p>
                    </content>
                </q>
                <q name="As an example, consider the following binary search tree of height 3." id="q2_18_16" au="dyg" cDate="2017-07-10T14:26:55" mDate="2017-07-10T14:26:55" loc="start=994 end=1063 startpage=1 endpage=1">
                    <content size="69">
                        <p>As an example, consider the following binary search tree of height 3.</p>
                    </content>
                </q>
                <q name="If we insert a new element with a key of 14, the insertion algorithm for binary search trees without&#8230;" id="q2_19_17" au="dyg" cDate="2017-07-10T14:27:50" mDate="2017-07-10T14:27:50" loc="start=16 end=160 startpage=2 endpage=2">
                    <content size="144">
                        <p>If we insert a new element with a key of 14, the insertion algorithm for binary search trees without rebalancing will put it to the right of 13.</p>
                    </content>
                </q>
                <q name="Now the tree has height 4, and one path is longer than the others. However, it is easy to check that&#8230;" id="q2_20_18" au="dyg" cDate="2017-07-10T14:31:42" mDate="2017-07-10T14:31:42" loc="start=224 end=406 startpage=2 endpage=2">
                    <content size="182">
                        <p>Now the tree has height 4, and one path is longer than the others. However, it is easy to check that at each node, the height of the left and right subtrees still differ only by one.</p>
                    </content>
                </q>
                <q name="For example, at the node with key 16, the left subtree has height 2 and the right subtree has height&#8230;" id="q2_21_19" au="dyg" cDate="2017-07-10T14:32:32" mDate="2017-07-10T14:32:32" loc="start=407 end=550 startpage=2 endpage=2">
                    <content size="143">
                        <p>For example, at the node with key 16, the left subtree has height 2 and the right subtree has height 1, which still obeys our height invariant.</p>
                    </content>
                </q>
                <q name="Now consider another insertion, this time of an element with key 15." id="q2_22_20" au="dyg" cDate="2017-07-10T14:32:48" mDate="2017-07-10T14:32:48" loc="start=551 end=619 startpage=2 endpage=2">
                    <content size="68">
                        <p>Now consider another insertion, this time of an element with key 15.</p>
                    </content>
                </q>
                <q name="This is inserted to the right of the node with key 14." id="q2_23_21" au="dyg" cDate="2017-07-10T14:32:59" mDate="2017-07-10T14:32:59" loc="start=620 end=674 startpage=2 endpage=2">
                    <content size="54">
                        <p>This is inserted to the right of the node with key 14.</p>
                    </content>
                </q>
                <q name="All is well at the node labeled 14: the left subtree has height 0 while the right subtree has height&#8230;" id="q2_24_22" au="dyg" cDate="2017-07-10T14:34:59" mDate="2017-08-16T12:54:57" loc="start=16 end=411 startpage=3 endpage=3">
                    <content size="395">
                        <p>All is well at the node labeled 14: the left subtree has height 0 while the right subtree has height 1. However, at the node labeled 13, the left subtree has height 0, while the right subtree has height 2, violating our invariant. Moreover, at the node with key 16, the left subtree has height 3 while the right subtree has height 1, also a difference of 2 and therefore an invariant violation.</p>
                    </content>
                </q>
                <q name="We therefore have to take steps to rebalance tree." id="q2_27_23" au="dyg" cDate="2017-07-10T14:37:32" mDate="2017-07-10T14:37:32" loc="start=411 end=461 startpage=3 endpage=3">
                    <content size="50">
                        <p>We therefore have to take steps to rebalance tree.</p>
                    </content>
                </q>
                <q name="We can see without too much trouble, that we can restore the height invariant if we move the node la&#8230;" id="q2_28_24" au="dyg" cDate="2017-07-10T14:39:07" mDate="2017-07-10T14:39:07" loc="start=462 end=646 startpage=3 endpage=3">
                    <content size="184">
                        <p>We can see without too much trouble, that we can restore the height invariant if we move the node labeled 14 up and push node 13 down and to the right, resulting in the following tree.</p>
                    </content>
                </q>
                <q name="The question is" id="q2_29_25" au="dyg" cDate="2017-07-10T14:40:35" mDate="2017-08-16T14:05:11" loc="start=728 end=744 startpage=3 endpage=3">
                    <content size="16">
                        <p>The question is </p>
                    </content>
                </q>
                <q name="In order to understand this we need a fundamental operation called a rotation, which comes in two fo&#8230;" id="q2_30_26" au="dyg" cDate="2017-07-10T14:41:16" mDate="2017-07-10T14:41:16" loc="start=771 end=909 startpage=3 endpage=3">
                    <content size="138">
                        <p>In order to understand this we need a fundamental operation called a rotation, which comes in two forms, left rotation and right rotation.</p>
                    </content>
                </q>
                <q name="Below, we show the situation before a left rotation." id="q2_31_27" au="dyg" cDate="2017-07-10T14:55:01" mDate="2017-07-10T14:55:01" loc="start=937 end=989 startpage=3 endpage=3">
                    <content size="52">
                        <p>Below, we show the situation before a left rotation.</p>
                    </content>
                </q>
                <q name="We have generically denoted the crucial key values in question with x and y. Also, we have summarize&#8230;" id="q2_32_28" au="dyg" cDate="2017-07-10T14:57:28" mDate="2017-08-16T14:05:43" loc="start=990 end=1297 startpage=3 endpage=3">
                    <content size="307">
                        <p>We have generically denoted the crucial key values in question with x and y. Also, we have</p>
                        <p>summarized whole subtrees with the intervals bounding their key values. Even though we wrote &#8722;&#8734; and +&#8734;, when the whole tree is a subtree of a larger tree these bounds will be generic bounds &#945; which is smaller than x</p>
                    </content>
                </q>
                <q name="The tree on the right is after the left rotation." id="q2_33_29" au="dyg" cDate="2017-07-10T14:59:45" mDate="2017-07-10T14:59:45" loc="start=47 end=96 startpage=4 endpage=4">
                    <content size="49">
                        <p>The tree on the right is after the left rotation.</p>
                    </content>
                </q>
                <q name="From the intervals we can see that the ordering invariants are preserved, as are the contents of the&#8230;" id="q2_34_30" au="dyg" cDate="2017-07-10T15:01:16" mDate="2017-08-16T14:07:03" loc="start=199 end=392 startpage=4 endpage=4">
                    <content size="193">
                        <p>From the intervals we can see that the ordering invariants are preserved, as are the contents of the tree. We can also see that it shifts some nodes from the right subtree to the left subtree. </p>
                    </content>
                </q>
                <q name="We implement this with some straightforward code. First, recall the type of trees from last lecture.&#8230;" id="q2_37_31" au="dyg" cDate="2017-07-10T15:02:08" mDate="2017-07-10T15:02:08" loc="start=495 end=671 startpage=4 endpage=4">
                    <content size="176">
                        <p>We implement this with some straightforward code. First, recall the type of trees from last lecture. We do not repeat the function is_ordtree that checks if a tree is ordered.</p>
                    </content>
                </q>
                <q name="struct tree {   elem data;   struct tree* left;   struct tree* right; }; typedef struct tree* tree;&#8230;" id="q2_38_32" au="dyg" cDate="2017-07-10T15:03:50" mDate="2017-07-10T15:03:50" loc="start=671 end=795 startpage=4 endpage=4">
                    <content size="124">
                        <p>struct tree {</p>
                        <p>  elem data;</p>
                        <p>  struct tree* left;</p>
                        <p>  struct tree* right;</p>
                        <p>};</p>
                        <p>typedef struct tree* tree;</p>
                        <p>bool is_ordtree(tree T);</p>
                    </content>
                </q>
                <q name="The main point to keep in mind is to use (or save) a component of the input before writing to it. We&#8230;" id="q2_39_33" au="dyg" cDate="2017-07-10T15:05:45" mDate="2017-07-10T15:05:45" loc="start=796 end=1060 startpage=4 endpage=4">
                    <content size="264">
                        <p>The main point to keep in mind is to use (or save) a component of the input before writing to it. We apply this idea systematically, writing to a location immediately after using it on the previous line. We repeat the type specification of tree from last lecture.</p>
                    </content>
                </q>
                <q name="tree rotate_left(tree T) //@requires is_ordtree(T); //@requires T != NULL &amp;&amp; T-&gt;right != NULL; //@en&#8230;" id="q2_40_34" au="dyg" cDate="2017-07-10T15:06:56" mDate="2017-07-10T15:06:56" loc="start=1060 end=1266 startpage=4 endpage=4">
                    <content size="206">
                        <p>tree rotate_left(tree T)</p>
                        <p>//@requires is_ordtree(T);</p>
                        <p>//@requires T != NULL &amp;&amp; T-&gt;right != NULL;</p>
                        <p>//@ensures is_ordtree(\result);</p>
                        <p>//@ensures \result != NULL &amp;&amp; \result-&gt;left != NULL;</p>
                        <p>{</p>
                        <p>  tree root = T-&gt;right;</p>
                    </content>
                </q>
                <q name="T-&gt;right = root-&gt;left;   root-&gt;left = T;   return root; }" id="q2_41_35" au="dyg" cDate="2017-07-10T15:07:12" mDate="2017-07-10T15:07:12" loc="start=18 end=76 startpage=5 endpage=5">
                    <content size="58">
                        <p>T-&gt;right = root-&gt;left;</p>
                        <p>  root-&gt;left = T;</p>
                        <p>  return root;</p>
                        <p>}</p>
                    </content>
                </q>
                <q name="The right rotation is entirely symmetric. First in pictures:" id="q2_42_36" au="dyg" cDate="2017-07-10T15:07:54" mDate="2017-07-10T15:07:54" loc="start=424 end=484 startpage=5 endpage=5">
                    <content size="60">
                        <p>The right rotation is entirely symmetric. First in pictures:</p>
                    </content>
                </q>
                <q name="tree rotate_right(tree T) //@requires is_ordtree(T); //@requires T != NULL &amp;&amp; T-&gt;left != NULL; //@en&#8230;" id="q2_43_37" au="dyg" cDate="2017-07-10T15:09:01" mDate="2017-07-10T15:09:01" loc="start=194 end=402 startpage=5 endpage=5">
                    <content size="208">
                        <p>tree rotate_right(tree T)</p>
                        <p>//@requires is_ordtree(T);</p>
                        <p>//@requires T != NULL &amp;&amp; T-&gt;left != NULL;</p>
                        <p>//@ensures is_ordtree(\result);</p>
                        <p>//@ensures \result != NULL &amp;&amp; \result-&gt;right != NULL;</p>
                        <p>{</p>
                        <p>  tree root = T-&gt;left;</p>
                        <p>}</p>
                    </content>
                    <comment type="text/html" size="116">
                        <p>Note that the point&#160;of this code is that it represents the same, exact,&#160;sub operation&#160;shown in the previous cartoon.</p>
                    </comment>
                </q>
                <q name="Searching for a key in an AVL tree is identical to searching for it in a plain binary search tree as&#8230;" id="q2_44_38" au="dyg" cDate="2017-07-10T15:12:19" mDate="2017-07-10T15:12:19" loc="start=538 end=803 startpage=5 endpage=5">
                    <content size="265">
                        <p>Searching for a key in an AVL tree is identical to searching for it in a plain binary search tree as described in Lecture 17. The reason is that we only need the ordering invariant to find the element; the height invariant is only relevant for inserting an element.</p>
                    </content>
                    <comment type="text/html" size="139">
                        <p>This is really a description, of an element, of a mandatory set of sub operations that a tree must support in order to be a data structure.</p>
                    </comment>
                </q>
                <q name="The basic recursive structure of inserting an element is the same as for searching for an element." id="q2_45_39" au="dyg" cDate="2017-07-10T15:13:18" mDate="2017-07-10T15:13:18" loc="start=39 end=137 startpage=6 endpage=6">
                    <content size="98">
                        <p>The basic recursive structure of inserting an element is the same as for searching for an element.</p>
                    </content>
                </q>
                <q name="We compare the element&#8217;s key with the keys associated with the nodes of the trees, inserting recursi&#8230;" id="q2_46_40" au="dyg" cDate="2017-07-10T15:14:27" mDate="2017-07-10T15:14:27" loc="start=138 end=687 startpage=6 endpage=6">
                    <content size="549">
                        <p>We compare the element&#8217;s key with the keys associated with the nodes of the trees, inserting recursively into the left or right subtree. When we find an element with the exact key we overwrite the element in that node. If we encounter a null tree, we construct a new tree with the element to be inserted and no children and then return it. As we return the new subtrees (with the inserted element) towards the root, we check if we violate the height invariant. If so, we rebalance to restore the invariant and then continue up the tree to the root.</p>
                    </content>
                    <comment type="text/html" size="64">
                        <p>Description being solely manifest through text, no math or code.</p>
                    </comment>
                </q>
                <q name="The main cleverness of the algorithm lies in analyzing the situations when we have to rebalance and&#8230;" id="q2_47_41" au="dyg" cDate="2017-07-10T15:17:12" mDate="2017-07-10T15:17:12" loc="start=687 end=988 startpage=6 endpage=6">
                    <content size="301">
                        <p>The main cleverness of the algorithm lies in analyzing the situations when we have to rebalance and applying the appropriate rotations to re- store the height invariant. It turns out that one or two rotations on the whole tree always suffice for each insert operation, which is a very elegant result.</p>
                    </content>
                </q>
                <q name="First, we keep in mind that the left and right subtrees&#8217; heights before the insertion can differ by&#8230;" id="q2_48_42" au="dyg" cDate="2017-07-10T15:17:39" mDate="2017-07-10T15:18:36" loc="start=988 end=1301 startpage=6 endpage=6">
                    <content size="313">
                        <p>First, we keep in mind that the left and right subtrees&#8217; heights before the insertion can differ by at most one. Once we insert an element into one of the subtrees, they can differ by at most two. We now draw the trees in such a way that the height of a node is indicated by the height that we are drawing it at.</p>
                    </content>
                </q>
                <q name="The first situation we describe is where we insert into the right subtree, which is already of heigh&#8230;" id="q2_49_43" au="dyg" cDate="2017-07-10T15:19:48" mDate="2017-08-16T14:16:13" loc="start=1301 end=1867 startpage=6 endpage=6">
                    <content size="566">
                        <p>The first situation we describe is where we insert into the right subtree, which is already of height h + 1 where the left subtree has height h. If we are unlucky, the result of inserting into the right subtree will give us a new right subtree of height h + 2 which raises the height of the overall tree to h + 3, violating the height invariant. In the new right subtree has height h+2, either its right or the left subtree must be of height h+1 (and only one of them; think about why). If it is the right subtree we are in the situation depicted below on the left.</p>
                    </content>
                </q>
                <q name="left rotation, the result of which is displayed to the right. In the second case we consider we once&#8230;" id="q2_50_44" au="dyg" cDate="2017-07-10T15:21:08" mDate="2017-08-16T14:17:31" loc="start=35 end=649 startpage=7 endpage=7">
                    <content size="614">
                        <p>left rotation, the result of which is displayed to the right. In the second case we consider we once again insert into the right sub-</p>
                        <p>tree, but now the left subtree of the right subtree has height h + 1.</p>
                        <p>(&#8208;&#8734;, +&#8734;)  x </p>
                        <p>h </p>
                        <p>In that case, a left rotation alone will not restore the invariant (see Exer- cise 1). Instead, we apply a so-called double rotation: first a right rotation at z, then a left rotation at the root. When we do this we obtain the picture on the right, restoring the height invariant.</p>
                        <p>There are two additional symmetric cases to consider, if we insert the new element on the left (see Exercise 4).</p>
                    </content>
                </q>
                <q name="The interface for the implementation is exactly the same as for binary search trees, as is the code&#8230;" id="q2_51_45" au="dyg" cDate="2017-07-10T15:22:25" mDate="2017-07-10T15:22:25" loc="start=1069 end=1193 startpage=7 endpage=7">
                    <content size="124">
                        <p>The interface for the implementation is exactly the same as for binary search trees, as is the code for searching for a key.</p>
                    </content>
                </q>
                <q name="In various places in the algo- rithm we have to compute the height of the tree. This could be an ope&#8230;" id="q2_52_46" au="dyg" cDate="2017-07-10T15:23:40" mDate="2017-07-10T15:23:40" loc="start=1194 end=1397 startpage=7 endpage=7">
                    <content size="203">
                        <p>In various places in the algo- rithm we have to compute the height of the tree. This could be an operation of asymptotic complexity O(n), unless we store it in each node and just look it up. So we have:</p>
                    </content>
                </q>
                <q name="struct tree {   elem data;   int height;   struct tree* left;   struct tree* right; };" id="q2_53_47" au="dyg" cDate="2017-07-10T15:24:21" mDate="2017-07-10T15:24:21" loc="start=1397 end=1484 startpage=7 endpage=7">
                    <content size="87">
                        <p>struct tree {</p>
                        <p>  elem data;</p>
                        <p>  int height;</p>
                        <p>  struct tree* left;</p>
                        <p>  struct tree* right;</p>
                        <p>};</p>
                    </content>
                </q>
                <q name="typedef struct tree* tree; /* height(T) returns the precomputed height of T in O(1) */ int height(tr&#8230;" id="q2_54_48" au="dyg" cDate="2017-07-10T15:24:48" mDate="2017-07-10T15:24:48" loc="start=16 end=162 startpage=8 endpage=8">
                    <content size="146">
                        <p>typedef struct tree* tree;</p>
                        <p>/* height(T) returns the precomputed height of T in O(1) */</p>
                        <p>int height(tree T) {</p>
                        <p>  return T == NULL ? 0 : T-&gt;height;</p>
                        <p>}</p>
                    </content>
                </q>
                <q name="When checking if a tree is balanced, we also check that all the heights that have been computed are&#8230;" id="q2_55_49" au="dyg" cDate="2017-07-10T15:25:21" mDate="2017-07-10T15:25:21" loc="start=162 end=270 startpage=8 endpage=8">
                    <content size="108">
                        <p>When checking if a tree is balanced, we also check that all the heights that have been computed are correct.</p>
                    </content>
                </q>
                <q name="bool is_balanced(tree T) {   if (T == NULL) return true;   int h = T-&gt;height;   int hl = height(T-&gt;l&#8230;" id="q2_56_50" au="dyg" cDate="2017-07-10T15:25:40" mDate="2017-07-10T15:25:40" loc="start=271 end=561 startpage=8 endpage=8">
                    <content size="290">
                        <p>bool is_balanced(tree T) {</p>
                        <p>  if (T == NULL) return true;</p>
                        <p>  int h = T-&gt;height;</p>
                        <p>  int hl = height(T-&gt;left);</p>
                        <p>  int hr = height(T-&gt;right);</p>
                        <p>  if (!(h == (hl &gt; hr ? hl+1 : hr+1))) return false;</p>
                        <p>  if (hl &gt; hr+1 || hr &gt; hl+1) return false;</p>
                        <p>  return is_balanced(T-&gt;left) &amp;&amp; is_balanced(T-&gt;right);</p>
                        <p>}</p>
                    </content>
                </q>
                <q name="A tree is an AVL tree if it is both ordered (as defined and implementa- tion in the last lecture) an&#8230;" id="q2_57_51" au="dyg" cDate="2017-07-10T15:26:48" mDate="2017-07-10T15:28:12" loc="start=561 end=739 startpage=8 endpage=8">
                    <content size="178">
                        <p>A tree is an AVL tree if it is both ordered (as defined and implementa- tion in the last lecture) and balanced.</p>
                        <p>bool is_avl(tree T) {</p>
                        <p>  return is_ordtree(T) &amp;&amp; is_balanced(T);</p>
                        <p>}</p>
                    </content>
                </q>
                <q name="We use this, for example, in a utility function" id="q2_58_52" au="dyg" cDate="2017-07-10T15:28:36" mDate="2017-08-19T15:10:11" loc="start=739 end=786 startpage=8 endpage=8">
                    <content size="47">
                        <p>We use this, for example, in a utility function</p>
                    </content>
                </q>
                <q name="tree leaf(elem e) //@requires e != NULL; //@ensures is_avl(\result); {   tree T = alloc(struct tree)&#8230;" id="q2_59_53" au="dyg" cDate="2017-07-10T15:29:01" mDate="2017-07-10T15:29:01" loc="start=852 end=1035 startpage=8 endpage=8">
                    <content size="183">
                        <p>tree leaf(elem e)</p>
                        <p>//@requires e != NULL;</p>
                        <p>//@ensures is_avl(\result);</p>
                        <p>{</p>
                        <p>  tree T = alloc(struct tree);</p>
                        <p>  T-&gt;data = e;</p>
                        <p>  T-&gt;height = 1;</p>
                        <p>  T-&gt;left = NULL;</p>
                        <p>  T-&gt;right = NULL;</p>
                        <p>return T; }</p>
                    </content>
                </q>
                <q name="The code for inserting an element into the tree is mostly identical with the code for plain binary s&#8230;" id="q2_60_54" au="dyg" cDate="2017-07-10T15:29:36" mDate="2017-07-10T15:29:36" loc="start=42 end=154 startpage=9 endpage=9">
                    <content size="112">
                        <p>The code for inserting an element into the tree is mostly identical with the code for plain binary search trees.</p>
                    </content>
                </q>
                <q name="The difference is that after we in- sert into the left or right subtree, we call a function rebalanc&#8230;" id="q2_61_55" au="dyg" cDate="2017-07-10T15:29:55" mDate="2017-07-10T15:29:55" loc="start=155 end=365 startpage=9 endpage=9">
                    <content size="210">
                        <p>The difference is that after we in- sert into the left or right subtree, we call a function rebalance_left or rebalance_right, respectively, to restore the invariant if necessary and cal- culate the new height.</p>
                    </content>
                    <comment type="text/html" size="140">
                        <p>I&#8217;m starting to think that Operation Description should be separated into operation, and description, much like definition, and mathematical</p>
                    </comment>
                </q>
                <q name="tree tree_insert(tree T, elem e) //@requires is_avl(T); //@ensures is_avl(\result); {   assert(e !=&#8230;" id="q2_62_56" au="dyg" cDate="2017-07-10T15:31:43" mDate="2017-07-10T15:31:43" loc="start=366 end=942 startpage=9 endpage=9">
                    <content size="576">
                        <p>tree tree_insert(tree T, elem e)</p>
                        <p>//@requires is_avl(T);</p>
                        <p>//@ensures is_avl(\result);</p>
                        <p>{</p>
                        <p>  assert(e != NULL); /* cannot insert NULL element */</p>
                        <p>  if (T == NULL) {</p>
                        <p>    T = leaf(e); /* create new leaf with data e */</p>
                        <p>  } else {</p>
                        <p>    int r = compare(elem_key(e), elem_key(T-&gt;data));</p>
                        <p>    if (r &lt; 0) {</p>
                        <p>      T-&gt;left = tree_insert(T-&gt;left, e);</p>
                        <p>      T = rebalance_left(T); /* also fixes height */</p>
                        <p>    } else if (r == 0) {</p>
                        <p>      T-&gt;data = e;</p>
                        <p>    } else { //@assert r &gt; 0;</p>
                        <p>      T-&gt;right = tree_insert(T-&gt;right, e);</p>
                        <p>      T = rebalance_right(T); /* also fixes height */</p>
                        <p>    }</p>
                        <p>}</p>
                        <p>return T; }</p>
                    </content>
                </q>
                <q name="tree rebalance_right(tree T) //@requires T != NULL; //@requires is_avl(T-&gt;left) &amp;&amp; is_avl(T-&gt;right);&#8230;" id="q2_63_57" au="dyg" cDate="2017-07-10T15:32:01" mDate="2017-07-10T15:32:01" loc="start=91 end=855 startpage=10 endpage=10">
                    <content size="764">
                        <p>tree rebalance_right(tree T)</p>
                        <p>//@requires T != NULL;</p>
                        <p>//@requires is_avl(T-&gt;left) &amp;&amp; is_avl(T-&gt;right);</p>
                        <p>/* also requires that T-&gt;right is result of insert into T */</p>
                        <p>//@ensures is_avl(\result);</p>
                        <p>{</p>
                        <p>  tree l = T-&gt;left;</p>
                        <p>  tree r = T-&gt;right;</p>
                        <p>  int hl = height(l);</p>
                        <p>  int hr = height(r);</p>
                        <p>  if (hr &gt; hl+1) {</p>
                        <p>    //@assert hr == hl+2;</p>
                        <p>    if (height(r-&gt;right) &gt; height(r-&gt;left)) {</p>
                        <p>      //@assert height(r-&gt;right) == hl+1;</p>
                        <p>      T = rotate_left(T);</p>
                        <p>      //@assert height(T) == hl+2;</p>
                        <p>      return T;</p>
                        <p>    } else {</p>
                        <p>      //@assert height(r-&gt;left) == hl+1;</p>
                        <p>      /* double rotate left */</p>
                        <p>      T-&gt;right = rotate_right(T-&gt;right);</p>
                        <p>      T = rotate_left(T);</p>
                        <p>      //@assert height(T) == hl+2;</p>
                        <p>      return T;</p>
                        <p>    }</p>
                        <p>  } else { //@assert !(hr &gt; hl+1);</p>
                        <p>    fix_height(T);</p>
                        <p>return T; }</p>
                        <p>}</p>
                    </content>
                </q>
                <q name="binary search trees." id="q2_64_58" au="dyg" cDate="2017-08-16T12:44:47" mDate="2017-08-16T12:44:47" loc="start=67 end=87 startpage=1 endpage=1">
                    <content size="20">
                        <p>binary search trees.</p>
                    </content>
                </q>
                <q name="how to do this in general" id="q2_65_59" au="dyg" cDate="2017-08-16T14:05:23" mDate="2017-08-16T14:05:23" loc="start=744 end=769 startpage=3 endpage=3">
                    <content size="25">
                        <p>how to do this in general</p>
                    </content>
                </q>
                <q name="We would invoke this operation if the invariants told us that we have to rebalance from right to lef&#8230;" id="q2_66_60" au="dyg" cDate="2017-08-16T14:08:21" mDate="2017-08-16T14:08:21" loc="start=392 end=494 startpage=4 endpage=4">
                    <content size="102">
                        <p>We would invoke this operation if the invariants told us that we have to rebalance from right to left.</p>
                    </content>
                </q>
                <q name="Quotation 2:67" id="q2_67_61" au="dyg" cDate="2017-08-16T14:16:30" mDate="2017-08-16T14:16:30" loc="x=148 y=0 width=373 height=264 page=6"/>
                <q name="We fix this with a left rotation," id="q2_68_62" au="dyg" cDate="2017-08-16T14:16:54" mDate="2017-08-16T14:16:54" loc="start=16 end=49 startpage=7 endpage=7">
                    <content size="33">
                        <p>We fix this with a left rotation,</p>
                    </content>
                </q>
                <q name="that creates a new leaf from an element (which may not be null)." id="q2_69_63" au="dyg" cDate="2017-08-19T15:10:44" mDate="2017-08-19T15:10:44" loc="start=787 end=852 startpage=8 endpage=8">
                    <content size="65">
                        <p>that creates a new leaf from an element (which may not be null).</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="DJK02.pdf" id="pd_3_2" loc="doc_2" au="dyg" cDate="2017-07-17T10:26:42" mDate="2017-08-24T11:14:07" qIndex="">
            <quotations size="51">
                <q name="In recitation we talked a bit about graphs: how to represent them and how to traverse them. Today we&#8230;" id="q3_2_64" au="dyg" cDate="2017-07-24T09:51:26" mDate="2017-08-16T10:57:48" loc="start=53 end=315 startpage=0 endpage=0">
                    <content size="262">
                        <p>In recitation we talked a bit about graphs: how to represent them and how to traverse them. Today we will discuss one of the most important graph algorithms: Dijkstra's shortest path algorithm, a greedy algorithm that efficiently finds shortest paths in a graph.</p>
                    </content>
                </q>
                <q name="Many more problems than you might at first think can be cast as shortest path problems, making this&#8230;" id="q3_3_65" au="dyg" cDate="2017-07-24T09:52:04" mDate="2017-07-24T09:52:04" loc="start=381 end=519 startpage=0 endpage=0">
                    <content size="138">
                        <p>Many more problems than you might at first think can be cast as shortest path problems, making this algorithm a powerful and general tool.</p>
                    </content>
                </q>
                <q name="For example, Dijkstra's algorithm is a good way to implement a service like MapQuest that finds the&#8230;" id="q3_4_66" au="dyg" cDate="2017-07-24T09:52:25" mDate="2017-07-24T09:52:25" loc="start=520 end=968 startpage=0 endpage=0">
                    <content size="448">
                        <p>For example, Dijkstra's algorithm is a good way to implement a service like MapQuest that finds the shortest way to drive between two points on the map. It can also be used to solve problems like network routing, where the goal is to find the shortest path for data packets to take through a switching network. It is also used in more general search algorithms for a variety of problems ranging from automated circuit layout to speech recognition.</p>
                    </content>
                </q>
                <q name="Let's start by defining a data abstraction for weighted, directed graphs so we can express algorithm&#8230;" id="q3_5_67" au="dyg" cDate="2017-07-24T09:53:10" mDate="2017-07-24T09:53:10" loc="start=968 end=1127 startpage=0 endpage=0">
                    <content size="159">
                        <p>Let's start by defining a data abstraction for weighted, directed graphs so we can express algorithms independently of the implementation of graphs themselves.</p>
                    </content>
                </q>
                <q name="In a weighted graph, each of its edges has a nonnegative weight that we can think of as the distance&#8230;" id="q3_6_68" au="dyg" cDate="2017-07-24T09:53:36" mDate="2017-07-24T09:53:36" loc="start=1128 end=1272 startpage=0 endpage=0">
                    <content size="144">
                        <p>In a weighted graph, each of its edges has a nonnegative weight that we can think of as the distance one must travel when going along that edge.</p>
                    </content>
                </q>
                <q name="(* A signature for directed graphs. The signature is    * simplified by not explicitly representing&#8230;" id="q3_7_69" au="dyg" cDate="2017-07-24T09:54:06" mDate="2017-07-24T09:54:06" loc="start=1275 end=2090 startpage=0 endpage=0">
                    <content size="815">
                        <p>(* A signature for directed graphs. The signature is</p>
                        <p>   * simplified by not explicitly representing edges as</p>
                        <p>   * type. *)</p>
                        <p>signature WGRAPH = sig</p>
                        <p>type graph (* A directed graph comprising a set of</p>
                        <p>                 * vertices and directed edges with nonnegative</p>
                        <p>* weights. *)</p>
                        <p>type vertex (* A vertex, or node, of the graph *)</p>
                        <p>    (* Whether two vertices are the same vertex. *)</p>
                        <p>val eq: vertex*vertex&#173;&gt;bool</p>
                        <p>(* All vertices in the graph, without any duplicates.</p>
                        <p>     * Run time: O(|V|). *)</p>
                        <p>val vertices: graph&#173;&gt;vertex list</p>
                        <p>(* outgoing(v) is a list of pairs (v_i,w_i), one for each</p>
                        <p>     * edge leaving the vertex v. For each index i, the</p>
                        <p>     * corresponding edge leaves v and goes to v_i, and</p>
                        <p>     * has weight w_i.</p>
                        <p>     * Run time is linear in the length of the result. *)</p>
                        <p>val outgoing: vertex&#173;&gt;(vertex*int) list end</p>
                    </content>
                </q>
                <q name="There are some constraints on the running time of certain operations in this specification." id="q3_8_70" au="dyg" cDate="2017-07-24T09:54:26" mDate="2017-07-24T09:54:26" loc="start=2090 end=2181 startpage=0 endpage=0">
                    <content size="91">
                        <p>There are some constraints on the running time of certain operations in this specification.</p>
                    </content>
                </q>
                <q name="structure Graph : WGRAPH = struct (* Note: vertex must contain a ref to allow graphs      * containi&#8230;" id="q3_10_71" au="dyg" cDate="2017-07-24T09:55:30" mDate="2017-07-24T09:55:30" loc="start=2413 end=30 startpage=0 endpage=1">
                    <content size="440">
                        <p>structure Graph : WGRAPH = struct</p>
                        <p>(* Note: vertex must contain a ref to allow graphs</p>
                        <p>     * containing cycles to be built and to give vertices</p>
                        <p>     * a notion of unique identity (ref identity).</p>
                        <p>     * The type vertex must be a datatype to permit it to</p>
                        <p>     * be defined recursively. *)</p>
                        <p>datatype vertex = V of (vertex*int) list ref type graph = vertex list</p>
                        <p>fun eq(V(v1), V(v2)) = (v1 = v2) fun vertices(g) = g</p>
                        <p>fun outgoing(V(lr)) = !lr end</p>
                    </content>
                </q>
                <q name="A path through the graph is a sequence (v1, ..., vn) such that the graph contains an edge e1 going f&#8230;" id="q3_11_72" au="dyg" cDate="2017-07-24T09:56:03" mDate="2017-07-24T09:56:11" loc="start=30 end=254 startpage=1 endpage=1">
                    <content size="224">
                        <p>A path through the graph is a sequence (v1, ..., vn) such that the graph contains an edge e1 going from</p>
                        <p>v1 to v2, an edge e2 going from v2 to v3, and so on. That is, all the edges must be traversed in the</p>
                        <p>forward direction. </p>
                    </content>
                </q>
                <q name="The length of a path is the sum of the weights along these edges e1,..., en&#173;1. We call this property&#8230;" id="q3_12_73" au="dyg" cDate="2017-07-24T09:56:34" mDate="2017-07-24T09:56:34" loc="start=254 end=458 startpage=1 endpage=1">
                    <content size="204">
                        <p>The length of a path is the sum of the weights along these edges e1,..., en&#173;1. We call</p>
                        <p>this property "length" even though for some graphs it may represent some other quantity: for example, money or time.</p>
                    </content>
                </q>
                <q name="Given two vertices v and v', what is the shortest path through the graph that goes from v to v' ? Th&#8230;" id="q3_14_74" au="dyg" cDate="2017-07-24T09:57:22" mDate="2017-07-24T09:57:22" loc="start=535 end=755 startpage=1 endpage=1">
                    <content size="220">
                        <p>Given two vertices v and v', what is the shortest path through the graph that goes from v to v' ? That is, the path for which summing up the weights along all the edges from v to v' results in the smallest sum possible.</p>
                    </content>
                </q>
                <q name="It turns out that we can solve this problem efficiently by solving a more general problem, the singl&#8230;" id="q3_15_75" au="dyg" cDate="2017-07-24T09:58:05" mDate="2017-07-24T09:58:05" loc="start=755 end=887 startpage=1 endpage=1">
                    <content size="132">
                        <p>It turns out that we can solve this problem efficiently by solving a more general problem, the single&#173; source shortest&#173;path problem:</p>
                    </content>
                </q>
                <q name="Given a vertex v, what is the length of the shortest path from v to every vertex v' in the graph?" id="q3_16_76" au="dyg" cDate="2017-07-24T09:59:12" mDate="2017-07-24T09:59:12" loc="start=888 end=985 startpage=1 endpage=1">
                    <content size="97">
                        <p>Given a vertex v, what is the length of the shortest path from v to every vertex v' in the graph?</p>
                    </content>
                </q>
                <q name="The single&#173;source shortest path problem can also be formulated on an undirected graph; however, it i&#8230;" id="q3_18_77" au="dyg" cDate="2017-07-24T10:01:08" mDate="2017-07-24T10:01:08" loc="start=1047 end=1302 startpage=1 endpage=1">
                    <content size="255">
                        <p>The single&#173;source shortest path problem can also be formulated on an undirected graph; however, it is most easily solved by converting the undirected graph into a directed graph with twice as many edges, and then running the algorithm for directed graphs.</p>
                    </content>
                </q>
                <q name="There are other shortest&#173;path problems of interest, such as the all&#173;pairs shortest&#173;path problem: fin&#8230;" id="q3_19_78" au="dyg" cDate="2017-07-24T10:01:44" mDate="2017-08-16T11:17:18" loc="start=1303 end=1560 startpage=1 endpage=1">
                    <content size="257">
                        <p>There are other shortest&#173;path problems of interest, such as the all&#173;pairs shortest&#173;path problem: find the lengths of shortest paths between all possible source&#8211;destination pairs. The Floyd&#173;Warshall algorithm is a good way to solve this problem efficiently.</p>
                    </content>
                </q>
                <q name="Let's consider a simpler problem: solving the single&#173;source shortest path problem for an unweighted&#8230;" id="q3_21_79" au="dyg" cDate="2017-07-24T10:02:47" mDate="2017-08-25T15:27:21" loc="start=1609 end=1953 startpage=1 endpage=1">
                    <content size="344">
                        <p>Let's consider a simpler problem: solving the single&#173;source shortest path problem for an unweighted directed graph. In this case we are trying to find the smallest number of edges that must be traversed in order to get to every vertex in the graph. This is the same problem as solving the weighted version where all the weights happen to be 1.</p>
                    </content>
                </q>
                <q name="Do we know an algorithm for determining this? Yes" id="q3_23_80" au="dyg" cDate="2017-07-24T10:03:55" mDate="2017-08-16T11:20:57" loc="start=1953 end=2002 startpage=1 endpage=1">
                    <content size="49">
                        <p>Do we know an algorithm for determining this? Yes</p>
                    </content>
                </q>
                <q name="The running time of that algorithm is O(V+E) where V is the number of vertices and E is the number o&#8230;" id="q3_24_81" au="dyg" cDate="2017-07-24T10:04:19" mDate="2017-08-16T11:21:56" loc="start=2026 end=2395 startpage=1 endpage=1">
                    <content size="369">
                        <p>The running time of that algorithm is O(V+E) where V is the number of vertices and E is the number of edges, because it pushes each reachable vertex onto the queue and considers each outgoing edge from it once. There can't be any faster algorithm for solving this problem, because in general the algorithm must at least look at the entire graph, which has size O(V+E).</p>
                    </content>
                </q>
                <q name="We saw in recitation that we could express both breadth&#173;first and depth&#173;first search with the same s&#8230;" id="q3_26_82" au="dyg" cDate="2017-07-24T10:04:49" mDate="2017-07-24T10:04:57" loc="start=2395 end=2899 startpage=1 endpage=1">
                    <content size="504">
                        <p>We saw in recitation that we could express both breadth&#173;first and depth&#173;first search with the same simple algorithm that varied just in the order in which vertices are removed from the queue. We just need an efficient implementation of sets to keep track of the vertices we have visited already. A hash table fits the bill perfectly with its O(1) amortized run time for all operations. Here is an imperative graph search algorithm that takes a source vertex v0 and performs graph search outward from it:</p>
                    </content>
                </q>
                <q name="(* Simple graph traversal (BFS or DFS) *) let val q: queue = new_queue() val visited: vertexSet = cr&#8230;" id="q3_27_83" au="dyg" cDate="2017-07-24T10:06:37" mDate="2017-07-24T10:06:37" loc="start=2901 end=167 startpage=1 endpage=2">
                    <content size="396">
                        <p>(* Simple graph traversal (BFS or DFS) *)</p>
                        <p>let val q: queue = new_queue()</p>
                        <p>val visited: vertexSet = create_vertexSet() fun expand(v: vertex) =</p>
                        <p>let val neighbors: vertex list = Graph.outgoing(v) fun handle_edge(v': vertex): unit =</p>
                        <p>if not (member(visited,v')) then ( add(visited, v');</p>
                        <p>push(q, v') ) else () )</p>
                        <p>in</p>
                        <p>end in</p>
                        <p>add(visited, v0);</p>
                        <p>expand(v0);</p>
                        <p>while (not (empty_queue(q)) do expand(pop(q))</p>
                        <p>end</p>
                    </content>
                </q>
                <q name="This code implicitly divides the set of vertices into three sets: 1. The completed vertices: visited&#8230;" id="q3_28_84" au="dyg" cDate="2017-07-24T10:07:26" mDate="2017-07-24T10:07:26" loc="start=167 end=414 startpage=2 endpage=2">
                    <content size="247">
                        <p>This code implicitly divides the set of vertices into three sets:</p>
                        <p>1. The completed vertices: visited vertices that have already been removed from the queue. 2. The frontier: visited vertices on the queue</p>
                        <p>3. The unvisited vertices: everything else</p>
                    </content>
                </q>
                <q name="Except for the initial vertex v0, the vertices in set 2 are always neighbors of vertices in set 1. T&#8230;" id="q3_29_85" au="dyg" cDate="2017-07-24T10:19:07" mDate="2017-07-24T10:19:07" loc="start=414 end=593 startpage=2 endpage=2">
                    <content size="179">
                        <p>Except for the initial vertex v0, the vertices in set 2 are always neighbors of vertices in set 1. Thus, the</p>
                        <p>queued vertices form a frontier in the graph, separating sets 1 and 3.</p>
                    </content>
                </q>
                <q name="The expand function moves a frontier vertex into the completed set and then expands the frontier to&#8230;" id="q3_30_86" au="dyg" cDate="2017-07-24T10:21:49" mDate="2017-07-24T10:21:49" loc="start=594 end=761 startpage=2 endpage=2">
                    <content size="167">
                        <p>The expand function moves a frontier vertex into the completed set and then expands the frontier to include any previously unseen neighbors of the new frontier vertex.</p>
                    </content>
                </q>
                <q name="The kind of search we get from this algorithm is determined by the pop function, which selects a ver&#8230;" id="q3_32_87" au="dyg" cDate="2017-07-24T10:23:56" mDate="2017-08-16T11:27:48" loc="start=762 end=995 startpage=2 endpage=2">
                    <content size="233">
                        <p>The kind of search we get from this algorithm is determined by the pop function, which selects a vertex from a queue. If q is a FIFO queue, we do a breadth&#173;first search of the graph. If q is a LIFO queue, we do a depth&#173;first search.</p>
                    </content>
                </q>
                <q name="If the graph is unweighted, we can use a FIFO queue and keep track of the number of edges taken to g&#8230;" id="q3_33_88" au="dyg" cDate="2017-07-24T10:25:34" mDate="2017-07-24T10:25:34" loc="start=995 end=1451 startpage=2 endpage=2">
                    <content size="456">
                        <p>If the graph is unweighted, we can use a FIFO queue and keep track of the number of edges taken to get to a particular node. We augment the visited set to keep track of the number of edges traversed from v0; it becomes a hash table implementing a map from vertices to edge counts (ints). The only</p>
                        <p>modification needed is in expand, which adds to the frontier a newly found vertex at a distance one greater than that of its neighbor already in the frontier.</p>
                    </content>
                </q>
                <q name="(* unweighted single&#173;source shortest path *) let val q: queue = new_queue() val visited: vertexMap =&#8230;" id="q3_34_89" au="dyg" cDate="2017-07-24T10:26:19" mDate="2017-07-24T10:26:19" loc="start=1453 end=1992 startpage=2 endpage=2">
                    <content size="539">
                        <p>(* unweighted single&#173;source shortest path *)</p>
                        <p>let val q: queue = new_queue()</p>
                        <p>val visited: vertexMap = create_vertexMap() (* visited maps vertex&#173;&gt;int *)</p>
                        <p>fun expand(v: vertex) =</p>
                        <p>let val neighbors: vertex list = Graph.outgoing(v) val dist: int = valOf(get(visited, v))</p>
                        <p>fun handle_edge(v': vertex) =</p>
                        <p>case get(visited, v') of</p>
                        <p>SOME(d') =&gt; () (* d' &lt;= dist+1 *)</p>
                        <p>              | NONE =&gt; ( add(visited, v', dist+1);</p>
                        <p>                          push(q, v') )</p>
                        <p>in</p>
                        <p>end in</p>
                        <p>add(visited, v0, 0);</p>
                        <p>expand(v0);</p>
                        <p>while (not (empty_queue(q)) do expand(pop(q))</p>
                        <p>end</p>
                    </content>
                </q>
                <q name="Now we can generalize to the problem of computing the shortest path between two vertices in a weight&#8230;" id="q3_35_90" au="dyg" cDate="2017-07-24T10:34:55" mDate="2017-07-24T10:34:55" loc="start=2039 end=2148 startpage=2 endpage=2">
                    <content size="109">
                        <p>Now we can generalize to the problem of computing the shortest path between two vertices in a weighted graph.</p>
                    </content>
                </q>
                <q name="As in that algorithm, we keep a visited map that maps vertices to their distances from the source ve&#8230;" id="q3_37_91" au="dyg" cDate="2017-07-24T10:35:34" mDate="2017-07-24T10:35:34" loc="start=37 end=288 startpage=3 endpage=3">
                    <content size="251">
                        <p>As in that algorithm, we keep a visited map that maps vertices to their distances from the source vertex v0. We change expand so that Instead of adding 1 to the</p>
                        <p>distance, its adds the weight of the edge traversed. Here is a first cut at an algorithm:</p>
                    </content>
                </q>
                <q name="let val q: queue = new_queue() val visited: vertexMap = create_vertexMap() fun expand(v: vertex) = l&#8230;" id="q3_39_92" au="dyg" cDate="2017-07-24T10:38:26" mDate="2017-07-24T10:38:26" loc="start=288 end=806 startpage=3 endpage=3">
                    <content size="518">
                        <p>let val q: queue = new_queue()</p>
                        <p>val visited: vertexMap = create_vertexMap() fun expand(v: vertex) =</p>
                        <p>let val neighbors: vertex list = Graph.outgoing(v) val dist: int = valOf(get(visited, v))</p>
                        <p>fun handle_edge(v': vertex, weight: int) =</p>
                        <p>case get(visited, v') of SOME(d') =&gt;</p>
                        <p>if dist+weight &lt; d'</p>
                        <p>then add(visited, v', dist+weight) else ()</p>
                        <p>            | NONE =&gt; ( add(visited, v', dist+weight);</p>
                        <p>                        push(q, v') )</p>
                        <p>in</p>
                        <p>end in</p>
                        <p>add(visited, v0, 0);</p>
                        <p>expand(v0);</p>
                        <p>while (not (empty_queue(q)) do expand(pop(q))</p>
                        <p>end</p>
                    </content>
                </q>
                <q name="This is nearly Dijkstra's algorithm, but it doesn't work. To see why, consider the following graph,&#8230;" id="q3_40_93" au="dyg" cDate="2017-07-24T10:39:25" mDate="2017-07-24T10:39:25" loc="start=806 end=940 startpage=3 endpage=3">
                    <content size="134">
                        <p>This is nearly Dijkstra's algorithm, but it doesn't work. To see why, consider the following graph, where the source vertex is v0 = A.</p>
                    </content>
                </q>
                <q name="The first pass of the algorithm will add vertices B and D to the map visited, with distances 1 and 5&#8230;" id="q3_41_94" au="dyg" cDate="2017-07-24T10:40:38" mDate="2017-07-24T10:40:38" loc="start=941 end=1176 startpage=3 endpage=3">
                    <content size="235">
                        <p>The first pass of the algorithm will add vertices B and D to the map visited, with distances 1 and 5 respectively. D will then become part of the completed set with distance 5. Yet there is a path from A to D with the shorter length 3.</p>
                    </content>
                </q>
                <q name="We need two fixes to the algorithm just presented:" id="q3_42_95" au="dyg" cDate="2017-07-24T10:41:04" mDate="2017-07-24T10:41:04" loc="start=1177 end=1227 startpage=3 endpage=3">
                    <content size="50">
                        <p>We need two fixes to the algorithm just presented:</p>
                    </content>
                </q>
                <q name="In the SOME case a check is needed to see whether the path just discovered to the vertex v' is an im&#8230;" id="q3_43_96" au="dyg" cDate="2017-07-24T10:43:02" mDate="2017-07-24T10:43:02" loc="start=1231 end=1395 startpage=3 endpage=3">
                    <content size="164">
                        <p>In the SOME case a check is needed to see whether the path just discovered to the vertex v' is an improvement on the previously discovered path (which had length d)</p>
                    </content>
                </q>
                <q name="2. The queue q should not be a FIFO queue. Instead, it should be a priority queue where the prioriti&#8230;" id="q3_44_97" au="dyg" cDate="2017-07-24T10:43:34" mDate="2017-07-24T10:43:34" loc="start=1396 end=1685 startpage=3 endpage=3">
                    <content size="289">
                        <p>2. The queue q should not be a FIFO queue. Instead, it should be a priority queue where the priorities of the vertices in the queue are their distances recorded in visited. That is, pop(q) should be a priority queue extract_min operation that removes the vertex with the smallest distance.</p>
                    </content>
                </q>
                <q name="The priority queue must also support a new operation increase_priority(q,v) that increases the prior&#8230;" id="q3_45_98" au="dyg" cDate="2017-07-24T10:43:52" mDate="2017-07-24T10:44:01" loc="start=1686 end=1956 startpage=3 endpage=3">
                    <content size="270">
                        <p>The priority queue must also support a new operation increase_priority(q,v) that increases the priority of an element v already in the queue q. This new operation is easily implemented for heaps using the same bubbling&#173;up algorithm used when performing heap insertions.</p>
                    </content>
                </q>
                <q name="With these two modifications, we have Dijkstra's algorithm:" id="q3_46_99" au="dyg" cDate="2017-07-24T10:44:10" mDate="2017-07-24T10:44:10" loc="start=1956 end=2015 startpage=3 endpage=3">
                    <content size="59">
                        <p>With these two modifications, we have Dijkstra's algorithm:</p>
                    </content>
                </q>
                <q name="Each time that expand is called, a vertex is moved from the frontier set to the completed set." id="q3_49_100" au="dyg" cDate="2017-07-24T10:45:09" mDate="2017-07-24T10:45:09" loc="start=501 end=595 startpage=4 endpage=4">
                    <content size="94">
                        <p>Each time that expand is called, a vertex is moved from the frontier set to the completed set.</p>
                    </content>
                </q>
                <q name="Dijkstra's algorithm is an example of a greedy algorithm, because it just chooses the closest fronti&#8230;" id="q3_50_101" au="dyg" cDate="2017-07-24T10:45:41" mDate="2017-07-24T10:45:45" loc="start=596 end=1077 startpage=4 endpage=4">
                    <content size="481">
                        <p>Dijkstra's algorithm is an example of a greedy algorithm, because it just chooses the closest frontier vertex at every step. A locally optimal, "greedy" step turns out to produce the global optimal solution. We can see that this algorithm finds the shortest&#173;path distances in the graph example above, because it will successively move B and C into the completed set, before D, and thus D's recorded distance has been correctly set to 3 before it is selected by the priority queue.</p>
                    </content>
                </q>
                <q name="The algorithm works because it maintains the following two invariants:" id="q3_51_102" au="dyg" cDate="2017-07-24T10:46:11" mDate="2017-07-24T10:46:11" loc="start=1077 end=1147 startpage=4 endpage=4">
                    <content size="70">
                        <p>The algorithm works because it maintains the following two invariants:</p>
                    </content>
                </q>
                <q name="For every completed vertex, the recorded distance (in visited) is the shortest&#173;path distance to that&#8230;" id="q3_52_103" au="dyg" cDate="2017-07-24T10:46:41" mDate="2017-07-24T10:46:57" loc="start=1148 end=1460 startpage=4 endpage=4">
                    <content size="312">
                        <p>For every completed vertex, the recorded distance (in visited) is the shortest&#173;path distance</p>
                        <p>to that vertex from v0.</p>
                        <p>For every frontier vertex v, the recorded distance is the shortest&#173;path distance to that vertex</p>
                        <p>from v0, considering just the paths that traverse only completed vertices and the vertex v itself. </p>
                    </content>
                </q>
                <q name="We will call these paths internal paths." id="q3_53_104" au="dyg" cDate="2017-07-24T10:47:09" mDate="2017-07-24T10:47:09" loc="start=1460 end=1500 startpage=4 endpage=4">
                    <content size="40">
                        <p>We will call these paths internal paths.</p>
                    </content>
                </q>
                <q name="We can see that these invariants hold when the main loop starts, because the only completed vertex i&#8230;" id="q3_54_105" au="dyg" cDate="2017-07-24T10:48:59" mDate="2017-07-24T10:49:54" loc="start=1501 end=3102 startpage=4 endpage=4">
                    <content size="1601">
                        <p>We can see that these invariants hold when the main loop starts, because the only completed vertex is v0 itself, which has recorded distance 0. The only frontier vertices are the neighbors of v0, so clearly</p>
                        <p>the second part of the invariant also holds. If the first invariant holds when the algorithm terminates, the algorithm works correctly, because all vertices are completed. We just need to show that each iteration of the main loop preserves the invariants.</p>
                        <p>Each step of the main loop takes the closest frontier vertex v and promotes it to the completed set. For the first invariant to be maintained, it must be the case that the recorded distance for the closest frontier vertex is also the shortest&#173;path distance to that vertex. The second invariant tells us that the only way it could fail to be the shortest&#173;path distance is if there is another, shorter, non&#173;internal path to v. Any non&#173;internal path must go through some other frontier vertex v'' to get to v. But this path must be longer than the shortest internal path, because the priority queue ensures that v is the closest frontier vertex. Therefore the vertex v'' is already at least as far away than v, and the rest of the path can only increase the length further (note that the assumption of nonnegative edge weights is crucial!).</p>
                        <p>We also need to show that the second invariant is maintained by the loop. This invariant is maintained by the calls to incr_priority and push in handle_edge. Promoting v to the completed set may create new internal paths to the neighbors of v, which become frontier vertices if they are not already;</p>
                    </content>
                </q>
                <q name="We might also be concerned that incr_priority could be called on a vertex that is not in the priorit&#8230;" id="q3_55_106" au="dyg" cDate="2017-07-24T10:50:26" mDate="2017-07-24T10:50:26" loc="start=108 end=395 startpage=5 endpage=5">
                    <content size="287">
                        <p>We might also be concerned that incr_priority could be called on a vertex that is not in the priority queue at all. But this can't happen because incr_priority is only called if a shorter path has been found to a completed vertex v'. By the first invariant, a shorter path cannot exist.</p>
                    </content>
                </q>
                <q name="Notice that the first part of the invariant implies that we can use Dijkstra's algorithm a little mo&#8230;" id="q3_56_107" au="dyg" cDate="2017-07-24T10:50:55" mDate="2017-08-16T11:57:59" loc="start=395 end=877 startpage=5 endpage=5">
                    <content size="482">
                        <p>Notice that the first part of the invariant implies that we can use Dijkstra's algorithm a little more efficiently to solve the simple shortest&#173;path problem in which we're interested only in a particular destination vertex. Once that vertex is popped from the priority queue, the traversal can be halted because its recorded distance is correct. Thus, to find the distance to a vertex v the traversal only visits the graph vertices that are at least as close to the source as v is.</p>
                    </content>
                </q>
                <q name="Run time of Dijkstra's algorithm Every time the main loop executes, one vertex is extracted from the&#8230;" id="q3_58_108" au="dyg" cDate="2017-07-24T10:51:31" mDate="2017-08-16T11:58:58" loc="start=877 end=1234 startpage=5 endpage=5">
                    <content size="357">
                        <p>Run time of Dijkstra's algorithm</p>
                        <p>Every time the main loop executes, one vertex is extracted from the queue. Assuming that there are V vertices in the graph, the queue may contain O(V) vertices. Each pop operation takes O(lg V) time assuming the heap implementation of priority queues. So the total time required to execute the main loop itself is O(V lg V).</p>
                    </content>
                </q>
                <q name="In addition, we must consider the time spent in the function expand, which applies the function hand&#8230;" id="q3_59_109" au="dyg" cDate="2017-07-24T10:52:10" mDate="2017-08-16T11:59:10" loc="start=1235 end=1858 startpage=5 endpage=5">
                    <content size="623">
                        <p>In addition, we must consider the time spent in the function expand, which applies the function handle_edge to each outgoing edge. Because expand is only called once per vertex, handle_edge is only called once per edge. It might call push(v'), but there can be at most V such calls during the entire execution, so the total cost of that case arm is at most O(V lg V). The other case arm may be called O(E) times, however, and each call to increase_priority takes O(lg V) time with the heap implementation. Therefore the total run time is O(V lg V + E lg V), which is O(E lg V) because V is O(E) assuming a connected graph.</p>
                    </content>
                </q>
                <q name="breadth&#173;first search." id="q3_61_110" au="dyg" cDate="2017-08-16T11:21:08" mDate="2017-08-16T11:21:08" loc="start=2004 end=2025 startpage=1 endpage=1">
                    <content size="21">
                        <p>breadth&#173;first search.</p>
                    </content>
                </q>
                <q name="We can solve this problem by making minor modifications to the BFS algorithm for" id="q3_62_111" au="dyg" cDate="2017-08-16T11:48:30" mDate="2017-08-16T11:48:30" loc="start=2149 end=2229 startpage=2 endpage=2">
                    <content size="80">
                        <p>We can solve this problem by making minor modifications to the BFS algorithm for</p>
                    </content>
                </q>
                <q name="(* Dijkstra's Algorithm *)" id="q3_63_112" au="dyg" cDate="2017-08-16T11:53:38" mDate="2017-08-16T11:53:38" loc="start=2018 end=2044 startpage=3 endpage=3">
                    <content size="26">
                        <p>(* Dijkstra's Algorithm *)</p>
                    </content>
                </q>
                <q name="another more complicated priority&#173;queue implementation called a Fibonacci heap that implements incre&#8230;" id="q3_65_113" au="dyg" cDate="2017-08-16T12:00:18" mDate="2017-08-16T12:00:18" loc="start=1868 end=2157 startpage=5 endpage=5">
                    <content size="289">
                        <p>another more complicated priority&#173;queue implementation called a Fibonacci heap that implements increase_priority in O(1) time, so that the asymptotic complexity of Dijkstra's algorithm becomes O(V lg V + E); however, large constant factors make Fibonacci heaps impractical for most uses.)</p>
                    </content>
                </q>
                <q name="Importantly, we assume that given a vertex, we can traverse the outgoing edges in constant time per&#8230;" id="q3_66_114" au="dyg" cDate="2017-08-19T15:51:55" mDate="2017-08-19T15:52:16" loc="start=2182 end=2413 startpage=0 endpage=0">
                    <content size="231">
                        <p>Importantly, we assume that given a vertex, we can traverse the outgoing edges in constant time per edge. Some graph implementations do not have these properties, but we can easily write an almost trivial implementation that does:</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="MS01.pdf" id="pd_4_3" loc="doc_3" au="dyg" cDate="2017-07-25T09:32:42" mDate="2017-08-24T11:13:28" qIndex="">
            <quotations size="39">
                <q name="You divide your enemies (by getting them to distrust each other) and then conquer them piece by piec&#8230;" id="q4_2_115" au="dyg" cDate="2017-07-25T09:37:54" mDate="2017-08-15T19:46:49" loc="start=335 end=979 startpage=1 endpage=1">
                    <content size="644">
                        <p>You divide your enemies (by getting them to distrust each other) and then conquer them piece by piece. This is called divide-and-conquer. In algorithm design, the idea is to take a problem on a large input, break the input into smaller pieces, solve the problem on each of the small pieces, and then combine the piecewise solutions into a global solution. But once you have broken the problem into pieces, how do you solve these pieces? The answer is to apply divide-and-conquer to them, thus further breaking them down. The process ends when you are left with such tiny pieces remaining (e.g. one or two items) that it is trivial to solve them</p>
                    </content>
                </q>
                <q name="Summarizing, the main elements to a divide-and-conquer solution are &#8226; Divide (the problem into a sma&#8230;" id="q4_4_116" au="dyg" cDate="2017-07-25T09:40:57" mDate="2017-08-15T19:48:24" loc="start=1067 end=1245 startpage=1 endpage=1">
                    <content size="178">
                        <p>Summarizing, the main elements to a divide-and-conquer solution are</p>
                        <p>&#8226; Divide (the problem into a small number of pieces), &#8226; Combine (the pieces together into a global solution).</p>
                    </content>
                </q>
                <q name="There are a huge number computational problems that can be solved efficiently using divide-and- conq&#8230;" id="q4_8_117" au="dyg" cDate="2017-07-25T09:44:37" mDate="2017-07-25T09:44:48" loc="start=1245 end=1583 startpage=1 endpage=1">
                    <content size="338">
                        <p>There are a huge number computational problems that can be solved efficiently using divide-and- conquer. In fact the technique is so powerful, that when someone first suggests a problem to me, the first question I usually ask (after what is the brute-force solution) is &#8220;does there exist a divide-and- conquer solution for this problem?&#8221;</p>
                    </content>
                </q>
                <q name="Analyzing the running times of recursive programs is rather tricky, but we will show that there is a&#8230;" id="q4_10_118" au="dyg" cDate="2017-07-25T09:47:25" mDate="2017-07-25T09:47:25" loc="start=1723 end=1990 startpage=1 endpage=1">
                    <content size="267">
                        <p>Analyzing the running times of recursive programs is rather tricky, but we will show that there is an elegant mathematical concept, called a recurrence, which is useful for analyzing the sort of recursive programs that naturally arise in divide-and-conquer solutions.</p>
                    </content>
                </q>
                <q name="For the next couple of lectures we will discuss some examples of divide-and-conquer algorithms, and&#8230;" id="q4_11_119" au="dyg" cDate="2017-07-25T09:47:37" mDate="2017-07-25T09:47:37" loc="start=1991 end=2129 startpage=1 endpage=1">
                    <content size="138">
                        <p>For the next couple of lectures we will discuss some examples of divide-and-conquer algorithms, and how to analyze them using recurrences.</p>
                    </content>
                </q>
                <q name="MergeSort: The first example of a divide-and-conquer algorithm which we will consider is perhaps the&#8230;" id="q4_12_120" au="dyg" cDate="2017-07-25T09:48:05" mDate="2017-08-15T19:53:22" loc="start=2130 end=2338 startpage=1 endpage=1">
                    <content size="208">
                        <p>MergeSort: The first example of a divide-and-conquer algorithm which we will consider is perhaps the best known. This is a simple and very efficient algorithm for sorting a list of numbers, called MergeSort. </p>
                    </content>
                </q>
                <q name="We are given an sequence of n numbers A, which we will assume is stored in an array A[1 . . . n]." id="q4_13_121" au="dyg" cDate="2017-07-25T09:48:42" mDate="2017-07-25T09:48:42" loc="start=2338 end=2435 startpage=1 endpage=1">
                    <content size="97">
                        <p>We are given an sequence of n numbers A, which we will assume is stored in an array A[1 . . . n].</p>
                    </content>
                </q>
                <q name="The objective is to output a permutation of this sequence, sorted in increasing order." id="q4_14_122" au="dyg" cDate="2017-07-25T09:49:08" mDate="2017-07-25T09:49:08" loc="start=2436 end=2522 startpage=1 endpage=1">
                    <content size="86">
                        <p>The objective is to output a permutation of this sequence, sorted in increasing order.</p>
                    </content>
                </q>
                <q name="How can we apply divide-and-conquer to sorting? Here are the major elements of the MergeSort algorit&#8230;" id="q4_16_123" au="dyg" cDate="2017-07-25T09:51:11" mDate="2017-07-25T09:51:11" loc="start=2591 end=2695 startpage=1 endpage=1">
                    <content size="104">
                        <p>How can we apply divide-and-conquer to sorting? Here are the major elements of the MergeSort</p>
                        <p>algorithm.</p>
                    </content>
                </q>
                <q name="Divide: Split A down the middle into two subsequences, each of size roughly n/2." id="q4_17_124" au="dyg" cDate="2017-07-25T09:51:24" mDate="2017-07-25T09:51:36" loc="start=2772 end=2852 startpage=1 endpage=1">
                    <content size="80">
                        <p>Divide: Split A down the middle into two subsequences, each of size roughly n/2.</p>
                    </content>
                </q>
                <q name="Conquer: Sort each subsequence (by calling MergeSort recursively on each)." id="q4_18_125" au="dyg" cDate="2017-07-25T09:51:46" mDate="2017-08-15T19:57:09" loc="start=2697 end=2771 startpage=1 endpage=1">
                    <content size="74">
                        <p>Conquer: Sort each subsequence (by calling MergeSort recursively on each).</p>
                    </content>
                </q>
                <q name="Combine: Merge the two sorted subsequences into a single sorted list." id="q4_19_126" au="dyg" cDate="2017-07-25T09:51:53" mDate="2017-07-25T09:51:53" loc="start=2853 end=2922 startpage=1 endpage=1">
                    <content size="69">
                        <p>Combine: Merge the two sorted subsequences into a single sorted list.</p>
                    </content>
                </q>
                <q name="The dividing process ends when we have split the subsequences down to a single item. An sequence of&#8230;" id="q4_20_127" au="dyg" cDate="2017-07-25T09:52:48" mDate="2017-08-15T19:59:00" loc="start=2923 end=3257 startpage=1 endpage=1">
                    <content size="334">
                        <p>The dividing process ends when we have split the subsequences down to a single item. An sequence of length one is trivially sorted. The key operation where all the work is done is in the combine stage, which merges together two sorted lists into a single sorted list. It turns out that the merging process is quite easy to implement.</p>
                    </content>
                </q>
                <q name="The following figure gives a high-level view of the algorithm." id="q4_23_128" au="dyg" cDate="2017-07-25T09:55:54" mDate="2017-07-25T09:55:54" loc="start=3257 end=3319 startpage=1 endpage=1">
                    <content size="62">
                        <p>The following figure gives a high-level view of the algorithm.</p>
                    </content>
                </q>
                <q name="The &#8220;divide&#8221; phase is shown on the left. It works top-down splitting up the list into smaller sublis&#8230;" id="q4_24_129" au="dyg" cDate="2017-07-25T09:57:34" mDate="2017-07-25T09:57:34" loc="start=3320 end=3558 startpage=1 endpage=1">
                    <content size="238">
                        <p>The &#8220;divide&#8221; phase is shown on the left. It works top-down splitting up the list into smaller sublists. The &#8220;conquer and combine&#8221; phases are shown on the right. They work bottom-up, merging sorted lists together into larger sorted lists.</p>
                    </content>
                </q>
                <q name="MergeSort: Let&#8217;s design the algorithm top-down." id="q4_25_130" au="dyg" cDate="2017-07-25T09:59:52" mDate="2017-07-25T09:59:52" loc="start=167 end=214 startpage=2 endpage=2">
                    <content size="47">
                        <p>MergeSort: Let&#8217;s design the algorithm top-down.</p>
                    </content>
                </q>
                <q name="We&#8217;ll assume that the procedure that merges two sorted list is available to us. We&#8217;ll implement it l&#8230;" id="q4_26_131" au="dyg" cDate="2017-07-25T10:03:18" mDate="2017-07-25T10:03:18" loc="start=215 end=320 startpage=2 endpage=2">
                    <content size="105">
                        <p>We&#8217;ll assume that the procedure that merges two sorted list is available to us. We&#8217;ll implement it later.</p>
                    </content>
                </q>
                <q name="Because the algorithm is called recursively on sublists, in addition to passing in the array itself,&#8230;" id="q4_27_132" au="dyg" cDate="2017-07-25T10:05:36" mDate="2017-08-15T20:01:44" loc="start=321 end=640 startpage=2 endpage=2">
                    <content size="319">
                        <p>Because the algorithm is called recursively on sublists, in addition to passing in the array itself, we will pass in two indices, which indicate the first and last indices of the subarray that we are to sort. The call MergeSort(A, p, r) will sort the subarray A[p..r] and return the sorted result in the same subarray.</p>
                    </content>
                </q>
                <q name="Here is the overview. If r = p, then this means that there is only one element to sort, and we may r&#8230;" id="q4_31_133" au="dyg" cDate="2017-07-25T10:07:23" mDate="2017-08-15T20:02:23" loc="start=640 end=1299 startpage=2 endpage=2">
                    <content size="659">
                        <p>Here is the overview. If r = p, then this means that there is only one element to sort, and we may return immediately. Otherwise (if p &lt; r) there are at least two elements, and we will invoke the divide-and- conquer. We find the index q, midway between p and r, namely q = (p + r)/2 (rounded down to the nearest integer). Then we split the array into subarrays A[p..q] and A[q + 1..r]. (We need to be careful here. Why would it be wrong to do A[p..q &#8722; 1] and A[q..r]? Suppose r = p + 1.) Call MergeSort recursively to sort each subarray. Finally, we invoke a procedure (which we have yet to write) which merges these two subarrays into a single sorted array.</p>
                    </content>
                </q>
                <q name="MergeSort(array A, int p, int r) {              if (p &lt; r) {                  q = (p + r)/2&#8230;" id="q4_32_134" au="dyg" cDate="2017-07-25T10:08:44" mDate="2017-07-25T10:08:44" loc="start=1409 end=1614 startpage=2 endpage=2">
                    <content size="205">
                        <p>MergeSort(array A, int p, int r) {</p>
                        <p>             if (p &lt; r) {</p>
                        <p>                 q = (p + r)/2</p>
                        <p>                 MergeSort(A, p, q)</p>
                        <p>                 MergeSort(A, q+1, r)</p>
                        <p>                 Merge(A, p, q, r)</p>
                        <p>} }</p>
                    </content>
                </q>
                <q name="Merging: All that is left is to describe the procedure that merges two sorted lists." id="q4_33_135" au="dyg" cDate="2017-07-25T10:09:43" mDate="2017-07-25T10:09:43" loc="start=1614 end=1698 startpage=2 endpage=2">
                    <content size="84">
                        <p>Merging: All that is left is to describe the procedure that merges two sorted lists.</p>
                    </content>
                </q>
                <q name="Merge(A, p, q, r) assumes that the left subarray, A[p..q], and the right subarray, A[q + 1..r], have&#8230;" id="q4_34_136" au="dyg" cDate="2017-07-25T10:10:28" mDate="2017-07-25T10:10:28" loc="start=1699 end=1820 startpage=2 endpage=2">
                    <content size="121">
                        <p>Merge(A, p, q, r) assumes that the left subarray, A[p..q], and the right subarray, A[q + 1..r], have already been sorted.</p>
                    </content>
                </q>
                <q name="We merge these two subarrays by copying the elements to a temporary working array called B." id="q4_35_137" au="dyg" cDate="2017-07-25T10:10:58" mDate="2017-07-25T10:10:58" loc="start=1821 end=1912 startpage=2 endpage=2">
                    <content size="91">
                        <p>We merge these two subarrays by copying the elements to a temporary working array called B.</p>
                    </content>
                </q>
                <q name="For convenience, we will assume that the array B has the same index range A, that is, B[p..r]. (One&#8230;" id="q4_36_138" au="dyg" cDate="2017-07-25T10:12:47" mDate="2017-07-25T10:12:47" loc="start=1913 end=2152 startpage=2 endpage=2">
                    <content size="239">
                        <p>For convenience, we will assume that the array B has the same index range A, that is, B[p..r]. (One nice thing about pseudocode, is that we can make these assumptions, and leave them up to the programmer to figure out how to implement it.)</p>
                    </content>
                </q>
                <q name="We have to indices i and j, that point to the current elements of each subarray. We move the smaller&#8230;" id="q4_37_139" au="dyg" cDate="2017-07-25T10:13:19" mDate="2017-07-25T10:13:19" loc="start=2153 end=2727 startpage=2 endpage=2">
                    <content size="574">
                        <p>We have to indices i and j, that point to the current elements of each subarray. We move the smaller element into the next position of B (indicated by index k) and then increment the corresponding index (either i or j). When we run out of elements in one array, then we just copy the rest of the other array into B. Finally, we copy the entire contents of B back into A. (The use of the temporary array is a bit unpleasant, but this is impossible to overcome entirely. It is one of the shortcomings of MergeSort, compared to some of the other efficient sorting algorithms.)</p>
                    </content>
                </q>
                <q name="In case you are not aware of C notation, the operator i++ returns the current value of i, and then i&#8230;" id="q4_38_140" au="dyg" cDate="2017-07-25T10:13:39" mDate="2017-07-25T10:13:39" loc="start=2727 end=2858 startpage=2 endpage=2">
                    <content size="131">
                        <p>In case you are not aware of C notation, the operator i++ returns the current value of i, and then increments this variable by one.</p>
                    </content>
                </q>
                <q name="array B[p..r] i=k=p j = q+1 while (i &lt;= q and j &lt;= r) { // initialize pointers // while both subarra&#8230;" id="q4_39_141" au="dyg" cDate="2017-07-25T10:14:06" mDate="2017-07-25T10:14:06" loc="start=61 end=405 startpage=3 endpage=3">
                    <content size="344">
                        <p>array B[p..r]</p>
                        <p>i=k=p</p>
                        <p>j = q+1</p>
                        <p>while (i &lt;= q and j &lt;= r) {</p>
                        <p>// initialize pointers</p>
                        <p>// while both subarrays are nonempty</p>
                        <p>// copy from left subarray</p>
                        <p>// copy from right subarray</p>
                        <p>// copy any leftover to B //copyBbacktoA</p>
                        <p>    else              B[k++] = A[j++]</p>
                        <p>}</p>
                        <p>while (i &lt;= q) B[k++] = A[i++]</p>
                        <p>while (j &lt;= r) B[k++] = A[j++]</p>
                        <p>for i = p to r do A[i] = B[i]</p>
                    </content>
                </q>
                <q name="This completes the description of the algorithm. Observe that of the last two while-loops in the Mer&#8230;" id="q4_40_142" au="dyg" cDate="2017-07-25T10:14:43" mDate="2017-07-25T10:14:43" loc="start=407 end=565 startpage=3 endpage=3">
                    <content size="158">
                        <p>This completes the description of the algorithm. Observe that of the last two while-loops in the Merge procedure, only one will be executed. (Do you see why?)</p>
                    </content>
                </q>
                <q name="If you find the recursion to be a bit confusing. Go back and look at the earlier figure. Convince yo&#8230;" id="q4_41_143" au="dyg" cDate="2017-07-25T10:16:11" mDate="2017-07-25T10:16:11" loc="start=566 end=1023 startpage=3 endpage=3">
                    <content size="457">
                        <p>If you find the recursion to be a bit confusing. Go back and look at the earlier figure. Convince yourself that as you unravel the recursion you are essentially walking through the tree (the recursion tree) shown in the figure. As calls are made you walk down towards the leaves, and as you return you are walking up towards the root. (We have drawn two trees in the figure, but this is just to make the distinction between the inputs and outputs clearer.)</p>
                    </content>
                </q>
                <q name="Discussion: One of the little tricks in improving the running time of this algorithm is to avoid the&#8230;" id="q4_42_144" au="dyg" cDate="2017-07-25T10:16:36" mDate="2017-08-15T20:06:40" loc="start=1023 end=1626 startpage=3 endpage=3">
                    <content size="603">
                        <p>Discussion: One of the little tricks in improving the running time of this algorithm is to avoid the constant copying from A to B and back to A. This is often handled in the implementation by using two arrays, both of equal size. At odd levels of the recursion we merge from subarrays of A to a subarray of B. At even levels we merge from from B to A. If the recursion has an odd number of levels, we may have to do one final copy from B back to A, but this is faster than having to do it at every level. Of course, this only improves the constant factors; it does not change the asymptotic running time</p>
                    </content>
                </q>
                <q name="Another implementation trick to speed things by a constant factor is that rather than driving the di&#8230;" id="q4_44_145" au="dyg" cDate="2017-07-25T10:19:08" mDate="2017-07-25T10:19:08" loc="start=1628 end=2248 startpage=3 endpage=3">
                    <content size="620">
                        <p>Another implementation trick to speed things by a constant factor is that rather than driving the divide- and-conquer all the way down to subsequences of size 1, instead stop the dividing process when the sequence sizes fall below constant, e.g. 20. Then invoke a simple &#920;(n2) algorithm, like insertion sort on these small lists. Often brute force algorithms run faster on small subsequences, because they do not have the added overhead of recursion. Note that since they are running on subsequences of size at most 20, the running times is &#920;(202) = &#920;(1). Thus, this will not affect the overall asymptotic running time.</p>
                    </content>
                </q>
                <q name="It might seem at first glance that it should be possible to merge the lists &#8220;in-place&#8221;, without the&#8230;" id="q4_46_146" au="dyg" cDate="2017-07-25T10:21:05" mDate="2017-08-15T20:08:07" loc="start=2248 end=2600 startpage=3 endpage=3">
                    <content size="352">
                        <p>It might seem at first glance that it should be possible to merge the lists &#8220;in-place&#8221;, without the need for additional temporary storage. The answer is that it is, but it no one knows how to do it without destroying the algorithm&#8217;s efficiency. It turns out that there are faster ways to sort numbers in-place, e.g. using either HeapSort or QuickSort.</p>
                    </content>
                </q>
                <q name="Here is a subtle but interesting point to make regarding this sorting algorithm. Suppose that in the&#8230;" id="q4_48_147" au="dyg" cDate="2017-07-25T10:23:32" mDate="2017-08-15T20:10:59" loc="start=2600 end=3562 startpage=3 endpage=3">
                    <content size="962">
                        <p>Here is a subtle but interesting point to make regarding this sorting algorithm. Suppose that in the if- statement above, we have A[i] = A[j]. Observe that in this case we copy from the left sublist. Would it have mattered if instead we had copied from the right sublist? The simple answer is no&#8212;since the elements are equal, they can appear in either order in the final sublist. However there is a subtler reason to prefer this particular choice. Many times we are sorting data that does not have a single attribute, but has many attributes (name, SSN, grade, etc.) Often the list may already have been sorted on one attribute (say, name). If we sort on a second attribute (say, grade), then it would be nice if people with same grade are still sorted by name. A sorting algorithm that has the property that equal items will appear in the final sorted list in the same relative order that they appeared in the initial input is called a stable sorting algorithm.</p>
                    </content>
                </q>
                <q name="This is a nice property for a sorting algorithm to have. By favoring elements from the left sublist&#8230;" id="q4_49_148" au="dyg" cDate="2017-07-25T10:24:48" mDate="2017-07-25T10:24:48" loc="start=3563 end=3807 startpage=3 endpage=3">
                    <content size="244">
                        <p>This is a nice property for a sorting algorithm to have. By favoring elements from the left sublist over the right, we will be preserving the relative order of elements. It can be shown that as a result, MergeSort is a stable sorting algorithm.</p>
                    </content>
                </q>
                <q name="Analysis: What remains is to analyze the running time of MergeSort." id="q4_50_149" au="dyg" cDate="2017-07-25T10:25:05" mDate="2017-07-25T10:25:05" loc="start=23 end=90 startpage=4 endpage=4">
                    <content size="67">
                        <p>Analysis: What remains is to analyze the running time of MergeSort.</p>
                    </content>
                </q>
                <q name="First let us consider the running time of the procedure Merge(A, p, q, r). Let n = r &#8722; p + 1 denote&#8230;" id="q4_51_150" au="dyg" cDate="2017-07-25T10:25:43" mDate="2017-07-25T10:25:43" loc="start=91 end=799 startpage=4 endpage=4">
                    <content size="708">
                        <p>First let us consider the running time of the procedure Merge(A, p, q, r). Let n = r &#8722; p + 1 denote the total length of both the left and right subarrays. What is the running time of Merge as a function of n? The algorithm contains four loops (none nested in the other). It is easy to see that each loop can be executed at most n times. (If you are a bit more careful you can actually see that all the while-loops together can only be executed n times in total, because each execution copies one new element to the array B, and B only has space for n elements.) Thus the running time to Merge n items is &#920;(n). Let us write this without the asymptotic notation, simply as n. (We&#8217;ll see later why we do this.)</p>
                    </content>
                </q>
                <q name="the use of a recurrence, that is, a function that is defined recursively in terms of itself. To avoi&#8230;" id="q4_53_151" au="dyg" cDate="2017-07-25T10:26:36" mDate="2017-08-15T20:13:44" loc="start=899 end=2548 startpage=4 endpage=4">
                    <content size="1649">
                        <p>the use of a recurrence, that is, a function that is defined recursively in terms of itself. To avoid circularity, the recurrence for a given value of n is defined in terms of values that are strictly smaller than n. Finally, a recurrence has some basis values (e.g. for n = 1), which are defined explicitly.</p>
                        <p>Let&#8217;s see how to apply this to MergeSort. Let T (n) denote the worst case running time of MergeSort on an array of length n. For concreteness we could count whatever we like: number of lines of pseudocode, number of comparisons, number of array accesses, since these will only differ by a constant factor. Since all of the real work is done in the Merge procedure, we will count the total time spent in the Merge procedure.</p>
                        <p>First observe that if we call MergeSort with a list containing a single element, then the running time is a constant. Since we are ignoring constant factors, we can just write T (n) = 1. When we call MergeSort with a list of length n &gt; 1, e.g. Merge(A, p, r), where r&#8722;p+1 = n, the algorithm first computes q = &#8970;(p + r)/2&#8971;. The subarray A[p..q], which contains q &#8722; p + 1 elements. You can verify (by some tedious floor-ceiling arithmetic, or simpler by just trying an odd example and an even example) that is of size &#8968;n/2&#8969;. Thus the remaining subarray A[q + 1..r] has &#8970;n/2&#8971; elements in it. How long does it take to sort the left subarray? We do not know this, but because &#8968;n/2&#8969; &lt; n for n &gt; 1, we can express this as T (&#8968;n/2&#8969;). Similarly, we can express the time that it takes to sort the right subarray as T (&#8970;n/2&#8971;). Finally, to merge both sorted lists takes n time, by the comments made above. In conclusion we have</p>
                    </content>
                </q>
                <q name="T(n) =" id="q4_55_152" au="dyg" cDate="2017-07-25T10:27:44" mDate="2017-07-25T10:27:44" loc="start=2549 end=2557 startpage=4 endpage=4">
                    <content size="8">
                        <p></p>
                        <p>T(n) =</p>
                    </content>
                </q>
                <q name="Lecture 6: Divide and Conquer and MergeSort" id="q4_56_153" au="dyg" cDate="2017-08-20T10:41:03" mDate="2017-08-20T10:41:03" loc="start=23 end=66 startpage=1 endpage=1">
                    <content size="43">
                        <p>Lecture 6: Divide and Conquer and MergeSort</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="AVT02.pdf" id="pd_5_4" loc="doc_4" au="dyg" cDate="2017-07-27T09:27:42" mDate="2017-08-24T11:14:26" qIndex="">
            <quotations size="18">
                <q name="we can never be sure how balanced the tree will be, since the order of insertions will determine thi&#8230;" id="q5_1_154" au="dyg" cDate="2017-07-27T09:28:50" mDate="2017-08-15T13:46:39" loc="start=73 end=176 startpage=0 endpage=0">
                    <content size="103">
                        <p> we can never be sure how balanced the tree will be, since the order of insertions will determine this.</p>
                    </content>
                </q>
                <q name="A solution is to create balanced BST&#8217;s as we do the insertions. An AVL tree is such a tree." id="q5_2_155" au="dyg" cDate="2017-07-27T09:29:10" mDate="2017-07-27T09:29:10" loc="start=177 end=269 startpage=0 endpage=0">
                    <content size="92">
                        <p>A solution is to create balanced BST&#8217;s as we do the insertions. An AVL tree is such a tree.</p>
                    </content>
                </q>
                <q name="alance condition is this: In an AVL tree, the height of the left and right subtrees of the root diff&#8230;" id="q5_3_156" au="dyg" cDate="2017-07-27T09:29:47" mDate="2017-08-17T11:53:21" loc="start=274 end=580 startpage=0 endpage=0">
                    <content size="306">
                        <p>alance condition is this: In an AVL tree, the height of the left and right subtrees of the root differ by at most 1, and in which the left and right subtrees are AVL trees also. This balance condiiton insures that searches, inseretions and deletetion will be close to O(Log2N), as in a fully balanced BST.</p>
                    </content>
                </q>
                <q name="Proposition: The height of an AVL tree T storing n keys is O(log n)." id="q5_4_157" au="dyg" cDate="2017-07-27T09:31:58" mDate="2017-07-27T09:31:58" loc="start=1330 end=1398 startpage=0 endpage=0">
                    <content size="68">
                        <p>Proposition: The height of an AVL tree T storing n keys is O(log n).</p>
                    </content>
                </q>
                <q name="Justification: The easiest way to approach this problem is to try to find the minimum number of inte&#8230;" id="q5_5_158" au="dyg" cDate="2017-07-27T09:34:01" mDate="2017-07-27T09:34:01" loc="start=1399 end=1535 startpage=0 endpage=0">
                    <content size="136">
                        <p>Justification: The easiest way to approach this problem is to try to find the minimum number of internal</p>
                        <p>nodesofanAVLtreeofheighth: N(h)</p>
                    </content>
                </q>
                <q name="ItisobviousthatthatN(1)=1andN(2)=2" id="q5_6_159" au="dyg" cDate="2017-07-27T09:34:37" mDate="2017-07-27T09:35:46" loc="start=1537 end=1571 startpage=0 endpage=0">
                    <content size="34">
                        <p>ItisobviousthatthatN(1)=1andN(2)=2</p>
                    </content>
                </q>
                <q name="Forh&#8805;3,anAVL tree of height h with N(h) minimal internal nodes contains the root node, one AVL subtr&#8230;" id="q5_7_160" au="dyg" cDate="2017-07-27T09:36:06" mDate="2017-07-27T09:36:06" loc="start=1573 end=1732 startpage=0 endpage=0">
                    <content size="159">
                        <p>Forh&#8805;3,anAVL tree of height h with N(h) minimal internal nodes contains the root node, one AVL subtree of height h-1 and the other AVL subtree of height h &#8722; 2.</p>
                    </content>
                </q>
                <q name="N (h) = Since: N(h&#8722;1) &gt; N (h) &gt; N (h) &gt; ... N (h) &gt; 1+N(h&#8722;1)+N(h&#8722;2) (1) N(h&#8722;2) (2) 2N (h &#8722; 2) (subst&#8230;" id="q5_8_161" au="dyg" cDate="2017-07-27T09:37:22" mDate="2017-07-27T09:37:22" loc="start=1116 end=1257 startpage=0 endpage=0">
                    <content size="141">
                        <p>N (h) = Since: N(h&#8722;1) &gt; N (h) &gt; N (h) &gt;</p>
                        <p>... N (h) &gt;</p>
                        <p>1+N(h&#8722;1)+N(h&#8722;2) (1) N(h&#8722;2) (2) 2N (h &#8722; 2) (substitute in (1) above, drop the + 1 term) (3</p>
                    </content>
                </q>
                <q name="3 AVL Rotation Templates" id="q5_9_162" au="dyg" cDate="2017-07-27T09:38:32" mDate="2017-07-27T09:38:32" loc="start=0 end=24 startpage=1 endpage=1">
                    <content size="24">
                        <p>3 AVL Rotation Templates</p>
                    </content>
                </q>
                <q name="Here is the Java code from the Weiss textbook for AVL insertion" id="q5_10_163" au="dyg" cDate="2017-07-27T09:39:02" mDate="2017-07-27T09:39:02" loc="start=0 end=63 startpage=2 endpage=2">
                    <content size="63">
                        <p>Here is the Java code from the Weiss textbook for AVL insertion</p>
                    </content>
                </q>
                <q name="AVL Tree Example:" id="q5_11_164" au="dyg" cDate="2017-07-27T09:39:51" mDate="2017-07-27T09:39:51" loc="start=0 end=17 startpage=5 endpage=5">
                    <content size="17">
                        <p>AVL Tree Example:</p>
                    </content>
                </q>
                <q name="When we do an insert into a Binary Search Tree (BST)" id="q5_12_165" au="dyg" cDate="2017-08-15T13:46:24" mDate="2017-08-15T13:46:24" loc="start=20 end=72 startpage=0 endpage=0">
                    <content size="52">
                        <p>When we do an insert into a Binary Search Tree (BST)</p>
                    </content>
                </q>
                <q name="AVL trees keep an additional piece of information at each node: the height of each nodes left and ri&#8230;" id="q5_13_166" au="dyg" cDate="2017-08-15T13:54:37" mDate="2017-08-15T13:54:37" loc="start=580 end=693 startpage=0 endpage=0">
                    <content size="113">
                        <p>AVL trees keep an additional piece of information at each node: the height of each nodes left and right subtrees.</p>
                    </content>
                </q>
                <q name="Since these heights can only differ by 1, any insertion into the tree will be analyzed to see if it&#8230;" id="q5_14_167" au="dyg" cDate="2017-08-15T13:55:18" mDate="2017-08-15T13:55:18" loc="start=694 end=825 startpage=0 endpage=0">
                    <content size="131">
                        <p>Since these heights can only differ by 1, any insertion into the tree will be analyzed to see if it violates the balance condition.</p>
                    </content>
                </q>
                <q name="If it does, then we need to reorganize the tree by a series of rotations. Rotations are simply point&#8230;" id="q5_15_168" au="dyg" cDate="2017-08-15T13:55:39" mDate="2017-08-15T13:55:50" loc="start=826 end=1012 startpage=0 endpage=0">
                    <content size="186">
                        <p>If it does, then we need to reorganize the tree by a series of rotations. Rotations are simply pointer changes that rearrange the structure of the tree to keep the AVL balance condition.</p>
                    </content>
                </q>
                <q name="The Weiss textbook has some good examples on rotations that explain how they work." id="q5_16_169" au="dyg" cDate="2017-08-15T13:55:57" mDate="2017-08-15T13:55:57" loc="start=1013 end=1095 startpage=0 endpage=0">
                    <content size="82">
                        <p>The Weiss textbook has some good examples on rotations that explain how they work.</p>
                    </content>
                </q>
                <q name="ItisobviousthatthatN(1)=1andN(2)=2." id="q5_17_170" au="dyg" cDate="2017-08-15T13:58:01" mDate="2017-08-15T13:58:01" loc="start=1537 end=1572 startpage=0 endpage=0">
                    <content size="35">
                        <p>ItisobviousthatthatN(1)=1andN(2)=2.</p>
                    </content>
                </q>
                <q name="The" id="q5_18_171" au="dyg" cDate="2017-08-17T11:53:26" mDate="2017-08-17T11:53:26" loc="start=269 end=272 startpage=0 endpage=0">
                    <content size="3">
                        <p>The</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="DJK03.pdf" id="pd_6_5" loc="doc_5" au="dyg" cDate="2017-07-31T09:32:13" mDate="2017-08-24T11:14:03" qIndex="">
            <quotations size="66">
                <q name="In 1959 a three pages long paper entitled A Note on Two Problems in Connexion with Graphs was publis&#8230;" id="q6_1_172" au="dyg" cDate="2017-07-31T09:33:41" mDate="2017-07-31T09:33:41" loc="start=634 end=775 startpage=0 endpage=0">
                    <content size="141">
                        <p>In 1959 a three pages long paper entitled A Note on Two Problems in Connexion with Graphs was published in the journal Numerische Mathematik.</p>
                    </content>
                </q>
                <q name="In this paper Edsger W. Dijkstra &#173; then a twenty&#173;nine&#173;year&#173;old computer scientist &#173; proposed algorit&#8230;" id="q6_2_173" au="dyg" cDate="2017-07-31T09:34:36" mDate="2017-07-31T09:34:36" loc="start=776 end=1195 startpage=0 endpage=0">
                    <content size="419">
                        <p>In this paper Edsger W. Dijkstra &#173; then a twenty&#173;nine&#173;year&#173;old computer scientist &#173; proposed algorithms for the solution of two fundamental graph theoretic problems: the minimum weight spanning tree problem and the shortest path problem. Today Dijkstra's Algorithm for the shortest path problem is one of the most celebrated algorithms in computer science (CS) and a very popular algorithm in operations research (OR).</p>
                    </content>
                </q>
                <q name="In the literature this algorithm is often described as a greedy algorithm." id="q6_3_174" au="dyg" cDate="2017-07-31T09:36:16" mDate="2017-07-31T09:36:16" loc="start=1195 end=1269 startpage=0 endpage=0">
                    <content size="74">
                        <p>In the literature this algorithm is often described as a greedy algorithm.</p>
                    </content>
                    <comment type="text/html" size="105">
                        <p>Using context here to mean that the author is situating the algorithm in the context of Computer science.</p>
                    </comment>
                </q>
                <q name="For example, the book Algorithmics (Brassard and Bratley [1988, pp. 87&#173;92]) discusses it in the chap&#8230;" id="q6_4_175" au="dyg" cDate="2017-07-31T09:38:04" mDate="2017-07-31T09:38:04" loc="start=1270 end=1773 startpage=0 endpage=0">
                    <content size="503">
                        <p>For example, the book Algorithmics (Brassard and Bratley [1988, pp. 87&#173;92]) discusses it in the chapter entitled Greedy Algorithms. The Encyclopedia of Operations Research and Management Science (Gass and Harris [1996, pp. 166&#173;167]) describes it as a "... node labelling greedy algorithm ... " and a greedy algorithm is described as "... a heuristic algorithm that at every step selects the best choice available at that step without regard to future consequences ..." (Gass and Harris [1996, p. 264]).</p>
                    </content>
                </q>
                <q name="Although the algorithm is very popular in the OR/MS literature, it is generally regarded as a &quot;compu&#8230;" id="q6_5_176" au="dyg" cDate="2017-07-31T09:38:23" mDate="2017-07-31T09:38:23" loc="start=1773 end=1893 startpage=0 endpage=0">
                    <content size="120">
                        <p>Although the algorithm is very popular in the OR/MS literature, it is generally regarded as a "computer science method".</p>
                    </content>
                </q>
                <q name="One of the objectives of this module is to present a completely different portrayal of Dijkstra's Al&#8230;" id="q6_8_177" au="dyg" cDate="2017-07-31T09:42:17" mDate="2017-07-31T09:43:15" loc="start=0 end=435 startpage=1 endpage=1">
                    <content size="435">
                        <p>One of the objectives of this module is to present a completely different portrayal of Dijkstra's Algorithm, its origin, its role in OR/MS and CS, and its relationship to other OR/MS methods and techniques. That is, we show that at the outset Dijkstra's Algorithm was inspired by Bellman's Principle of Optimality and that, not surprisingly, technically it should be viewed as a dynamic programming successive approximation procedure.</p>
                    </content>
                </q>
                <q name="Indeed, it is safe to say that the shortest path problem is one of the most important generic proble&#8230;" id="q6_10_178" au="dyg" cDate="2017-07-31T09:48:49" mDate="2017-07-31T09:54:30" loc="start=806 end=1264 startpage=1 endpage=1">
                    <content size="458">
                        <p>Indeed, it is safe to say that the shortest path problem is one of the most important generic problem in such fields as OR/MS, CS and artificial intelligence (AI). One of the reasons for this is that essentially any combinatorial optimization problem can be formulated as a shortest path problem. Thus, this class of problems is extremely large and includes numerous practical problems that have nothing to do with actual ("genuine") shortest path problems.</p>
                    </content>
                </q>
                <q name="New classes of genuine shortest path problem are becoming very important these days in connection wi&#8230;" id="q6_11_179" au="dyg" cDate="2017-07-31T09:55:41" mDate="2017-07-31T09:55:41" loc="start=1264 end=1478 startpage=1 endpage=1">
                    <content size="214">
                        <p>New classes of genuine shortest path problem are becoming very important these days in connection with practical applications of Geographic Information Systems (GIS) such as on line computing of driving directions.</p>
                    </content>
                </q>
                <q name="It is not surprising therefore that, for example, Microsoft has a research project on algorithms for&#8230;" id="q6_12_180" au="dyg" cDate="2017-07-31T09:57:28" mDate="2017-07-31T09:57:28" loc="start=1479 end=1603 startpage=1 endpage=1">
                    <content size="124">
                        <p>It is not surprising therefore that, for example, Microsoft has a research project on algorithms for shortest path problems.</p>
                    </content>
                </q>
                <q name="What may surprise a bit our students is how late in the history of applied mathematics this generic&#8230;" id="q6_13_181" au="dyg" cDate="2017-07-31T09:58:25" mDate="2017-08-15T13:10:22" loc="start=1604 end=2719 startpage=1 endpage=1">
                    <content size="1115">
                        <p>What may surprise a bit our students is how late in the history of applied mathematics this generic problem became the topic of extensive research work that ultimately produced efficient solution methods. However, in many respects it is not an accident at all that this generic problem is so intimately connected to the early days of OR/MS and electronic computers. The following quote is very indicative (Moore [1959, p. 292]):</p>
                        <p>The problem was first solved in connection with Claude Shannon's maze&#173; solving machine. When this machine was used with a maze which had more than one solution, a visitor asked why it had not built to always find the shortest path. Shannon and I each attempted to find economical methods of doing this by machine. He found several methods suitable for analog computation, and I obtained these algorithms. Months later the applicability of these ideas to practical problems in communication and transportation systems was suggested.</p>
                        <p>For the purposes of our discussion it is sufficient to consider only the "classical" version of the generic shortest path problem. There are many others.</p>
                    </content>
                </q>
                <q name="Consider then the problem consisting of n &gt; 1 cities {1,2,...,n} and a matrix D representing the len&#8230;" id="q6_15_182" au="dyg" cDate="2017-07-31T10:00:09" mDate="2017-07-31T10:00:09" loc="start=2719 end=2944 startpage=1 endpage=1">
                    <content size="225">
                        <p>Consider then the problem consisting of n &gt; 1 cities {1,2,...,n} and a matrix D representing the length of the direct links between the cities, so that D(i,j) denotes the length of the direct link connecting city i to city j.</p>
                    </content>
                </q>
                <q name="The distances are not assumed to be symmetric, so D(i,j) is not necessarily equal to D(j,i)" id="q6_16_183" au="dyg" cDate="2017-07-31T10:01:23" mDate="2017-07-31T10:01:23" loc="start=3022 end=69 startpage=1 endpage=2">
                    <content size="92">
                        <p>The distances are not</p>
                        <p>assumed to be symmetric, so D(i,j) is not necessarily equal to D(j,i)</p>
                    </content>
                </q>
                <q name="The objective is to find the shortest path from a given city h, called home, to a given city d, call&#8230;" id="q6_17_184" au="dyg" cDate="2017-07-31T10:01:57" mDate="2017-07-31T10:01:57" loc="start=71 end=186 startpage=2 endpage=2">
                    <content size="115">
                        <p>The objective is to find the shortest path from a given city h, called home, to a given city d, called destination.</p>
                    </content>
                </q>
                <q name="The length of a path is assumed to be equal to the sum of the lengths of the links between consecuti&#8230;" id="q6_18_185" au="dyg" cDate="2017-07-31T10:02:45" mDate="2017-07-31T10:02:45" loc="start=187 end=364 startpage=2 endpage=2">
                    <content size="177">
                        <p>The length of a path is assumed to be equal to the sum of the lengths of the links between consecutive cities on the path. With no loss of generality we assume that h=1 and d=n.</p>
                    </content>
                </q>
                <q name="So the basic question is: what is the shortest path from city 1 to city n?" id="q6_19_186" au="dyg" cDate="2017-07-31T10:03:08" mDate="2017-07-31T10:03:08" loc="start=365 end=439 startpage=2 endpage=2">
                    <content size="74">
                        <p>So the basic question is: what is the shortest path from city 1 to city n?</p>
                    </content>
                </q>
                <q name="To be able to cope easily with situations where the problem is not feasible (there is no path from c&#8230;" id="q6_20_187" au="dyg" cDate="2017-07-31T10:12:26" mDate="2017-08-15T13:16:03" loc="start=440 end=864 startpage=2 endpage=2">
                    <content size="424">
                        <p>To be able to cope easily with situations where the problem is not feasible (there is no path from city 1 to city n) we deploy the convention that if there is no direct link from city i to city j then D(i,j) is equal to infinity. Accordingly, should we conclude that the length of the shortest path from node i to node j is equal to infinity, the implication would be that there is no (feasible) path from node i to node j.</p>
                    </content>
                </q>
                <q name="Observe that subject to these conventions, an instance of the shortest path problem is uniquely spec&#8230;" id="q6_22_188" au="dyg" cDate="2017-07-31T10:14:58" mDate="2017-07-31T10:14:58" loc="start=864 end=1066 startpage=2 endpage=2">
                    <content size="202">
                        <p>Observe that subject to these conventions, an instance of the shortest path problem is uniquely specified by its distance matrix D. Thus, this matrix can be regarded as a complete model of the problem.</p>
                    </content>
                </q>
                <q name="As far as optimal solutions (paths) are concerned, we have to distinguish between three basic situat&#8230;" id="q6_23_189" au="dyg" cDate="2017-07-31T10:15:25" mDate="2017-07-31T10:15:28" loc="start=1066 end=1378 startpage=2 endpage=2">
                    <content size="312">
                        <p>As far as optimal solutions (paths) are concerned, we have to distinguish between three basic situations:</p>
                        <p>An optimal solution exists.</p>
                        <p>No optimal solution exits because there are no feasible solutions.</p>
                        <p>No optimal solution exists because the length of feasible paths from city 1 to city n is unbounded from below.</p>
                    </content>
                </q>
                <q name="Figure 1 depicts three instances illustrating these cases. The cities are represented by the nodes a&#8230;" id="q6_25_190" au="dyg" cDate="2017-07-31T10:16:15" mDate="2017-07-31T10:19:50" loc="start=1504 end=1876 startpage=2 endpage=2">
                    <content size="372">
                        <p>Figure 1 depicts three instances illustrating these cases. The cities are represented by the nodes and the distances are displayed on the directed arcs of the graphs. In all three cases n=4. The respective distance matrices are also provided. The symbol "*" represents infinity so the implication of D(i,j)="*" is that there is no direct link connecting city i to city j.</p>
                    </content>
                </q>
                <q name="By inspection we see that the problem depicted in Figure 1(a) has a unique optimal path, that is x=(&#8230;" id="q6_26_191" au="dyg" cDate="2017-07-31T10:19:30" mDate="2017-07-31T10:19:30" loc="start=9 end=484 startpage=3 endpage=3">
                    <content size="475">
                        <p>By inspection we see that the problem depicted in Figure 1(a) has a unique optimal path, that is x=(1,2,3,4), whose length is equal to 6. The problem depicted in Figure 1(b) does not have a feasible &#173; hence optimal &#173; solution. Figure 1(c) depicts a problem where there is no optimal solution because the length of a path from node 1 to node 4 can be made arbitrarily small by cycling through nodes 1,2 and 3. Every additional cycle will decrease the length of the path by 1.</p>
                    </content>
                </q>
                <q name="Observe that if we require the feasible paths to be simple, namely not to include cycles, then the p&#8230;" id="q6_27_192" au="dyg" cDate="2017-07-31T10:20:32" mDate="2017-07-31T10:21:31" loc="start=484 end=716 startpage=3 endpage=3">
                    <content size="232">
                        <p>Observe that if we require the feasible paths to be simple, namely not to include cycles, then the problem depicted in Figure 1(c) would be bounded. Indeed, it would have a unique optimal path x=(1,2,3,4) whose length is equal to 6.</p>
                    </content>
                </q>
                <q name="In our discussion we do not impose this condition on the problem formulation, namely we admit cyclic&#8230;" id="q6_28_193" au="dyg" cDate="2017-07-31T10:22:15" mDate="2017-07-31T10:22:15" loc="start=717 end=1113 startpage=3 endpage=3">
                    <content size="396">
                        <p>In our discussion we do not impose this condition on the problem formulation, namely we admit cyclic paths as feasible solutions provided that they satisfy the precedence constraints. Thus, x'=(1,2,3,1,2,3,4) and x"= (1,2,3,1,2,3,1,2,3,4) are feasible solutions for the problem depicted in Figure 1(c). This is why in the context of our discussion this problem does not have an optimal solution.</p>
                    </content>
                </q>
                <q name="Let C={1,2,...,n} denote the set of cities and for each city j in C let P(j) denote the set of its i&#8230;" id="q6_29_194" au="dyg" cDate="2017-07-31T10:26:07" mDate="2017-08-15T13:22:46" loc="start=1113 end=1400 startpage=3 endpage=3">
                    <content size="287">
                        <p>Let C={1,2,...,n} denote the set of cities and for each city j in C let P(j) denote the set of its immediate predecessors, and let S(j) denote the set of its immediate successors, namely set</p>
                        <p>P(j) = {k in C: D(k,j) &lt; infinity} , j in C (1) S(j) = {k in C: D(j,k) &lt; infinity} , j in C (2)</p>
                    </content>
                </q>
                <q name="Thus, for the problem depicted in Figure 1(a), P(1)={}, P(2)={1}, P(3)={1,2}, P(4)={3}, S(1)={2,3},&#8230;" id="q6_31_195" au="dyg" cDate="2017-07-31T10:26:50" mDate="2017-07-31T10:26:50" loc="start=1400 end=1560 startpage=3 endpage=3">
                    <content size="160">
                        <p>Thus, for the problem depicted in Figure 1(a), P(1)={}, P(2)={1}, P(3)={1,2}, P(4)={3}, S(1)={2,3}, S(2)={3}, S(3)={4}, S(4)={}, where {} denotes the empty set.</p>
                    </content>
                </q>
                <q name="Also, let NP denote the set of cities that have no immediate predecessors, and let NS denote the set&#8230;" id="q6_32_196" au="dyg" cDate="2017-07-31T10:27:55" mDate="2017-07-31T10:27:55" loc="start=1561 end=1777 startpage=3 endpage=3">
                    <content size="216">
                        <p>Also, let NP denote the set of cities that have no immediate predecessors, and let NS denote the set of cities that have no immediate successors, that is let</p>
                        <p>NP = {j in C: P(j) = {}} (3) NS = {j in C: S(j) = {}} (4)</p>
                    </content>
                </q>
                <q name="Thus, in the case of Figure 1(a), NP={1} and NS={4}. Obviously, if city 1 is in NS and/or city n is&#8230;" id="q6_33_197" au="dyg" cDate="2017-07-31T10:28:10" mDate="2017-07-31T10:28:10" loc="start=1777 end=1917 startpage=3 endpage=3">
                    <content size="140">
                        <p>Thus, in the case of Figure 1(a), NP={1} and NS={4}. Obviously, if city 1 is in NS and/or city n is in NP then the problem is not feasible.</p>
                    </content>
                </q>
                <q name="For technical reasons it is convenient to assume that P(1) = {}, namely that city 1 does not have an&#8230;" id="q6_34_198" au="dyg" cDate="2017-07-31T10:28:26" mDate="2017-07-31T10:28:40" loc="start=1917 end=2335 startpage=3 endpage=3">
                    <content size="418">
                        <p>For technical reasons it is convenient to assume that P(1) = {}, namely that city 1 does not have any immediate predecessors. This is a mere formality because if this condition is not satisfied, we can simply introduce a dummy city and connect it to city 1 with a link of length 0. We can then assume that this dummy city &#173; rather than city 1 &#173; is the home city. This minor modelling issue is illustrated in Figure 2.</p>
                    </content>
                </q>
                <q name="Figure 2 The two problems are equivalent in the sense that the problem of finding an optimal path fr&#8230;" id="q6_35_199" au="dyg" cDate="2017-07-31T10:28:57" mDate="2017-08-15T13:27:11" loc="start=0 end=342 startpage=4 endpage=4">
                    <content size="342">
                        <p>Figure 2</p>
                        <p>The two problems are equivalent in the sense that the problem of finding an optimal path from city 1 to city 4 in Figure 2(a) is equivalent to the problem of finding an optimal path from city 1 to city 5 in Figure 2(b). There is a one to one correspondence between the feasible &#173; therefore optimal &#173; solutions to these two problems.</p>
                    </content>
                </q>
                <q name="DP algorithms are inspired by the famous Bellman's [1957, p. 83] Principle of Optimality:" id="q6_37_200" au="dyg" cDate="2017-08-01T10:22:17" mDate="2017-08-01T10:22:17" loc="start=586 end=676 startpage=4 endpage=4">
                    <content size="90">
                        <p>DP algorithms are inspired by the famous Bellman's [1957, p. 83] Principle of Optimality:</p>
                    </content>
                </q>
                <q name="An optimal policy has the property that whatever the initial state and initial decision are, the rem&#8230;" id="q6_38_201" au="dyg" cDate="2017-08-01T10:23:01" mDate="2017-08-01T10:23:01" loc="start=1289 end=1500 startpage=4 endpage=4">
                    <content size="211">
                        <p>An optimal policy has the property that whatever the initial state and initial decision are, the remaining decisions must constitute and optimal policy with regard to the state resulting from the first decision.</p>
                    </content>
                </q>
                <q name="Guided by this principle, the first thing we do is generalize our shortest path problem (find an opt&#8230;" id="q6_39_202" au="dyg" cDate="2017-08-01T10:34:49" mDate="2017-08-01T10:34:49" loc="start=676 end=921 startpage=4 endpage=4">
                    <content size="245">
                        <p>Guided by this principle, the first thing we do is generalize our shortest path problem (find an optimal path from city 1 to city n) by embedding it in a family of related problems (find an optimal path from city 1 to city j, for j=1,2,3,...,n).</p>
                    </content>
                    <comment type="text/html" size="165">
                        <p>This sentence is hard to place because it uses the previously defined principle and relates it to the shortest path problem.



I think this is a sub-scoping as well</p>
                    </comment>
                </q>
                <q name="f(j) := length of the shortest path from node 1 to node j, , (5) j=1,2,3,...,n." id="q6_40_203" au="dyg" cDate="2017-08-01T10:35:50" mDate="2017-08-01T10:35:50" loc="start=972 end=1051 startpage=4 endpage=4">
                    <content size="79">
                        <p>f(j) := length of the shortest path from node 1 to node j, , (5) j=1,2,3,...,n.</p>
                    </content>
                </q>
                <q name="It is important to stress that our objective is to determine the value of f(n)." id="q6_41_204" au="dyg" cDate="2017-08-01T10:38:08" mDate="2017-08-01T10:38:08" loc="start=1052 end=1131 startpage=4 endpage=4">
                    <content size="79">
                        <p>It is important to stress that our objective is to determine the value of f(n).</p>
                    </content>
                </q>
                <q name="The values of {f(j), j=1,2,...,n&#173;1} are introduced not necessarily because we are interested in them&#8230;" id="q6_42_205" au="dyg" cDate="2017-08-01T10:39:11" mDate="2017-08-01T10:39:11" loc="start=1132 end=1288 startpage=4 endpage=4">
                    <content size="156">
                        <p>The values of {f(j), j=1,2,...,n&#173;1} are introduced not necessarily because we are interested in them, but first and foremost because this is the way dynamic</p>
                    </content>
                </q>
                <q name="In any case, using the above definition of f(j), the following is one of the immediate implications&#8230;" id="q6_43_206" au="dyg" cDate="2017-08-01T10:41:02" mDate="2017-08-01T10:41:02" loc="start=140 end=298 startpage=5 endpage=5">
                    <content size="158">
                        <p>In any case, using the above definition of f(j), the following is one of the immediate implications of the principle in the context of the short path problem:</p>
                    </content>
                    <comment type="text/html" size="31">
                        <p>property might be a subs coping</p>
                    </comment>
                </q>
                <q name="Corollary 1 f(j) = D(k,j) + f(k) , for some city k in P(j) (6) for any city j such that P(j) != {},&#8230;" id="q6_44_207" au="dyg" cDate="2017-08-01T10:42:08" mDate="2017-08-15T13:34:24" loc="start=299 end=432 startpage=5 endpage=5">
                    <content size="133">
                        <p>Corollary 1</p>
                        <p>f(j) = D(k,j) + f(k) , for some city k in P(j) (6)</p>
                        <p>for any city j such that P(j) != {}, where != denotes "not equal to".</p>
                    </content>
                </q>
                <q name="f(j) = min {D(k,j) + f(k): k in P(j)} , if P(j) != {}. (!= means &quot;not equal to&quot;) (7) f(j) = Infinity&#8230;" id="q6_45_208" au="dyg" cDate="2017-08-01T10:45:05" mDate="2017-08-01T10:45:05" loc="start=979 end=1150 startpage=5 endpage=5">
                    <content size="171">
                        <p>f(j) = min {D(k,j) + f(k): k in P(j)} , if P(j) != {}. (!= means "not equal to") (7) f(j) = Infinity , if P(j) = {} and j &gt; 1. (8) f(1) = 0 , (We assume that P(1)={}). (9)</p>
                    </content>
                </q>
                <q name="This is the dynamic programming functional equation for the shortest path problem." id="q6_46_209" au="dyg" cDate="2017-08-01T10:45:25" mDate="2017-08-01T10:45:25" loc="start=1151 end=1233 startpage=5 endpage=5">
                    <content size="82">
                        <p>This is the dynamic programming functional equation for the shortest path problem.</p>
                    </content>
                </q>
                <q name="It should be stressed that, here and elsewhere, the dynamic programming functional equation does not&#8230;" id="q6_47_210" au="dyg" cDate="2017-08-01T10:45:39" mDate="2017-08-01T10:46:10" loc="start=1234 end=1830 startpage=5 endpage=5">
                    <content size="596">
                        <p>It should be stressed that, here and elsewhere, the dynamic programming functional equation does not constitute an algorithm. It merely stipulates certain properties that function f defined in (5) must satisfy. Indeed, in the context of Corollary 2 it constitutes a necessary optimality condition. This point is sometime not appreciated by students in their first encounter with dynamic programming. Apparently this is a reflection of the fact that in many 'textbook examples' the description of the algorithm used to solve the functional equation is almost a carbon copy of the equation itself.</p>
                    </content>
                </q>
                <q name="From a purely technical point of view Dijkstra's Algorithm can be described as an iterative procedur&#8230;" id="q6_48_211" au="dyg" cDate="2017-08-01T10:47:37" mDate="2017-08-01T10:48:07" loc="start=212 end=506 startpage=7 endpage=7">
                    <content size="294">
                        <p>From a purely technical point of view Dijkstra's Algorithm can be described as an iterative procedure inspired by (6) that repeatedly attempts to improve an initial approximation {F(j)} of the (exact) values of {f(j)}. The initial approximation is simply F(1)=0 and F(j)=infinity for j=2,...,n.</p>
                    </content>
                </q>
                <q name="Each city (node) is processed exactly once according to an order to be specified below. City 1 is pr&#8230;" id="q6_49_212" au="dyg" cDate="2017-08-01T10:52:40" mDate="2017-08-01T10:52:40" loc="start=535 end=759 startpage=7 endpage=7">
                    <content size="224">
                        <p>Each city (node) is processed exactly once according to an order to be specified below. City 1 is processed first. A record (set) is kept of the cities that are yet to be processed, call it U. So initially U = C = {1,...,n}.</p>
                    </content>
                </q>
                <q name="When city k is processed the following task is performed: Update F: set F(j) = min{F(j),D(k,j) + F(k&#8230;" id="q6_50_213" au="dyg" cDate="2017-08-01T10:52:58" mDate="2017-08-01T10:52:58" loc="start=760 end=890 startpage=7 endpage=7">
                    <content size="130">
                        <p>When city k is processed the following task is performed:</p>
                        <p>Update F: set F(j) = min{F(j),D(k,j) + F(k)}, for all j in U/\S(k) (10)</p>
                    </content>
                </q>
                <q name="where A/\B denotes the intersection of sets A and B. Recall that S(j) denotes the set of immediate s&#8230;" id="q6_51_214" au="dyg" cDate="2017-08-01T10:53:14" mDate="2017-08-15T13:39:42" loc="start=890 end=1159 startpage=7 endpage=7">
                    <content size="269">
                        <p>where A/\B denotes the intersection of sets A and B. Recall that S(j) denotes the set of immediate successors of city j. Thus, when city k is processed, the {F(j)} values of its immediate successors that have not yet been processed are updated in accordance with (10).</p>
                    </content>
                </q>
                <q name="To complete the informal description of the algorithm it is only necessary to specify the order in w&#8230;" id="q6_53_215" au="dyg" cDate="2017-08-01T10:55:20" mDate="2017-08-01T10:55:20" loc="start=1159 end=1416 startpage=7 endpage=7">
                    <content size="257">
                        <p>To complete the informal description of the algorithm it is only necessary to specify the order in which the cities are processed. This is not difficult: the next city to be processed is one whose F(j) value is the smallest over all the unprocessed cities:</p>
                    </content>
                </q>
                <q name="Update k: k = arg min {F(j): j in U} (11)" id="q6_54_216" au="dyg" cDate="2017-08-01T10:55:38" mDate="2017-08-01T10:55:38" loc="start=1416 end=1457 startpage=7 endpage=7">
                    <content size="41">
                        <p>Update k: k = arg min {F(j): j in U} (11)</p>
                    </content>
                </q>
                <q name="Thus, initially U = {1,...,n} and then after city k is processed it is immediately deleted from U." id="q6_55_217" au="dyg" cDate="2017-08-01T10:56:00" mDate="2017-08-01T10:56:00" loc="start=1514 end=1612 startpage=7 endpage=7">
                    <content size="98">
                        <p>Thus, initially U = {1,...,n} and then after city k is processed it is immediately deleted from U.</p>
                    </content>
                </q>
                <q name="Note that &quot;arg min {F(j): j in U}&quot; denotes the value of j in U, call it k, such that F(k) = min {F(j&#8230;" id="q6_56_218" au="dyg" cDate="2017-08-01T10:56:13" mDate="2017-08-01T10:56:13" loc="start=1613 end=1809 startpage=7 endpage=7">
                    <content size="196">
                        <p>Note that "arg min {F(j): j in U}" denotes the value of j in U, call it k, such that F(k) = min {F(j): j in U}. That is, the new value of k is an element of U such that F(k) = min {F(j): j in U}.</p>
                    </content>
                </q>
                <q name="Update U: U = U\{k} (12)" id="q6_57_219" au="dyg" cDate="2017-08-01T10:56:28" mDate="2017-08-01T10:56:28" loc="start=1823 end=1847 startpage=7 endpage=7">
                    <content size="24">
                        <p>Update U: U = U\{k} (12)</p>
                    </content>
                </q>
                <q name="We note in passing that the reason that Dijkstra's Algorithm is regarded as a Greedy method lies in&#8230;" id="q6_58_220" au="dyg" cDate="2017-08-01T10:57:58" mDate="2017-08-01T10:57:58" loc="start=1848 end=2129 startpage=7 endpage=7">
                    <content size="281">
                        <p>We note in passing that the reason that Dijkstra's Algorithm is regarded as a Greedy method lies in the rule it deploys, (11), to select the next city to be processed: the next city to be processed is the one that is nearest to city 1 among all cities that are yet to be processed.</p>
                    </content>
                </q>
                <q name="The stopping rule is simple: Stop when the destination city &#173; in our case city n &#173; is about to be pr&#8230;" id="q6_59_221" au="dyg" cDate="2017-08-01T10:58:40" mDate="2017-08-01T10:58:40" loc="start=2130 end=2372 startpage=7 endpage=7">
                    <content size="242">
                        <p>The stopping rule is simple: Stop when the destination city &#173; in our case city n &#173; is about to be processed. If the objective is to find the shortest path from node 1 to all other cities, then we stop when all the cities have been processed.</p>
                    </content>
                </q>
                <q name="The following module was designed to illustrate how the algorithm works. The objective is to find th&#8230;" id="q6_61_222" au="dyg" cDate="2017-08-01T10:59:12" mDate="2017-08-15T13:42:55" loc="start=0 end=163 startpage=8 endpage=8">
                    <content size="163">
                        <p>The following module was designed to illustrate how the algorithm works. The objective is to find the shortest paths from the red node (origin) to all other nodes.</p>
                    </content>
                </q>
                <q name="Observe that the updated {F(j)} values are displayed inside the respective nodes." id="q6_62_223" au="dyg" cDate="2017-08-01T10:59:29" mDate="2017-08-01T10:59:29" loc="start=164 end=245 startpage=8 endpage=8">
                    <content size="81">
                        <p>Observe that the updated {F(j)} values are displayed inside the respective nodes.</p>
                    </content>
                </q>
                <q name="A color scheme is used to indicate which nodes have been processed, which node is being processed an&#8230;" id="q6_63_224" au="dyg" cDate="2017-08-01T10:59:36" mDate="2017-08-01T10:59:57" loc="start=246 end=438 startpage=8 endpage=8">
                    <content size="192">
                        <p>A color scheme is used to indicate which nodes have been processed, which node is being processed and so on. As the nodes are being processed, the optimal arcs are identified and highlighted.</p>
                    </content>
                </q>
                <q name="A full explanation is provided below. Note that the nodes are not labeled so it is tempting to displ&#8230;" id="q6_64_225" au="dyg" cDate="2017-08-01T11:00:34" mDate="2017-08-01T11:00:34" loc="start=469 end=721 startpage=8 endpage=8">
                    <content size="252">
                        <p>A full explanation is provided below. Note that the nodes are not labeled so it is tempting to display the F(j) values on the nodes themselves. If the nodes are labeled, their F(j) values can be displayed nearby, say just above or just below the nodes.</p>
                    </content>
                </q>
                <q name="Unprocessed network. Initialization: U = set of all nodes except the origin, F(origin)=0, F(j)=infin&#8230;" id="q6_65_226" au="dyg" cDate="2017-08-01T11:00:42" mDate="2017-08-01T11:01:37" loc="start=722 end=847 startpage=8 endpage=8">
                    <content size="125">
                        <p>Unprocessed network.</p>
                        <p>Initialization: U = set of all nodes except the origin, F(origin)=0, F(j)=infinity for all other nodes.</p>
                    </content>
                </q>
                <q name="so the F(j) values of its two immediate successors (gold nodes) are updated according to (10)." id="q6_66_227" au="dyg" cDate="2017-08-01T11:02:34" mDate="2017-08-01T11:02:34" loc="start=0 end=94 startpage=9 endpage=9">
                    <content size="94">
                        <p>so the F(j) values of its two immediate successors (gold nodes) are updated according to (10).</p>
                    </content>
                    <comment type="text/html" size="44">
                        <p>This tag encompases the rest of teh document</p>
                    </comment>
                </q>
                <q name="Dijkstra's Algorithm" id="q6_67_228" au="dyg" cDate="2017-08-15T13:03:03" mDate="2017-08-15T13:03:03" loc="start=0 end=20 startpage=0 endpage=0">
                    <content size="20">
                        <p>Dijkstra's Algorithm</p>
                    </content>
                </q>
                <q name="Apparently this is due to three factors: (a) its inventor was a computer scientist (b) its associati&#8230;" id="q6_68_229" au="dyg" cDate="2017-08-15T13:06:25" mDate="2017-08-15T13:06:25" loc="start=1894 end=2766 startpage=0 endpage=0">
                    <content size="872">
                        <p>Apparently this is due to three factors: (a) its inventor was a computer scientist (b) its association with special data structures, and (c) there are competing OR/MS oriented algorithms for the shortest path problem. It is not surprising therefore that some well established OR/MS textbooks do not even mention this algorithm in their discussions on the shortest path problem (eg. Daellenbach et al [1983], Hillier and Lieberman [1990]) and those that do discuss it in that context present it in a stand&#173;alone mode, that is, they do not relate it to standard OR/MS methods (eg. Markland and Sweigart [1987], Winston [2004]). For the same reason it is not surprising that the "Dijkstra's Algorithm" entry in the Encyclopedia of Operations Research and Management Science (Gass and Harris [1996, pp. 166&#173;167]) does not have any reference whatsoever to dynamic programming.</p>
                    </content>
                </q>
                <q name="One of the main reasons for the popularity of Dijkstra's Algorithm" id="q6_69_230" au="dyg" cDate="2017-08-15T13:07:57" mDate="2017-08-19T16:10:00" loc="start=461 end=527 startpage=1 endpage=1">
                    <content size="66">
                        <p>One of the main reasons for the popularity of Dijkstra's Algorithm</p>
                    </content>
                </q>
                <q name="So with no loss of generality we assume that P(1)={}." id="q6_70_231" au="dyg" cDate="2017-08-15T13:27:24" mDate="2017-08-15T13:27:24" loc="start=342 end=395 startpage=4 endpage=4">
                    <content size="53">
                        <p>So with no loss of generality we assume that P(1)={}.</p>
                    </content>
                </q>
                <q name="Of course, algorithmically speaking, this result is not completely satisfactory because it does not&#8230;" id="q6_71_232" au="dyg" cDate="2017-08-15T13:35:02" mDate="2017-08-15T13:35:02" loc="start=432 end=668 startpage=5 endpage=5">
                    <content size="236">
                        <p>Of course, algorithmically speaking, this result is not completely satisfactory because it does not identify precisely the value of k for which (6) holds. It merely guarantees that such a k exists and that it is an element of set P(j).</p>
                    </content>
                </q>
                <q name="However, conceptually this is just a minor obstacle. After all, f(j) denotes the shortest distance f&#8230;" id="q6_72_233" au="dyg" cDate="2017-08-15T13:35:09" mDate="2017-08-15T13:35:09" loc="start=668 end=951 startpage=5 endpage=5">
                    <content size="283">
                        <p>However, conceptually this is just a minor obstacle. After all, f(j) denotes the shortest distance from node 1 to node j and therefore as such it is obvious that the mysterious k on the right hand side of (6) can be identify by making the right hand side of (6) as small as possible.</p>
                    </content>
                </q>
                <q name="Corollary 2" id="q6_73_234" au="dyg" cDate="2017-08-15T13:35:25" mDate="2017-08-15T13:35:25" loc="start=967 end=978 startpage=5 endpage=5">
                    <content size="11">
                        <p>Corollary 2</p>
                    </content>
                </q>
                <q name="Dijkstra's Algorithm" id="q6_74_235" au="dyg" cDate="2017-08-15T13:36:46" mDate="2017-08-15T13:36:46" loc="start=191 end=211 startpage=7 endpage=7">
                    <content size="20">
                        <p>Dijkstra's Algorithm</p>
                    </content>
                </q>
                <q name="is that it is one of the most important and useful algorithms available for generating (exact) optim&#8230;" id="q6_75_236" au="dyg" cDate="2017-08-19T16:11:40" mDate="2017-08-19T16:11:40" loc="start=528 end=684 startpage=1 endpage=1">
                    <content size="156">
                        <p>is that it is one of the most important and useful algorithms available for generating (exact) optimal solutions to a large class of shortest path problems.</p>
                    </content>
                    <comment type="text/html" size="101">
                        <p>This is discussing a class in the context of a problem in the context of the motivation of Dijkstra&#8217;s</p>
                    </comment>
                </q>
                <q name="The point being that this class of problems is extremely important theoretically, practically, as we&#8230;" id="q6_76_237" au="dyg" cDate="2017-08-19T16:11:48" mDate="2017-08-19T16:11:48" loc="start=685 end=805 startpage=1 endpage=1">
                    <content size="120">
                        <p>The point being that this class of problems is extremely important theoretically, practically, as well as educationally.</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="MS02.pdf" id="pd_7_6" loc="doc_6" au="dyg" cDate="2017-08-01T11:03:27" mDate="2017-08-24T11:13:34" qIndex="">
            <quotations size="33">
                <q name="Consider sorting the values in an array A of size N. Most sorting algorithms involve what are called&#8230;" id="q7_1_238" au="dyg" cDate="2017-08-02T09:20:32" mDate="2017-08-02T09:20:32" loc="start=228 end=383 startpage=0 endpage=0">
                    <content size="155">
                        <p>Consider sorting the values in an array A of size N. Most sorting algorithms involve what are called comparison</p>
                        <p>sorts; i.e., they work by comparing values.</p>
                    </content>
                </q>
                <q name="Comparison sorts can never have a worst-case running time less than O(N log N). Simple comparison so&#8230;" id="q7_2_239" au="dyg" cDate="2017-08-02T09:21:14" mDate="2017-08-02T09:21:14" loc="start=384 end=544 startpage=0 endpage=0">
                    <content size="160">
                        <p>Comparison sorts can never have a worst-case running time less than O(N log N). Simple comparison sorts are usually O(N2); the more clever ones are O(N log N).</p>
                    </content>
                </q>
                <q name="Does an algorithm always take its worst-case time? What happens on an already-sorted array? How much&#8230;" id="q7_3_240" au="dyg" cDate="2017-08-02T09:24:35" mDate="2017-08-02T09:24:35" loc="start=635 end=799 startpage=0 endpage=0">
                    <content size="164">
                        <p>Does an algorithm always take its worst-case time?</p>
                        <p>What happens on an already-sorted array?</p>
                        <p>How much space (other than the space for the array itself) is required?</p>
                    </content>
                </q>
                <q name="We will discuss four comparison-sort algorithms:" id="q7_4_241" au="dyg" cDate="2017-08-02T09:27:04" mDate="2017-08-02T09:27:04" loc="start=799 end=848 startpage=0 endpage=0">
                    <content size="49">
                        <p>We will discuss four comparison-sort algorithms:</p>
                    </content>
                </q>
                <q name="Selection sort and insertion sort have" id="q7_5_242" au="dyg" cDate="2017-08-02T09:28:08" mDate="2017-08-20T10:50:27" loc="start=912 end=951 startpage=0 endpage=0">
                    <content size="39">
                        <p>Selection sort and insertion sort have </p>
                    </content>
                </q>
                <q name="As mentioned above, merge sort takes time O(N log N), which is quite a bit better than the two O(N2)&#8230;" id="q7_7_243" au="dyg" cDate="2017-08-02T09:30:52" mDate="2017-08-02T09:30:52" loc="start=0 end=251 startpage=4 endpage=4">
                    <content size="251">
                        <p>As mentioned above, merge sort takes time O(N log N), which is quite a bit better than the two O(N2) sorts described above (for example, when N=1,000,000, N2=1,000,000,000,000, and N log2 N = 20,000,000; i.e., N2 is 50,000 times larger than N log N!).</p>
                    </content>
                </q>
                <q name="The key insight behind merge sort is that it is possible to merge two sorted arrays, each containing&#8230;" id="q7_9_244" au="dyg" cDate="2017-08-02T09:34:51" mDate="2017-08-20T10:59:13" loc="start=252 end=623 startpage=4 endpage=4">
                    <content size="371">
                        <p>The key insight behind merge sort is that it is possible to merge two sorted arrays, each containing N/2 items to form one sorted array containing N items in time O(N). To do this merge, you just step through the two arrays, always choosing the smaller of the two values to put into the final array (and only advancing in the array from which you took the smaller value).</p>
                    </content>
                </q>
                <q name="Here's a picture illustrating this merge process:" id="q7_10_245" au="dyg" cDate="2017-08-02T09:35:04" mDate="2017-08-02T09:35:04" loc="start=624 end=673 startpage=4 endpage=4">
                    <content size="49">
                        <p>Here's a picture illustrating this merge process:</p>
                    </content>
                </q>
                <q name="Now the question is, how do we get the two sorted arrays of size N/2?" id="q7_11_246" au="dyg" cDate="2017-08-02T09:44:56" mDate="2017-08-02T09:44:56" loc="start=674 end=743 startpage=4 endpage=4">
                    <content size="69">
                        <p>Now the question is, how do we get the two sorted arrays of size N/2?</p>
                    </content>
                </q>
                <q name="The answer is to use recursion; to sort an array of length N:" id="q7_12_247" au="dyg" cDate="2017-08-02T09:45:25" mDate="2017-08-02T09:45:25" loc="start=744 end=805 startpage=4 endpage=4">
                    <content size="61">
                        <p>The answer is to use recursion; to sort an array of length N:</p>
                    </content>
                </q>
                <q name="Divide the array into two halves. 2. Recursively, sort the left half. 3. Recursively, sort the right&#8230;" id="q7_13_248" au="dyg" cDate="2017-08-02T09:45:35" mDate="2017-08-02T09:45:35" loc="start=809 end=948 startpage=4 endpage=4">
                    <content size="139">
                        <p>Divide the array into two halves. 2. Recursively, sort the left half.</p>
                        <p>3. Recursively, sort the right half. 4. Merge the two sorted halves.</p>
                    </content>
                </q>
                <q name="The base case for the recursion is when the array to be sorted is of length 1 -- then it is already&#8230;" id="q7_14_249" au="dyg" cDate="2017-08-02T09:45:51" mDate="2017-08-02T09:45:51" loc="start=948 end=1082 startpage=4 endpage=4">
                    <content size="134">
                        <p>The base case for the recursion is when the array to be sorted is of length 1 -- then it is already sorted, so there is nothing to do.</p>
                    </content>
                </q>
                <q name="Note that the merge step (step 4) needs to use an auxiliary array (to avoid overwriting its values)." id="q7_15_250" au="dyg" cDate="2017-08-02T09:47:38" mDate="2017-08-02T09:47:38" loc="start=1083 end=1183 startpage=4 endpage=4">
                    <content size="100">
                        <p>Note that the merge step (step 4) needs to use an auxiliary array (to avoid overwriting its values).</p>
                    </content>
                </q>
                <q name="The sorted values are then copied back from the auxiliary array to the original array." id="q7_16_251" au="dyg" cDate="2017-08-02T09:49:16" mDate="2017-08-02T09:49:16" loc="start=1184 end=1270 startpage=4 endpage=4">
                    <content size="86">
                        <p>The sorted values are then copied back from the auxiliary array to the original array.</p>
                    </content>
                </q>
                <q name="An outline of the code for merge sort is given below. It uses an auxiliary method with extra paramet&#8230;" id="q7_17_252" au="dyg" cDate="2017-08-02T09:49:54" mDate="2017-08-02T09:49:54" loc="start=1271 end=1454 startpage=4 endpage=4">
                    <content size="183">
                        <p>An outline of the code for merge sort is given below. It uses an auxiliary method with extra parameters that tell what part of array A each recursive call is responsible for sorting.</p>
                    </content>
                </q>
                <q name="Fill in the missing code in the mergeSort method." id="q7_18_253" au="dyg" cDate="2017-08-02T09:51:23" mDate="2017-08-02T09:51:23" loc="start=1564 end=1613 startpage=5 endpage=5">
                    <content size="49">
                        <p>Fill in the missing code in the mergeSort method.</p>
                    </content>
                </q>
                <q name="merge sort -- that work by dividing the problem in two, solving the smaller versions, and then combi&#8230;" id="q7_19_254" au="dyg" cDate="2017-08-02T09:51:42" mDate="2017-08-20T11:02:42" loc="start=1639 end=1802 startpage=5 endpage=5">
                    <content size="163">
                        <p>merge sort -- that work by dividing the problem in two, solving the smaller versions, and then combining the solutions -- are called divide and conquer algorithms.</p>
                    </content>
                </q>
                <q name="Below is a picture illustrating the divide- and-conquer aspect of merge sort using a new example arr&#8230;" id="q7_20_255" au="dyg" cDate="2017-08-02T09:52:09" mDate="2017-08-02T09:52:09" loc="start=1803 end=1906 startpage=5 endpage=5">
                    <content size="103">
                        <p>Below is a picture illustrating the divide- and-conquer aspect of merge sort using a new example array.</p>
                    </content>
                </q>
                <q name="The picture shows the problem being divided up into smaller and smaller pieces (first an array of si&#8230;" id="q7_21_256" au="dyg" cDate="2017-08-02T09:52:29" mDate="2017-08-02T09:52:32" loc="start=1907 end=2417 startpage=5 endpage=5">
                    <content size="510">
                        <p>The picture shows the problem being divided up into smaller and smaller pieces (first an array of size 8, then two halves each of size 4, etc). Then it shows the "combine" steps: the solved problems of half size are merged to form solutions to the larger problem. (Note that the picture illustrates the conceptual ideas -- in an actual execution, the small problems would be solved one after the other, not in parallel. Also, the picture doesn't illustrate the use of auxiliary arrays during the merge steps.)</p>
                    </content>
                </q>
                <q name="To determine the time for merge sort, it is helpful to visualize the calls made to mergeAux as shown&#8230;" id="q7_22_257" au="dyg" cDate="2017-08-02T09:53:03" mDate="2017-08-02T09:53:03" loc="start=0 end=208 startpage=6 endpage=6">
                    <content size="208">
                        <p>To determine the time for merge sort, it is helpful to visualize the calls made to mergeAux as shown below (each node represents one call, and is labeled with the size of the array to be sorted by that call):</p>
                    </content>
                </q>
                <q name="The height of this tree is O(log N). The total work done at each &quot;level&quot; of the tree (i.e., the work&#8230;" id="q7_23_258" au="dyg" cDate="2017-08-02T09:55:38" mDate="2017-08-02T09:55:38" loc="start=209 end=366 startpage=6 endpage=6">
                    <content size="157">
                        <p>The height of this tree is O(log N). The total work done at each "level" of the tree (i.e., the work done by mergeAux excluding the recursive calls) is O(N):</p>
                    </content>
                </q>
                <q name="Step 1 (finding the middle index) is O(1), and this step is performed once in each call; i.e., a tot&#8230;" id="q7_24_259" au="dyg" cDate="2017-08-02T09:55:53" mDate="2017-08-02T09:56:23" loc="start=367 end=1237 startpage=6 endpage=6">
                    <content size="870">
                        <p>Step 1 (finding the middle index) is O(1), and this step is performed once in each call; i.e., a total of once at the top level, twice at the second level, etc, down to a total of N/2 times at the second-to-last level (it is not performed at all at the very last level, because there the base case applies, and mergeAux just returns). So for any one level, the total amount of work for Step 1 is at most O(N).</p>
                        <p>For each individual call, Step 4 (merging the sorted half-graphs) takes time proportional to the size of the part of the array to be sorted by that call. So for a whole level, the time is proportional to the sum of the sizes at that level. This sum is always N.</p>
                        <p>Therefore, the time for merge sort involves O(N) work done at each "level" of the tree that represents the recursive calls. Since there are O(log N) levels, the total worst-case time is O(N log N).</p>
                    </content>
                </q>
                <q name="What happens when the array is already sorted (what is the running time for merge sort in that case)&#8230;" id="q7_25_260" au="dyg" cDate="2017-08-02T09:56:45" mDate="2017-08-02T09:56:45" loc="start=1254 end=1355 startpage=6 endpage=6">
                    <content size="101">
                        <p>What happens when the array is already sorted (what is the running time for merge sort in that case)?</p>
                    </content>
                </q>
                <q name="Introduction" id="q7_26_261" au="dyg" cDate="2017-08-20T10:46:53" mDate="2017-08-20T10:46:53" loc="start=215 end=227 startpage=0 endpage=0">
                    <content size="12">
                        <p>Introduction</p>
                    </content>
                </q>
                <q name="case time O(N2)." id="q7_27_262" au="dyg" cDate="2017-08-20T10:50:53" mDate="2017-08-20T10:50:53" loc="start=957 end=973 startpage=0 endpage=0">
                    <content size="16">
                        <p>case time O(N2).</p>
                    </content>
                </q>
                <q name="Quick" id="q7_28_263" au="dyg" cDate="2017-08-20T10:51:33" mDate="2017-08-20T10:51:33" loc="start=974 end=979 startpage=0 endpage=0">
                    <content size="5">
                        <p>Quick</p>
                    </content>
                </q>
                <q name="sort" id="q7_29_264" au="dyg" cDate="2017-08-20T10:51:42" mDate="2017-08-20T10:51:42" loc="start=980 end=984 startpage=0 endpage=0">
                    <content size="4">
                        <p>sort</p>
                    </content>
                </q>
                <q name="O(N2) in the worst case, but its expected time is O(N log N)" id="q7_30_265" au="dyg" cDate="2017-08-20T10:52:08" mDate="2017-08-20T10:52:08" loc="start=993 end=1053 startpage=0 endpage=0">
                    <content size="60">
                        <p>O(N2) in the worst case, but its expected time is O(N log N)</p>
                    </content>
                </q>
                <q name="Merge" id="q7_31_266" au="dyg" cDate="2017-08-20T10:52:43" mDate="2017-08-20T10:52:43" loc="start=1055 end=1060 startpage=0 endpage=0">
                    <content size="5">
                        <p>Merge</p>
                    </content>
                </q>
                <q name="sort" id="q7_32_267" au="dyg" cDate="2017-08-20T10:52:49" mDate="2017-08-20T10:52:49" loc="start=1061 end=1065 startpage=0 endpage=0">
                    <content size="4">
                        <p>sort</p>
                    </content>
                </q>
                <q name="O(N log N) in the worst case." id="q7_33_268" au="dyg" cDate="2017-08-20T10:53:12" mDate="2017-08-20T10:53:12" loc="start=1069 end=1099 startpage=0 endpage=0">
                    <content size="30">
                        <p>O(N log N) in the worst case.</p>
                    </content>
                </q>
                <q name="Algorithms" id="q7_34_269" au="dyg" cDate="2017-08-20T11:02:47" mDate="2017-08-20T11:02:47" loc="start=1623 end=1633 startpage=5 endpage=5">
                    <content size="10">
                        <p>Algorithms</p>
                    </content>
                </q>
                <q name="like" id="q7_35_270" au="dyg" cDate="2017-08-20T11:02:54" mDate="2017-08-20T11:02:54" loc="start=1634 end=1638 startpage=5 endpage=5">
                    <content size="4">
                        <p>like</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="AVT03.pdf" id="pd_8_7" loc="doc_7" au="dyg" cDate="2017-08-03T10:25:56" mDate="2017-08-24T11:14:22" qIndex="">
            <quotations size="37">
                <q name="Lecture 6: Balanced Binary Search Trees" id="q8_1_271" au="dyg" cDate="2017-08-03T10:28:14" mDate="2017-08-03T10:28:14" loc="start=55 end=94 startpage=0 endpage=0">
                    <content size="39">
                        <p>Lecture 6: Balanced Binary Search Trees</p>
                    </content>
                </q>
                <q name="Lecture Overview" id="q8_2_272" au="dyg" cDate="2017-08-03T10:28:26" mDate="2017-08-03T10:28:26" loc="start=95 end=111 startpage=0 endpage=0">
                    <content size="16">
                        <p>Lecture Overview</p>
                    </content>
                </q>
                <q name="Recall: Binary Search Trees (BSTs)" id="q8_3_273" au="dyg" cDate="2017-08-03T10:28:51" mDate="2017-08-03T10:28:51" loc="start=272 end=306 startpage=0 endpage=0">
                    <content size="34">
                        <p>Recall: Binary Search Trees (BSTs)</p>
                    </content>
                </q>
                <q name="&#8226; rooted binary tree &#8226; each node has" id="q8_4_274" au="dyg" cDate="2017-08-03T10:36:29" mDate="2017-08-19T15:13:21" loc="start=307 end=343 startpage=0 endpage=0">
                    <content size="36">
                        <p>&#8226; rooted binary tree</p>
                        <p>&#8226; each node has</p>
                    </content>
                </q>
                <q name="&#8211; key &#8211; left pointer &#8211; right pointer &#8211; parent pointer" id="q8_5_275" au="dyg" cDate="2017-08-03T10:36:36" mDate="2017-08-03T10:36:36" loc="start=344 end=398 startpage=0 endpage=0">
                    <content size="54">
                        <p>&#8211; key</p>
                        <p>&#8211; left pointer</p>
                        <p>&#8211; right pointer &#8211; parent pointer</p>
                    </content>
                </q>
                <q name="See Fig." id="q8_6_276" au="dyg" cDate="2017-08-03T10:36:45" mDate="2017-08-03T10:36:45" loc="start=398 end=406 startpage=0 endpage=0">
                    <content size="8">
                        <p>See Fig.</p>
                    </content>
                </q>
                <q name="&#8226; BST property (see Fig." id="q8_7_277" au="dyg" cDate="2017-08-03T10:37:33" mDate="2017-08-03T10:37:33" loc="start=86 end=110 startpage=1 endpage=1">
                    <content size="24">
                        <p>&#8226; BST property (see Fig.</p>
                    </content>
                </q>
                <q name="&#8226; height of node = length (# edges) of longest downward path to a leaf (see CLRS B.5" id="q8_8_278" au="dyg" cDate="2017-08-03T10:37:39" mDate="2017-08-03T10:37:39" loc="start=115 end=199 startpage=1 endpage=1">
                    <content size="84">
                        <p>&#8226; height of node = length (# edges) of longest downward path to a leaf (see CLRS B.5</p>
                    </content>
                </q>
                <q name="&#8226; BSTs support insert, delete, min, max, next-larger, next-smaller, etc. in O(h) time, where h = hei&#8230;" id="q8_9_279" au="dyg" cDate="2017-08-03T10:41:50" mDate="2017-08-03T10:41:50" loc="start=248 end=379 startpage=1 endpage=1">
                    <content size="131">
                        <p>&#8226; BSTs support insert, delete, min, max, next-larger, next-smaller, etc. in O(h) time, where h = height of tree (= height of root).</p>
                    </content>
                </q>
                <q name="&#8226; h is between lgn and n: Fig." id="q8_10_280" au="dyg" cDate="2017-08-03T10:42:12" mDate="2017-08-03T10:42:12" loc="start=380 end=410 startpage=1 endpage=1">
                    <content size="30">
                        <p>&#8226; h is between lgn and n: Fig.</p>
                    </content>
                </q>
                <q name="&#8226; balanced BST maintains h = O(lg n) &#8658; all operations run in O(lg n) time." id="q8_11_281" au="dyg" cDate="2017-08-03T10:45:30" mDate="2017-08-03T10:45:30" loc="start=463 end=537 startpage=1 endpage=1">
                    <content size="74">
                        <p>&#8226; balanced BST maintains h = O(lg n) &#8658; all operations run in O(lg n) time.</p>
                    </content>
                </q>
                <q name="For every node, require heights of left &amp; right children to differ by at most &#177;1." id="q8_13_282" au="dyg" cDate="2017-08-03T10:49:26" mDate="2017-08-03T10:51:28" loc="start=98 end=180 startpage=2 endpage=2">
                    <content size="82">
                        <p>For every node, require heights of left &amp; right children to differ by at most &#177;1.</p>
                    </content>
                </q>
                <q name="&#8226; treat nil tree as height -1 &#8226; each node stores its height (DATA STRUCTURE AUGMENTATION) (like subt&#8230;" id="q8_14_283" au="dyg" cDate="2017-08-03T10:51:45" mDate="2017-08-03T10:51:45" loc="start=180 end=344 startpage=2 endpage=2">
                    <content size="164">
                        <p>&#8226; treat nil tree as height -1</p>
                        <p>&#8226; each node stores its height (DATA STRUCTURE AUGMENTATION) (like subtree</p>
                        <p>size) (alternatively, can just store difference in heights) </p>
                    </content>
                </q>
                <q name="Fig" id="q8_15_284" au="dyg" cDate="2017-08-03T10:52:03" mDate="2017-08-03T10:52:03" loc="start=367 end=370 startpage=2 endpage=2">
                    <content size="3">
                        <p>Fig</p>
                    </content>
                </q>
                <q name="Balance:" id="q8_16_285" au="dyg" cDate="2017-08-03T10:52:42" mDate="2017-08-03T10:52:42" loc="start=374 end=382 startpage=2 endpage=2">
                    <content size="8">
                        <p>Balance:</p>
                    </content>
                </q>
                <q name="Worst when every node differs by 1 &#8212; let Nh = (min.) # nodes in height-h AVL tree =&#8658;Nh =Nh&#8722;1+Nh&#8722;2+1" id="q8_17_286" au="dyg" cDate="2017-08-03T10:58:10" mDate="2017-08-03T10:58:10" loc="start=416 end=515 startpage=2 endpage=2">
                    <content size="99">
                        <p>Worst when every node differs by 1 &#8212; let Nh = (min.) # nodes in height-h AVL tree =&#8658;Nh =Nh&#8722;1+Nh&#8722;2+1</p>
                    </content>
                </q>
                <q name="Alternatively:" id="q8_18_287" au="dyg" cDate="2017-08-03T11:01:40" mDate="2017-08-03T11:01:40" loc="start=516 end=531 startpage=2 endpage=2">
                    <content size="15">
                        <p>Alternatively:</p>
                    </content>
                </q>
                <q name="AVL Insert:" id="q8_19_288" au="dyg" cDate="2017-08-03T11:09:48" mDate="2017-08-03T11:09:48" loc="start=55 end=66 startpage=3 endpage=3">
                    <content size="11">
                        <p>AVL Insert:</p>
                    </content>
                </q>
                <q name="1. insert as in simple BST 2. work your way up tree, restoring AVL property (and updating heights a" id="q8_20_289" au="dyg" cDate="2017-08-03T11:10:18" mDate="2017-08-03T11:10:18" loc="start=67 end=166 startpage=3 endpage=3">
                    <content size="99">
                        <p>1. insert as in simple BST</p>
                        <p>2. work your way up tree, restoring AVL property (and updating heights a</p>
                    </content>
                </q>
                <q name="&#8226; suppose x is lowest node violating AVL &#8226; assume x is right-heavy (left case symmetric) &#8226; if x&#8217;s ri&#8230;" id="q8_21_290" au="dyg" cDate="2017-08-03T11:11:40" mDate="2017-08-03T11:11:44" loc="start=188 end=327 startpage=3 endpage=3">
                    <content size="139">
                        <p>&#8226; suppose x is lowest node violating AVL</p>
                        <p>&#8226; assume x is right-heavy (left case symmetric)</p>
                        <p>&#8226; if x&#8217;s right child is right-heavy or balanced: f</p>
                    </content>
                </q>
                <q name="follow steps in Fig. 5" id="q8_22_291" au="dyg" cDate="2017-08-03T11:11:56" mDate="2017-08-03T11:11:56" loc="start=326 end=349 startpage=3 endpage=3">
                    <content size="23">
                        <p>follow steps in Fig. 5</p>
                    </content>
                </q>
                <q name="steps in Fig. 6" id="q8_23_292" au="dyg" cDate="2017-08-03T11:12:29" mDate="2017-08-03T11:12:29" loc="start=508 end=524 startpage=3 endpage=3">
                    <content size="16">
                        <p>steps in Fig. 6</p>
                    </content>
                </q>
                <q name="&#8226; then continue up to x&#8217;s grandparent, greatgrandparent . . ." id="q8_24_293" au="dyg" cDate="2017-08-03T11:12:37" mDate="2017-08-03T11:12:37" loc="start=661 end=722 startpage=3 endpage=3">
                    <content size="61">
                        <p>&#8226; then continue up to x&#8217;s grandparent, greatgrandparent . . .</p>
                    </content>
                </q>
                <q name="Example: An example implementation of the AVL Insert process is illustrated in Fig." id="q8_25_294" au="dyg" cDate="2017-08-03T11:13:03" mDate="2017-08-03T11:13:03" loc="start=55 end=138 startpage=4 endpage=4">
                    <content size="83">
                        <p>Example: An example implementation of the AVL Insert process is illustrated in Fig.</p>
                    </content>
                </q>
                <q name="In general, process may need several rotations before done with an Insert." id="q8_26_295" au="dyg" cDate="2017-08-03T11:13:44" mDate="2017-08-03T11:13:44" loc="start=375 end=449 startpage=4 endpage=4">
                    <content size="74">
                        <p>In general, process may need several rotations before done with an Insert.</p>
                    </content>
                </q>
                <q name="Delete(-min) is similar &#8212; harder but possible." id="q8_27_296" au="dyg" cDate="2017-08-03T11:14:11" mDate="2017-08-03T11:14:11" loc="start=461 end=507 startpage=4 endpage=4">
                    <content size="46">
                        <p>Delete(-min) is similar &#8212; harder but possible.</p>
                    </content>
                </q>
                <q name="AVL sort:" id="q8_28_297" au="dyg" cDate="2017-08-03T11:14:39" mDate="2017-08-03T11:14:39" loc="start=55 end=64 startpage=5 endpage=5">
                    <content size="9">
                        <p>AVL sort:</p>
                    </content>
                </q>
                <q name="&#8226; insert each item into AVL tree &#8226; in-order traversal" id="q8_29_298" au="dyg" cDate="2017-08-03T11:14:55" mDate="2017-08-03T11:14:55" loc="start=65 end=118 startpage=5 endpage=5">
                    <content size="53">
                        <p>&#8226; insert each item into AVL tree &#8226; in-order traversal</p>
                    </content>
                </q>
                <q name="Balanced Search Trees:" id="q8_30_299" au="dyg" cDate="2017-08-03T11:17:19" mDate="2017-08-03T11:17:19" loc="start=119 end=141 startpage=5 endpage=5">
                    <content size="22">
                        <p>Balanced Search Trees:</p>
                    </content>
                </q>
                <q name="There are many balanced search trees." id="q8_31_300" au="dyg" cDate="2017-08-03T11:23:58" mDate="2017-08-03T11:23:58" loc="start=142 end=179 startpage=5 endpage=5">
                    <content size="37">
                        <p>There are many balanced search trees.</p>
                    </content>
                </q>
                <q name="Adel&#8217;son-Velsii and Landis 1962 Bayer and McCreight 1972 (see CLRS 18) Nievergelt and Reingold 1973&#8230;" id="q8_32_301" au="dyg" cDate="2017-08-03T11:24:52" mDate="2017-08-03T11:24:52" loc="start=333 end=531 startpage=5 endpage=5">
                    <content size="198">
                        <p>Adel&#8217;son-Velsii and Landis 1962</p>
                        <p>Bayer and McCreight 1972 (see CLRS 18) Nievergelt and Reingold 1973</p>
                        <p>CLRS Chapter 13</p>
                        <p>Sleator and Tarjan 1985</p>
                        <p>Pugh 1989</p>
                        <p>Galperin and Rivest 1993</p>
                        <p>Seidel and Aragon 1996</p>
                    </content>
                </q>
                <q name="Big Picture:" id="q8_33_302" au="dyg" cDate="2017-08-03T11:27:27" mDate="2017-08-03T11:27:27" loc="start=803 end=815 startpage=5 endpage=5">
                    <content size="12">
                        <p>Big Picture:</p>
                    </content>
                </q>
                <q name="Abstract Data Type(ADT): interface spec. vs." id="q8_34_303" au="dyg" cDate="2017-08-03T11:27:50" mDate="2017-08-03T11:27:50" loc="start=816 end=860 startpage=5 endpage=5">
                    <content size="44">
                        <p>Abstract Data Type(ADT): interface spec. vs.</p>
                    </content>
                </q>
                <q name="Data Structure (DS): algorithm for each op." id="q8_35_304" au="dyg" cDate="2017-08-03T11:28:08" mDate="2017-08-03T11:28:08" loc="start=861 end=904 startpage=5 endpage=5">
                    <content size="43">
                        <p>Data Structure (DS): algorithm for each op.</p>
                    </content>
                </q>
                <q name="Priority Queue ADT Q = new-empty-queue() Q.insert(x) x = Q.deletemin() x = Q.findmin() heap &#920;(1) &#920;(l&#8230;" id="q8_36_305" au="dyg" cDate="2017-08-03T11:32:07" mDate="2017-08-03T11:32:07" loc="start=1034 end=1197 startpage=5 endpage=5">
                    <content size="163">
                        <p>Priority Queue ADT</p>
                        <p>Q = new-empty-queue() Q.insert(x)</p>
                        <p>x = Q.deletemin()</p>
                        <p>x = Q.findmin()</p>
                        <p>heap</p>
                        <p>&#920;(1) &#920;(lg n) &#920;(lg n) &#920;(1)</p>
                        <p>AVL tree</p>
                        <p>&#920;(1)</p>
                        <p>&#920;(lg n) &#920;(lg n) &#920;(lg n) &#8594; &#920;(1)</p>
                    </content>
                </q>
                <q name="Predecessor/Successor ADT S = new-empty() S.insert(x) S.delete(x) y = S.predecessor(x) &#8594; next- &#920;(n)&#8230;" id="q8_37_306" au="dyg" cDate="2017-08-03T11:33:25" mDate="2017-08-03T11:33:25" loc="start=55 end=272 startpage=6 endpage=6">
                    <content size="217">
                        <p>Predecessor/Successor ADT</p>
                        <p>S = new-empty()</p>
                        <p>S.insert(x)</p>
                        <p>S.delete(x)</p>
                        <p>y = S.predecessor(x) &#8594; next- &#920;(n) &#920;(lgn) smaller</p>
                        <p>y = S.successor(x) &#8594; next-larger &#920;(n) &#920;(lg n)</p>
                        <p>heap</p>
                        <p>AVL tree</p>
                        <p>&#920;(1) &#920;(lg n) &#920;(lg n)</p>
                        <p>&#920;(1) &#920;(lg n) &#920;(lg n)</p>
                    </content>
                </q>
                <q name="There are many possible DSs for one ADT." id="q8_38_307" au="dyg" cDate="2017-08-19T15:20:07" mDate="2017-08-19T15:20:07" loc="start=905 end=945 startpage=5 endpage=5">
                    <content size="40">
                        <p>There are many possible DSs for one ADT.</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="DJK05.pdf" id="pd_9_8" loc="doc_8" au="dyg" cDate="2017-08-04T09:27:46" mDate="2017-08-24T11:13:55" qIndex="">
            <quotations size="20">
                <q name="Dijkstra&#8217;s Algorithm for SSSP" id="q9_1_308" au="dyg" cDate="2017-08-04T09:32:34" mDate="2017-08-04T09:32:34" loc="start=357 end=386 startpage=0 endpage=0">
                    <content size="29">
                        <p>Dijkstra&#8217;s Algorithm for SSSP</p>
                    </content>
                </q>
                <q name="The crux of Dijkstra&#8217;s algorithm is the following lemma, which suggests prioritiy values to use and&#8230;" id="q9_2_309" au="dyg" cDate="2017-08-04T09:33:38" mDate="2017-08-04T09:33:38" loc="start=387 end=568 startpage=0 endpage=0">
                    <content size="181">
                        <p>The crux of Dijkstra&#8217;s algorithm is the following lemma, which suggests prioritiy values to use and guarantees that such a priority setting will lead to the weighted shortest paths.</p>
                    </content>
                </q>
                <q name="Lemma 1.1. Consider a (directed) weighted graph G = (V, E), w : E &#8594;  + &#8746; {0} with no negative edge w&#8230;" id="q9_3_310" au="dyg" cDate="2017-08-04T09:37:55" mDate="2017-08-04T09:37:55" loc="start=569 end=1123 startpage=0 endpage=0">
                    <content size="554">
                        <p>Lemma 1.1. Consider a (directed) weighted graph G = (V, E), w : E &#8594;  + &#8746; {0} with no negative edge weights, a source vertex s and an arbitrary distance value d &#8712;  + &#8746; {0}. Let X = X &#8242; &#8746; X &#8242;&#8242; , where X&#8242;={v&#8712;V :&#948;(s,v)&lt;d}bethesetofverticesthatarelessthandfroms,X&#8242;&#8242; &#8838;{v&#8712;V :&#948;(s,v)=d} be the set of vertices that are exactly d from s. Also, let d&#8242; = min{&#948;(s,u) : u &#8712; V \ X} be the nearest distance greater than or equal to d. Then, if V \ X &#824;=  , there must exist a vertex u such that &#948;(s, u) = d&#8242; and a shortest path to u that only goes through vertices in X .</p>
                    </content>
                </q>
                <q name="Proof. Let Y = {v &#8712; V : &#948;(s, v) = d&#8242;} be all vertices at distance exactly d&#8242;. Note that the set Y is&#8230;" id="q9_4_311" au="dyg" cDate="2017-08-04T09:39:39" mDate="2017-08-04T09:39:39" loc="start=1124 end=1275 startpage=0 endpage=0">
                    <content size="151">
                        <p>Proof. Let Y = {v &#8712; V : &#948;(s, v) = d&#8242;} be all vertices at distance exactly d&#8242;. Note that the set Y is nonempty by definition of d&#8242; and since V \ X &#824;=  .</p>
                    </content>
                </q>
                <q name="Quotation 9:5" id="q9_5_312" au="dyg" cDate="2017-08-04T09:39:56" mDate="2017-08-04T09:39:56" loc="x=229 y=237 width=155 height=126 page=0"/>
                <q name="Pick any y &#8712; Y . We&#8217;ll assume for a contradiction that that all shortest paths to y go through some&#8230;" id="q9_6_313" au="dyg" cDate="2017-08-04T09:41:07" mDate="2017-08-04T09:41:07" loc="start=1287 end=1861 startpage=0 endpage=0">
                    <content size="574">
                        <p>Pick any y &#8712; Y . We&#8217;ll assume for a contradiction that that all shortest paths to y go through some vertexinZ=V\(X&#8746;Y)(i.e.,outsideofbothX andY). Butforallz&#8712;Z,d(s,z)&gt;d&#8242;. Thus,it must be the case that d(s, y) &#8805; d(s,z) &gt; d&#8242; because all edge weights are non-negative. This is a contradiction. Therefore, there exists a shortest path from s to y that uses only the vertices in X &#8746; Y . Since s &#8712; X and the path ends at y &#8712; Y , it must contain an edge v &#8712; X and u &#8712; Y . The first such edge has the property that a shortest path to u only uses X &#8217;s vertices, which proves the lemma.</p>
                    </content>
                </q>
                <q name="This suggests an algorithm that by knowing X, derives d&#8242; and one such vertex u." id="q9_7_314" au="dyg" cDate="2017-08-04T09:47:11" mDate="2017-08-04T09:47:11" loc="start=1862 end=1941 startpage=0 endpage=0">
                    <content size="79">
                        <p>This suggests an algorithm that by knowing X, derives d&#8242; and one such vertex u.</p>
                    </content>
                </q>
                <q name="Indeed, X is the set of explored vertices, and we can derive d&#8242; and a vertex u attaining it by compu&#8230;" id="q9_8_315" au="dyg" cDate="2017-08-04T09:47:23" mDate="2017-08-04T09:47:23" loc="start=1942 end=201 startpage=0 endpage=1">
                    <content size="400">
                        <p>Indeed, X is the set of explored vertices, and we can derive d&#8242; and a vertex u attaining it by computing</p>
                        <p>&#8224;Lecture notes by Guy E Blelloch, Margaret Reid-Miller, and Kanat Tangwongsan.</p>
                        <p>1 Version 1.0</p>
                        <p>Parallel and Sequential Data Structures and Algorithms &#8212; Lecture 11 15-210 (Spring 2012)</p>
                        <p>min{d(s, x) + w(xu) : x &#8712; X,u &#8712; NG(x)}. Notice that the vertices we&#8217;re taking the minimum over is simply NG(X). </p>
                    </content>
                </q>
                <q name="In the pseudocode shown below Dijkstra&#8217;s algorithm basically operates on three data structures: (1)&#8230;" id="q9_9_316" au="dyg" cDate="2017-08-04T09:49:52" mDate="2017-08-04T09:51:38" loc="start=201 end=621 startpage=1 endpage=1">
                    <content size="420">
                        <p>In the pseudocode shown below Dijkstra&#8217;s algorithm basically operates on three data structures: (1) a structure for the graph itself, (2) a dictionary to maintain the shortest path distance to each vertex that has already been visited, and (3) a priority queue to hold the upper bound distances of vertices that are neighbors of the visited vertices. The priority queue makes finding the minimum distance in NG(X) fast.</p>
                    </content>
                </q>
                <q name="This version of Dijkstra&#8217;s algorithm differes somewhat from another version that is sometimes used." id="q9_10_317" au="dyg" cDate="2017-08-04T09:52:36" mDate="2017-08-04T09:52:36" loc="start=621 end=720 startpage=1 endpage=1">
                    <content size="99">
                        <p>This version of Dijkstra&#8217;s algorithm differes somewhat from another version that is sometimes used.</p>
                    </content>
                </q>
                <q name="First, the relax function is often implemented as a decreaseKey operation." id="q9_11_318" au="dyg" cDate="2017-08-04T09:54:03" mDate="2017-08-04T09:54:03" loc="start=721 end=795 startpage=1 endpage=1">
                    <content size="74">
                        <p>First, the relax function is often implemented as a decreaseKey operation.</p>
                    </content>
                </q>
                <q name="In our algorithm, we simply add in a new value in the priority queue. Although this causes the prior&#8230;" id="q9_12_319" au="dyg" cDate="2017-08-04T09:54:51" mDate="2017-08-04T09:54:51" loc="start=796 end=1102 startpage=1 endpage=1">
                    <content size="306">
                        <p>In our algorithm, we simply add in a new value in the priority queue. Although this causes the priority queue to contain more entries, it doesn&#8217;t affect the asympotic complexity and obviates the need to have the decreaseKey operation, which can be tricky to support in many priority queue implementations.</p>
                    </content>
                </q>
                <q name="Second, since we keep multiple distances for a vertex, we have to make sure that only the shortest-p&#8230;" id="q9_13_320" au="dyg" cDate="2017-08-04T10:22:26" mDate="2017-08-04T10:22:26" loc="start=1102 end=1602 startpage=1 endpage=1">
                    <content size="500">
                        <p>Second, since we keep multiple distances for a vertex, we have to make sure that only the shortest-path distance is registered in our answer. We can show inductively through the lemma we proved already that the first time we see a vertex v (i.e., when deleteMin returns that vertex) gives the shortest path to v. Therefore, all subsequence occurences of this particular vertex can be ignored. This is easy to support because we keep the shortest-path distances in a dictionary which has fast lookup.</p>
                    </content>
                </q>
                <q name="fun dijkstra(G,s)= let" id="q9_14_321" au="dyg" cDate="2017-08-04T10:23:29" mDate="2017-08-04T10:23:29" loc="start=1638 end=1660 startpage=1 endpage=1">
                    <content size="22">
                        <p>fun dijkstra(G,s)= let</p>
                    </content>
                </q>
                <q name="The PQ.insert in Line 14 is called only once, so we can ignore it. Of the remaining operations, Line&#8230;" id="q9_15_322" au="dyg" cDate="2017-08-04T10:24:46" mDate="2017-08-04T10:25:50" loc="start=1947 end=2546 startpage=1 endpage=1">
                    <content size="599">
                        <p>The PQ.insert in Line 14 is called only once, so we can ignore it. Of the remaining operations, Lines 10 and 11 are on the graph, Lines 7 and 12 are on the table of visited vertices, and Lines 4 and 9 are on the priority queue. For the priority queue operations, we have only discussed one cost model, which for a queue of size n requires O(log n) for each of PQ.insert and PQ.deleteMin. We have no need for a meld operation here. For the graph, we can either use a tree-based table or an array to access the neighbors1 There is no need for single threaded array since we are not updating the graph.</p>
                    </content>
                </q>
                <q name="For the table of distances to visited vertices we can use a tree table, an array sequence, or a sing&#8230;" id="q9_16_323" au="dyg" cDate="2017-08-04T10:33:48" mDate="2017-08-04T10:33:48" loc="start=2547 end=2675 startpage=1 endpage=1">
                    <content size="128">
                        <p>For the table of distances to visited vertices we can use a tree table, an array sequence, or a single threaded array sequences.</p>
                    </content>
                </q>
                <q name="The following table summarizes the costs of the operations, along 1We could also use a hash table, b&#8230;" id="q9_17_324" au="dyg" cDate="2017-08-04T10:37:09" mDate="2017-08-04T10:37:09" loc="start=2676 end=137 startpage=1 endpage=2">
                    <content size="287">
                        <p>The following table summarizes the costs of the operations, along</p>
                        <p>1We could also use a hash table, but we have not yet discussed them.</p>
                        <p>2 Version 1.0</p>
                        <p>Parallel and Sequential Data Structures and Algorithms &#8212; Lecture 11 15-210 (Spring 2012) with the number of calls made to each operation.</p>
                    </content>
                </q>
                <q name="need to consider the sequential execution of the calls." id="q9_18_325" au="dyg" cDate="2017-08-04T10:41:20" mDate="2017-08-04T10:41:20" loc="start=190 end=245 startpage=2 endpage=2">
                    <content size="55">
                        <p>need to consider the sequential execution of the calls.</p>
                    </content>
                </q>
                <q name="We can calculate the total number of calls to each operation by noting that the body of the let star&#8230;" id="q9_19_326" au="dyg" cDate="2017-08-04T10:43:50" mDate="2017-08-04T10:44:21" loc="start=606 end=1467 startpage=2 endpage=2">
                    <content size="861">
                        <p>We can calculate the total number of calls to each operation by noting that the body of the let starting on Line 8 is only run once for each vertex. This means that Lines 10 and 12 are only called O(n) times. Everything else is done once for every edge.</p>
                        <p>Based on the table one should note that when using either tree tables or single threaded arrays the cost is no more than the cost of the priority queue operations. Therefore there is no asymptotic advantage of using one over the other, although there might be a constant factor speedup that is not insignificant. One should also note that using regular purely functional arrays is not a good idea since then the cost is dominated by the insertions and the algorithm runs in &#920;(n2) work.</p>
                        <p>The total work for Dijkstra&#8217;s algorithm using a tree table O(m log m + m log n + m + n log n) = O(m log n) since m &#8804; n2.</p>
                    </content>
                    <comment type="text/html" size="128">
                        <p>The &lt;- pops out of the complexity sub scoping. Then Algorithm dominates the Constituent scoping, then -&gt; subscopes to complexity</p>
                    </comment>
                </q>
                <q name="dijkstra" id="q9_20_327" au="dyg" cDate="2017-08-20T10:38:08" mDate="2017-08-20T10:38:08" loc="start=1642 end=1650 startpage=1 endpage=1">
                    <content size="8">
                        <p>dijkstra</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="MS04.pdf" id="pd_10_9" loc="doc_9" au="dyg" cDate="2017-08-07T13:58:42" mDate="2017-08-24T11:13:44" qIndex="">
            <quotations size="44">
                <q name="Contents:" id="q10_1_328" au="dyg" cDate="2017-08-07T14:01:13" mDate="2017-08-07T14:01:13" loc="start=28 end=37 startpage=0 endpage=0">
                    <content size="9">
                        <p>Contents:</p>
                    </content>
                </q>
                <q name="Our next algorithm actually achieves the optimal big-O behavior for a sorting algorithm. The merge s&#8230;" id="q10_2_329" au="dyg" cDate="2017-08-07T14:01:26" mDate="2017-08-07T14:01:41" loc="start=211 end=361 startpage=0 endpage=0">
                    <content size="150">
                        <p>Our next algorithm actually achieves the optimal big-O behavior for a sorting algorithm. The merge sort has time for both its worst and average case.</p>
                    </content>
                </q>
                <q name="This doesn&#8217;t necessarily make it the ideal choice, however, in all sorting applications. The constan&#8230;" id="q10_3_330" au="dyg" cDate="2017-08-07T14:02:57" mDate="2017-08-07T14:02:57" loc="start=361 end=569 startpage=0 endpage=0">
                    <content size="208">
                        <p>This doesn&#8217;t necessarily make it the ideal choice, however, in all sorting applications. The constant multiplier on the timing is somewhat high, and merge sort may require an unusually high amount of memory.</p>
                    </content>
                </q>
                <q name="Variants of the basic merge sort algorithm are, however, often used with linked lists (which can&#8217;t b&#8230;" id="q10_4_331" au="dyg" cDate="2017-08-07T14:04:09" mDate="2017-08-07T14:04:09" loc="start=569 end=763 startpage=0 endpage=0">
                    <content size="194">
                        <p>Variants of the basic merge sort algorithm are, however, often used with linked lists (which can&#8217;t be sorted by most other algorithms and are used to sort data residing on disk or magnetic tape.</p>
                    </content>
                </q>
                <q name="Before tackling the merge sort itself, we start with a simpler function that is used by merge sort." id="q10_5_332" au="dyg" cDate="2017-08-07T14:04:23" mDate="2017-08-07T14:04:23" loc="start=787 end=886 startpage=0 endpage=0">
                    <content size="99">
                        <p>Before tackling the merge sort itself, we start with a simpler function that is used by merge sort.</p>
                    </content>
                </q>
                <q name="Suppose that our sequence of data can be divided into two parts, such that a[first..mid-1] is alread&#8230;" id="q10_6_333" au="dyg" cDate="2017-08-07T14:04:38" mDate="2017-08-07T14:04:38" loc="start=887 end=1127 startpage=0 endpage=0">
                    <content size="240">
                        <p>Suppose that our sequence of data can be divided into two parts, such that a[first..mid-1] is already sorted and a[mid..last-1] is already sorted. Then we could merge the two parts into a combined sorted sequence using the code shown here.</p>
                    </content>
                </q>
                <q name="template &lt;typename T&gt;" id="q10_7_334" au="dyg" cDate="2017-08-07T14:04:51" mDate="2017-08-07T14:04:51" loc="start=1128 end=1149 startpage=0 endpage=0">
                    <content size="21">
                        <p>template &lt;typename T&gt;</p>
                    </content>
                </q>
                <q name="The heart of the merge algorithm is the first loop (\co1). The variables first, mid, and last mark o&#8230;" id="q10_8_335" au="dyg" cDate="2017-08-07T14:08:15" mDate="2017-08-07T14:08:15" loc="start=660 end=1963 startpage=1 endpage=1">
                    <content size="1303">
                        <p>The heart of the merge algorithm is the first loop (\co1).</p>
                        <p>The variables first, mid, and last mark off two subsequences that we want to merge. We can think of a[first ... mid-1] and a[mid ... last-1] as two separate, sorted sequences. We want to combine them into a single sorted sequence, tempVector.</p>
                        <p>The way to do this is quite simple. Just compare the first element in each of the two input (sub)sequences and copy the smaller one.</p>
                        <p>For example, if we were merging subsequences [ 2 \; 4 \; 5 \; 6 ] and [ 1 \; 3] we would compare the first element in each one (2 and 1) and decide to copy 1.</p>
                        <p>Then we continue with the remainder, merging [ 2 \; 4 \; 5 \; 6] and [ 3 ]</p>
                        <p>On the next step we would copy 2, and be left with the merge of [ 4 \; 5 \; 6 ] and [ 3 ]</p>
                        <p>We would then copy 3.</p>
                        <p>At this point, our temporary vector contains [ 1 \; 2 \; 3] We would now exit from this main loop, because one of the arrays has been completely emptied out.</p>
                        <p>The rest of the algorithm is &#8220;cleanup&#8221;. We exit the main loop when we have emptied one of the two subsequences, so there is a possibility that the other subsequence still has data. The next two loops (\co2) copy that data from the remainder of the two subsequences. (Because one of those subsequences has been emptied, one of these loops will execute zero times.)</p>
                    </content>
                </q>
                <q name="1.2 Merge Analysis" id="q10_9_336" au="dyg" cDate="2017-08-07T14:08:50" mDate="2017-08-07T14:08:50" loc="start=196 end=214 startpage=2 endpage=2">
                    <content size="18">
                        <p>1.2 Merge Analysis</p>
                    </content>
                </q>
                <q name="There are several vector push_back calls, which have a worst-case behavior proportional to the size&#8230;" id="q10_10_337" au="dyg" cDate="2017-08-07T14:13:52" mDate="2017-08-07T14:13:52" loc="start=1633 end=1852 startpage=2 endpage=2">
                    <content size="219">
                        <p>There are several vector push_back calls, which have a worst-case behavior proportional to the size of the vector. However, a little time looking at them shows that they are all on tempVector, which is initially empty.</p>
                    </content>
                </q>
                <q name="So this falls into the special case pattern of filling an initially empty vector with repeated push_&#8230;" id="q10_11_338" au="dyg" cDate="2017-08-07T14:14:13" mDate="2017-08-07T14:14:13" loc="start=0 end=152 startpage=3 endpage=3">
                    <content size="152">
                        <p>So this falls into the special case pattern of filling an initially empty vector with repeated push_backs, in which case those pushes will amortize to .</p>
                    </content>
                </q>
                <q name="This means that all the loop bodies amortize to ." id="q10_12_339" au="dyg" cDate="2017-08-07T14:18:47" mDate="2017-08-07T14:18:47" loc="start=153 end=202 startpage=3 endpage=3">
                    <content size="49">
                        <p>This means that all the loop bodies amortize to .</p>
                    </content>
                </q>
                <q name="Looking at the code for the first 3 loops, note that each one adds one element into tempVector. no e&#8230;" id="q10_13_340" au="dyg" cDate="2017-08-07T14:21:20" mDate="2017-08-07T14:34:55" loc="start=203 end=544 startpage=3 endpage=3">
                    <content size="341">
                        <p>Looking at the code for the first 3 loops, note that</p>
                        <p>each one adds one element into tempVector.</p>
                        <p>no element is copied multiple times. If we copy the element at indexA, we also increment indexA, so we will not copy that element again. Similarly, if we copy the element at indexB, we also increment indexB, so we will not copy that element agai</p>
                    </content>
                </q>
                <q name="Since there are a total of last-first elements, each loop can repeat no more than last-first times.&#8230;" id="q10_14_341" au="dyg" cDate="2017-08-07T14:35:50" mDate="2017-08-07T14:35:50" loc="start=547 end=751 startpage=3 endpage=3">
                    <content size="204">
                        <p>Since there are a total of last-first elements, each loop can repeat no more than last-first times. In fact, the sum of the number of iterations of all three loops is last-first.</p>
                        <p>So all three loops are .</p>
                    </content>
                </q>
                <q name="emplate &lt;typename T&gt;" id="q10_15_342" au="dyg" cDate="2017-08-07T14:39:09" mDate="2017-08-20T11:29:39" loc="start=766 end=787 startpage=3 endpage=3">
                    <content size="21">
                        <p>emplate &lt;typename T&gt;</p>
                    </content>
                </q>
                <q name="The last loop clearly repeats once for each element in tempVector. But we have just determined that&#8230;" id="q10_16_343" au="dyg" cDate="2017-08-07T14:40:49" mDate="2017-08-07T14:40:49" loc="start=0 end=162 startpage=4 endpage=4">
                    <content size="162">
                        <p>The last loop clearly repeats once for each element in tempVector. But we have just determined that the total number of elements in tempVector will be last-first.</p>
                    </content>
                </q>
                <q name="merge3.cpp" id="q10_17_344" au="dyg" cDate="2017-08-07T14:41:00" mDate="2017-08-07T14:41:00" loc="start=163 end=173 startpage=4 endpage=4">
                    <content size="10">
                        <p>merge3.cpp</p>
                    </content>
                </q>
                <q name="That leaves only a handful of O(1) statements that will all be dominated by the complexity of the lo&#8230;" id="q10_18_345" au="dyg" cDate="2017-08-07T14:41:17" mDate="2017-08-07T14:41:17" loc="start=819 end=937 startpage=4 endpage=4">
                    <content size="118">
                        <p>That leaves only a handful of O(1) statements that will all be dominated by the complexity of the loops, so merge is .</p>
                    </content>
                </q>
                <q name="sorted sequences!" id="q10_19_346" au="dyg" cDate="2017-08-07T14:43:37" mDate="2017-08-20T11:31:19" loc="start=1140 end=1158 startpage=4 endpage=4">
                    <content size="18">
                        <p>sorted sequences!</p>
                    </content>
                </q>
                <q name="But how do we get the two sorted sequences in the first place?" id="q10_20_347" au="dyg" cDate="2017-08-07T14:43:47" mDate="2017-08-07T14:43:47" loc="start=1047 end=1109 startpage=4 endpage=4">
                    <content size="62">
                        <p>But how do we get the two sorted sequences in the first place?</p>
                    </content>
                </q>
                <q name="By merge&#8217;ing two even" id="q10_21_348" au="dyg" cDate="2017-08-07T14:43:56" mDate="2017-08-20T11:31:12" loc="start=1110 end=1132 startpage=4 endpage=4">
                    <content size="22">
                        <p>By merge&#8217;ing two even </p>
                    </content>
                </q>
                <q name="template &lt;typename T&gt;" id="q10_22_349" au="dyg" cDate="2017-08-07T14:44:28" mDate="2017-08-07T14:44:28" loc="start=1177 end=1198 startpage=4 endpage=4">
                    <content size="21">
                        <p>template &lt;typename T&gt;</p>
                    </content>
                </q>
                <q name="The algorithm shown here is the actual sorting algorithm. It is almost amazingly simple, consisting&#8230;" id="q10_23_350" au="dyg" cDate="2017-08-07T14:44:59" mDate="2017-08-07T14:44:59" loc="start=0 end=274 startpage=5 endpage=5">
                    <content size="274">
                        <p>The algorithm shown here is the actual sorting algorithm. It is almost amazingly simple, consisting simply of two recursive calls to itself, each attempting to sort half the vector, followed by a call to merge to combine the two sorted halves into a single sorted sequence.</p>
                    </content>
                </q>
                <q name="For many people, the very simplicity of this algorithm makes it hard to believe that it can work. I&#8230;" id="q10_24_351" au="dyg" cDate="2017-08-07T14:46:49" mDate="2017-08-07T14:46:49" loc="start=274 end=488 startpage=5 endpage=5">
                    <content size="214">
                        <p>For many people, the very simplicity of this algorithm makes it hard to believe that it can work. I therefore recommend strongly that you run this algorithm until you are comfortable with your understanding of it.</p>
                    </content>
                </q>
                <q name="2.2 MergeSort Analysis" id="q10_25_352" au="dyg" cDate="2017-08-07T14:47:43" mDate="2017-08-07T14:47:43" loc="start=488 end=510 startpage=5 endpage=5">
                    <content size="22">
                        <p>2.2 MergeSort Analysis</p>
                    </content>
                </q>
                <q name="Each call to mergeSort is either done in O(1) time (if first+1 \ensuremath{\geq last}) or splits the&#8230;" id="q10_26_353" au="dyg" cDate="2017-08-07T14:48:20" mDate="2017-08-07T14:48:20" loc="start=983 end=1172 startpage=5 endpage=5">
                    <content size="189">
                        <p>Each call to mergeSort is either done in O(1) time (if first+1 \ensuremath{\geq last}) or splits the array into two equal (\ensuremath{\pm}1) pieces. We can do this split up to log N times.</p>
                    </content>
                </q>
                <q name="We can do this split up to log N times." id="q10_27_354" au="dyg" cDate="2017-08-07T14:48:40" mDate="2017-08-07T14:48:40" loc="start=1133 end=1172 startpage=5 endpage=5">
                    <content size="39">
                        <p>We can do this split up to log N times.</p>
                    </content>
                </q>
                <q name="We can envision the recursive mergeSort calls (in blue) and the subsequent calls to merge (in yellow&#8230;" id="q10_28_355" au="dyg" cDate="2017-08-07T14:49:04" mDate="2017-08-07T14:49:04" loc="start=1173 end=1300 startpage=5 endpage=5">
                    <content size="127">
                        <p>We can envision the recursive mergeSort calls (in blue) and the subsequent calls to merge (in yellow) as a tree-like structure.</p>
                    </content>
                </q>
                <q name="Let denote the total number of elements being sorted (the value of last-first on the very first call&#8230;" id="q10_29_356" au="dyg" cDate="2017-08-07T14:50:54" mDate="2017-08-07T14:50:54" loc="start=1301 end=1429 startpage=5 endpage=5">
                    <content size="128">
                        <p>Let denote the total number of elements being sorted (the value of last-first on the very first call to mergeSort). \ePicOnRight</p>
                    </content>
                </q>
                <q name="Each level in the tree involves no more than objects, split in various ways and needing to be merged&#8230;" id="q10_30_357" au="dyg" cDate="2017-08-07T14:51:23" mDate="2017-08-07T14:51:23" loc="start=1430 end=1531 startpage=5 endpage=5">
                    <content size="101">
                        <p>Each level in the tree involves no more than objects, split in various ways and needing to be merged.</p>
                    </content>
                </q>
                <q name="merge is , where is the number of elements to be merged. The sum of all the values at any level of t&#8230;" id="q10_31_358" au="dyg" cDate="2017-08-07T14:51:48" mDate="2017-08-07T14:52:02" loc="start=1532 end=1652 startpage=5 endpage=5">
                    <content size="120">
                        <p>merge is , where is the number of elements to be merged. The sum of all the values at any level of the yellow tree is . </p>
                    </content>
                </q>
                <q name="Consequently the combined set of merges at each level of the tree is ." id="q10_32_359" au="dyg" cDate="2017-08-07T14:52:30" mDate="2017-08-07T14:52:30" loc="start=1652 end=1722 startpage=5 endpage=5">
                    <content size="70">
                        <p>Consequently the combined set of merges at each level of the tree is .</p>
                    </content>
                </q>
                <q name="The blue tree represents all the non-merge work in mergeSort." id="q10_33_360" au="dyg" cDate="2017-08-07T14:52:44" mDate="2017-08-07T14:52:44" loc="start=1723 end=1784 startpage=5 endpage=5">
                    <content size="61">
                        <p>The blue tree represents all the non-merge work in mergeSort.</p>
                    </content>
                </q>
                <q name="But there&#8217;s only those blue nodes. Since the most blue nodes we could have at one level is , each bl&#8230;" id="q10_34_361" au="dyg" cDate="2017-08-07T14:53:10" mDate="2017-08-07T14:53:10" loc="start=1785 end=1935 startpage=5 endpage=5">
                    <content size="150">
                        <p>But there&#8217;s only</p>
                        <p>those blue nodes. Since the most blue nodes we could have at one level is , each blue level is, at most,</p>
                        <p>work in each of</p>
                        <p>total work.</p>
                    </content>
                </q>
                <q name="Because we have levels, each level taking work, the overall merge sort code is (worst &amp; average case&#8230;" id="q10_35_362" au="dyg" cDate="2017-08-07T14:56:57" mDate="2017-08-07T14:56:57" loc="start=0 end=103 startpage=6 endpage=6">
                    <content size="103">
                        <p>Because we have levels, each level taking work, the overall merge sort code is (worst &amp; average case) .</p>
                    </content>
                </q>
                <q name="So merge sort is as fast as any pairwise-comparison sort can be." id="q10_36_363" au="dyg" cDate="2017-08-07T15:00:13" mDate="2017-08-07T15:00:13" loc="start=104 end=168 startpage=6 endpage=6">
                    <content size="64">
                        <p>So merge sort is as fast as any pairwise-comparison sort can be.</p>
                    </content>
                </q>
                <q name="Still, merge sort is not considered to be the &#8220;ideal&#8221; sorting algorithm. Its primary drawbacks are" id="q10_37_364" au="dyg" cDate="2017-08-07T15:00:32" mDate="2017-08-07T15:00:32" loc="start=169 end=268 startpage=6 endpage=6">
                    <content size="99">
                        <p>Still, merge sort is not considered to be the &#8220;ideal&#8221; sorting algorithm. Its primary drawbacks are</p>
                    </content>
                </q>
                <q name="It requires extra storage (for the tempVector) It does the full set of comparisons and copies even w&#8230;" id="q10_38_365" au="dyg" cDate="2017-08-07T15:00:47" mDate="2017-08-07T15:00:47" loc="start=268 end=415 startpage=6 endpage=6">
                    <content size="147">
                        <p>It requires extra storage (for the tempVector)</p>
                        <p>It does the full set of comparisons and copies even when applied to arrays that are already sorted.</p>
                    </content>
                </q>
                <q name="On the other hand, merge sort has an" id="q10_39_366" au="dyg" cDate="2017-08-07T15:02:15" mDate="2017-08-20T11:34:09" loc="start=415 end=451 startpage=6 endpage=6">
                    <content size="36">
                        <p>On the other hand, merge sort has an</p>
                    </content>
                </q>
                <q name="The merge routine itself moves sequentially through its working arrays, not jumping from place to pl&#8230;" id="q10_40_367" au="dyg" cDate="2017-08-07T15:02:38" mDate="2017-08-07T15:02:38" loc="start=521 end=823 startpage=6 endpage=6">
                    <content size="302">
                        <p>The merge routine itself moves sequentially through its working arrays, not jumping from place to place. This behavior would be absolutely wonderful if we were storing our arrays in some strange kind of memory where moving forward one place is cheap, but jumping to an arbitrary position is expensive.</p>
                    </content>
                </q>
                <q name="In fact, that &#8220;strange kind of memory&#8221; does exist: disk drives and magnetic tape both meet that desc&#8230;" id="q10_41_368" au="dyg" cDate="2017-08-07T15:03:01" mDate="2017-08-07T15:03:01" loc="start=823 end=1114 startpage=6 endpage=6">
                    <content size="291">
                        <p>In fact, that &#8220;strange kind of memory&#8221; does exist: disk drives and magnetic tape both meet that description. Hence variations of merge sort have long been the algorithm of choice in external sorting, sorting sets of material stored in disk/tape files that are too large to load into memory.</p>
                    </content>
                </q>
                <q name="merge2" id="q10_42_369" au="dyg" cDate="2017-08-20T11:29:48" mDate="2017-08-20T11:29:48" loc="start=751 end=757 startpage=3 endpage=3">
                    <content size="6">
                        <p>merge2</p>
                    </content>
                </q>
                <q name="cpp" id="q10_43_370" au="dyg" cDate="2017-08-20T11:29:51" mDate="2017-08-20T11:29:51" loc="start=758 end=761 startpage=3 endpage=3">
                    <content size="3">
                        <p>cpp</p>
                    </content>
                </q>
                <q name="advantage that may, at first glance, not have seemed very important." id="q10_44_371" au="dyg" cDate="2017-08-20T11:34:20" mDate="2017-08-20T11:34:20" loc="start=452 end=520 startpage=6 endpage=6">
                    <content size="68">
                        <p>advantage that may, at first glance, not have seemed very important.</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="AVT04.pdf" id="pd_11_10" loc="doc_10" au="dyg" cDate="2017-08-07T15:04:13" mDate="2017-08-24T11:14:18" qIndex="">
            <quotations size="64">
                <q name="AVL Trees" id="q11_1_372" au="dyg" cDate="2017-08-10T09:25:46" mDate="2017-08-10T09:25:46" loc="start=0 end=9 startpage=0 endpage=0">
                    <content size="9">
                        <p>AVL Trees</p>
                    </content>
                </q>
                <q name="In order to have a worst case running time for insert and delete operations to be O(log n), we must&#8230;" id="q11_2_373" au="dyg" cDate="2017-08-10T09:26:15" mDate="2017-08-10T09:26:15" loc="start=10 end=188 startpage=0 endpage=0">
                    <content size="178">
                        <p>In order to have a worst case running time for insert and delete operations to be O(log n), we must make it impossible for there to be a very long path in the binary search tree.</p>
                    </content>
                </q>
                <q name="The  rst balanced binary tree is the AVL tree, named after it's inventors, Adelson-Velskii and Landi&#8230;" id="q11_3_374" au="dyg" cDate="2017-08-10T09:26:37" mDate="2017-08-10T09:26:37" loc="start=189 end=291 startpage=0 endpage=0">
                    <content size="102">
                        <p>The  rst balanced binary tree is the AVL tree, named after it's inventors, Adelson-Velskii and Landis.</p>
                    </content>
                </q>
                <q name="A binary search tree is an AVL tree i  each node in the tree satis es the following property:" id="q11_4_375" au="dyg" cDate="2017-08-10T09:26:48" mDate="2017-08-10T09:26:48" loc="start=292 end=385 startpage=0 endpage=0">
                    <content size="93">
                        <p>A binary search tree is an AVL tree i  each node in the tree satis es the following property:</p>
                    </content>
                </q>
                <q name="The height of the left subtree can di er from the height of the right subtree by at most 1." id="q11_5_376" au="dyg" cDate="2017-08-10T09:27:43" mDate="2017-08-10T09:27:43" loc="start=386 end=477 startpage=0 endpage=0">
                    <content size="91">
                        <p>The height of the left subtree can di er from the height of the right subtree by at most 1.</p>
                    </content>
                </q>
                <q name="Based on this property, we can show that the height of an AVL tree is logarithmic with respect to th&#8230;" id="q11_6_377" au="dyg" cDate="2017-08-10T09:29:45" mDate="2017-08-10T09:29:45" loc="start=478 end=615 startpage=0 endpage=0">
                    <content size="137">
                        <p>Based on this property, we can show that the height of an AVL tree is logarithmic with respect to the number of nodes stored in the tree.</p>
                    </content>
                </q>
                <q name="In particular, for an AVL tree of height H, we  nd that it must contain at least FH+3 -1 nodes." id="q11_7_378" au="dyg" cDate="2017-08-10T09:30:34" mDate="2017-08-10T09:30:34" loc="start=616 end=711 startpage=0 endpage=0">
                    <content size="95">
                        <p>In particular, for an AVL tree of height H, we  nd that it must contain at least FH+3 -1 nodes.</p>
                    </content>
                </q>
                <q name="To prove this, notice that the number of nodes in an AVL tree is the 1 plus the number of notes in t&#8230;" id="q11_8_379" au="dyg" cDate="2017-08-10T09:35:35" mDate="2017-08-10T09:35:35" loc="start=746 end=908 startpage=0 endpage=0">
                    <content size="162">
                        <p>To prove this, notice that the number of nodes in an AVL tree is the 1 plus the number of notes in the left subtree plus the number of nodes in the right subtree.</p>
                    </content>
                </q>
                <q name="If we let SH represent the minimum number of nodes in an AVL tree with height H, we get the followin&#8230;" id="q11_9_380" au="dyg" cDate="2017-08-10T09:35:56" mDate="2017-08-10T09:35:56" loc="start=909 end=1031 startpage=0 endpage=0">
                    <content size="122">
                        <p>If we let SH represent the minimum number of nodes in an AVL tree with height H, we get the following recurrence relation:</p>
                    </content>
                </q>
                <q name="We also know that S0=1 and S1=2. Now we can prove the assertion above through induction. Problem: Pr&#8230;" id="q11_10_381" au="dyg" cDate="2017-08-10T09:36:17" mDate="2017-08-10T09:37:02" loc="start=1050 end=713 startpage=0 endpage=1">
                    <content size="837">
                        <p>We also know that S0=1 and S1=2. Now we can prove the assertion above through induction.</p>
                        <p>Problem: Prove that SH = FH+3 -1.</p>
                        <p>We will use induction on H, the height of the AVL tree.</p>
                        <p>Base Cases H=0: LHS = 1, RHS = F3 - 1 = 2 - 1 = 1 H=1: LHS = 2, RHS = F4 - 1 = 3 - 1 = 2</p>
                        <p>Inductive hypothesis: For an arbitrary integer k &lt;= H, assume that Sk = Fk+3 -1.</p>
                        <p>Inductive step: Under the assumption above, prove for H=k+1 that Sk+1 = Fk+1+3 -1.</p>
                        <p>Sk+1 =Sk +Sk-1 +1</p>
                        <p>= (Fk+3 -1) + (Fk+2 -1) +1, using the I.H. twice</p>
                        <p>= (Fk+3 + Fk+2) - 1</p>
                        <p>= Fk+4 -1, using the defn. of Fibonacci numbers, to complete</p>
                        <p>proof.</p>
                        <p>It can be shown through recurrence relations, that</p>
                        <p>Fn &#61627; 1/&#61654;5 [(1 + &#61654;5)/2]n</p>
                        <p>So now, we have the following:</p>
                        <p>Sn &#61627; 1/&#61654;5 [(1 + &#61654;5)/2]n+3</p>
                        <p>This says that when the height of an AVL tree is n, the minimum number of nodes it contains is 1/&#61654;5 [(1 + &#61654;5)/2]n+3.</p>
                    </content>
                </q>
                <q name="So, in order to  nd the height of a tree with n nodes, we must replace Sn with n and replace n with&#8230;" id="q11_11_382" au="dyg" cDate="2017-08-10T09:37:12" mDate="2017-08-10T09:37:12" loc="start=713 end=838 startpage=1 endpage=1">
                    <content size="125">
                        <p>So, in order to  nd the height of a tree with n nodes, we must replace Sn with n and replace n with h? Why is this the case?</p>
                    </content>
                </q>
                <q name="n &#61627; 1/&#61654;5 [(1 + &#61654;5)/2]h+3 n &#61627; (1.618)h h &#61627; log 1.618 n h = O(log 2 n)" id="q11_12_383" au="dyg" cDate="2017-08-10T09:37:31" mDate="2017-08-10T09:37:31" loc="start=0 end=69 startpage=2 endpage=2">
                    <content size="69">
                        <p>n &#61627; 1/&#61654;5 [(1 + &#61654;5)/2]h+3 n &#61627; (1.618)h</p>
                        <p>h &#61627; log 1.618 n</p>
                        <p>h = O(log 2 n)</p>
                    </content>
                </q>
                <q name="Basically whenever an insertion or deletion is done, it is possible that the new node added or taken&#8230;" id="q11_13_384" au="dyg" cDate="2017-08-10T09:39:42" mDate="2017-08-19T15:28:00" loc="start=210 end=458 startpage=2 endpage=2">
                    <content size="248">
                        <p>Basically whenever an insertion or deletion is done, it is possible that the new node added or taken away destroys the AVL property. In these sitiuations, we have to "rework" the tree so that the binary search tree and AVL properties are satis ed.</p>
                    </content>
                </q>
                <q name="When an imbalance is introduced to a tree, it is localized to three nodes and their four subtrees." id="q11_14_385" au="dyg" cDate="2017-08-10T09:41:52" mDate="2017-08-10T09:41:52" loc="start=458 end=556 startpage=2 endpage=2">
                    <content size="98">
                        <p>When an imbalance is introduced to a tree, it is localized to three nodes and their four subtrees.</p>
                    </content>
                </q>
                <q name="Denote these three nodes as A, B, and C, in their inorder listing." id="q11_15_386" au="dyg" cDate="2017-08-10T09:46:43" mDate="2017-08-10T09:46:43" loc="start=557 end=623 startpage=2 endpage=2">
                    <content size="66">
                        <p>Denote these three nodes as A, B, and C, in their inorder listing.</p>
                    </content>
                </q>
                <q name="Structurally, they may appear in various con gurations." id="q11_16_387" au="dyg" cDate="2017-08-10T09:46:50" mDate="2017-08-10T09:46:50" loc="start=624 end=679 startpage=2 endpage=2">
                    <content size="55">
                        <p>Structurally, they may appear in various con gurations.</p>
                    </content>
                </q>
                <q name="A couple of these are listed below:" id="q11_17_388" au="dyg" cDate="2017-08-10T09:48:21" mDate="2017-08-10T09:48:21" loc="start=680 end=715 startpage=2 endpage=2">
                    <content size="35">
                        <p>A couple of these are listed below:</p>
                    </content>
                </q>
                <q name="Denote the four subtrees as T0, T1, T2, and T3, also listed in their inorder listing. Here is where&#8230;" id="q11_18_389" au="dyg" cDate="2017-08-10T09:48:33" mDate="2017-08-10T09:48:36" loc="start=0 end=142 startpage=3 endpage=3">
                    <content size="142">
                        <p>Denote the four subtrees as T0, T1, T2, and T3, also listed in their inorder listing. Here is where these would lie in the trees drawn above:</p>
                    </content>
                </q>
                <q name="No matter which of these structural imbalances exist, they can all be  xed the same way:" id="q11_19_390" au="dyg" cDate="2017-08-10T09:48:49" mDate="2017-08-10T09:48:49" loc="start=195 end=283 startpage=3 endpage=3">
                    <content size="88">
                        <p>No matter which of these structural imbalances exist, they can all be  xed the same way:</p>
                    </content>
                </q>
                <q name="Another way we can view these transformations is through two separate types or restructuring operati&#8230;" id="q11_20_391" au="dyg" cDate="2017-08-10T09:50:17" mDate="2017-08-10T09:50:17" loc="start=309 end=454 startpage=3 endpage=3">
                    <content size="145">
                        <p>Another way we can view these transformations is through two separate types or restructuring operations: a single rotation and a double rotation.</p>
                    </content>
                </q>
                <q name="Here are the four cases we will look at: 1) insertion into the left subtree of the left child of the&#8230;" id="q11_21_392" au="dyg" cDate="2017-08-10T09:50:58" mDate="2017-08-10T09:51:16" loc="start=493 end=800 startpage=3 endpage=3">
                    <content size="307">
                        <p>Here are the four cases we will look at:</p>
                        <p>1) insertion into the left subtree of the left child of the root.</p>
                        <p>2) insertion into the right subtree of the left child of the root. 3) insertion into the left subtree of the right child of the root. 4) insertion into the right subtree of the right child of the root</p>
                    </content>
                </q>
                <q name="Technically speaking, cases 1 and 4 are symmetric as are 2 and 3." id="q11_22_393" au="dyg" cDate="2017-08-10T09:51:43" mDate="2017-08-10T09:51:43" loc="start=0 end=65 startpage=4 endpage=4">
                    <content size="65">
                        <p>Technically speaking, cases 1 and 4 are symmetric as are 2 and 3.</p>
                    </content>
                </q>
                <q name="For cases 1 and 4, we will perform a single rotation, and for 2 and 3 we will do a double rotation." id="q11_23_394" au="dyg" cDate="2017-08-10T09:52:42" mDate="2017-08-10T09:52:42" loc="start=66 end=165 startpage=4 endpage=4">
                    <content size="99">
                        <p>For cases 1 and 4, we will perform a single rotation, and for 2 and 3 we will do a double rotation.</p>
                    </content>
                </q>
                <q name="In the pictures I have above, the left picture is case 2 of this description, and the right picture&#8230;" id="q11_24_395" au="dyg" cDate="2017-08-10T09:52:59" mDate="2017-08-10T09:52:59" loc="start=166 end=276 startpage=4 endpage=4">
                    <content size="110">
                        <p>In the pictures I have above, the left picture is case 2 of this description, and the right picture is case 4.</p>
                    </content>
                </q>
                <q name="Why is the case on the left called a double rotation? Because we can achieve it by performing two ro&#8230;" id="q11_25_396" au="dyg" cDate="2017-08-10T09:53:17" mDate="2017-08-10T09:53:17" loc="start=277 end=403 startpage=4 endpage=4">
                    <content size="126">
                        <p>Why is the case on the left called a double rotation? Because we can achieve it by performing two rotations on the root node:</p>
                    </content>
                </q>
                <q name="CC /\ /\ A T3 B T3" id="q11_26_397" au="dyg" cDate="2017-08-10T09:53:31" mDate="2017-08-10T09:53:31" loc="start=403 end=421 startpage=4 endpage=4">
                    <content size="18">
                        <p>CC /\ /\ A T3 B T3</p>
                    </content>
                </q>
                <q name="Insertion into an AVL Tree So, now the question is, how can we use these rotations to actually perfo&#8230;" id="q11_27_398" au="dyg" cDate="2017-08-10T09:53:50" mDate="2017-08-10T09:54:00" loc="start=0 end=129 startpage=5 endpage=5">
                    <content size="129">
                        <p>Insertion into an AVL Tree</p>
                        <p>So, now the question is, how can we use these rotations to actually perform an insert on an AVL tree?</p>
                    </content>
                </q>
                <q name="Here are the basic steps involved: 1) Do a normal binary tree insert. 2) Restoring the tree based on&#8230;" id="q11_28_399" au="dyg" cDate="2017-08-10T09:54:10" mDate="2017-08-10T09:54:10" loc="start=129 end=246 startpage=5 endpage=5">
                    <content size="117">
                        <p>Here are the basic steps involved:</p>
                        <p>1) Do a normal binary tree insert.</p>
                        <p>2) Restoring the tree based on this leaf node.</p>
                    </content>
                </q>
                <q name="This restoration is more di cult than just following the steps above. Here are the steps involved in&#8230;" id="q11_29_400" au="dyg" cDate="2017-08-10T09:54:26" mDate="2017-08-10T09:54:26" loc="start=246 end=373 startpage=5 endpage=5">
                    <content size="127">
                        <p>This restoration is more di cult than just following the steps above. Here are the steps involved in the restoration of a node:</p>
                    </content>
                </q>
                <q name="1) Calculate the heights of the left and right subtrees, use this to set the potentially new height&#8230;" id="q11_30_401" au="dyg" cDate="2017-08-10T09:54:40" mDate="2017-08-10T09:54:40" loc="start=374 end=751 startpage=5 endpage=5">
                    <content size="377">
                        <p>1) Calculate the heights of the left and right subtrees, use this to set the potentially new height of the node.</p>
                        <p>2) If they are within one of each other, just go up to the parent node and continue.</p>
                        <p>3) If not, then perform the appropriate restructuring described above on that particular node, THEN go to the parent node and continue.</p>
                        <p>4) Stop when you've reached the root node.</p>
                    </content>
                </q>
                <q name="With insertion, we are guaranteed that we will at most rebalance the tree once. When we march up the&#8230;" id="q11_31_402" au="dyg" cDate="2017-08-10T09:54:59" mDate="2017-08-10T09:55:12" loc="start=751 end=1024 startpage=5 endpage=5">
                    <content size="273">
                        <p>With insertion, we are guaranteed that we will at most rebalance the tree once.</p>
                        <p>When we march up the tree, at each step we are updating the height of that node, if necessary. The only nodes that need to be updated are those on the ancestral "lineage" of the inserted node.</p>
                    </content>
                </q>
                <q name="Deletion from an AVL Tree First we will do a normal binary search tree delete." id="q11_32_403" au="dyg" cDate="2017-08-10T09:57:39" mDate="2017-08-10T09:57:39" loc="start=0 end=78 startpage=6 endpage=6">
                    <content size="78">
                        <p>Deletion from an AVL Tree</p>
                        <p>First we will do a normal binary search tree delete.</p>
                    </content>
                </q>
                <q name="Note that structurally speaking, all deletes from a binary search tree delete nodes with zero or one&#8230;" id="q11_33_404" au="dyg" cDate="2017-08-10T09:58:54" mDate="2017-08-10T09:58:54" loc="start=79 end=186 startpage=6 endpage=6">
                    <content size="107">
                        <p>Note that structurally speaking, all deletes from a binary search tree delete nodes with zero or one child.</p>
                    </content>
                </q>
                <q name="For deleted leaf nodes, clearly the heights of the children of the node do not change. Also, the hei&#8230;" id="q11_34_405" au="dyg" cDate="2017-08-10T09:59:08" mDate="2017-08-10T09:59:43" loc="start=187 end=363 startpage=6 endpage=6">
                    <content size="176">
                        <p>For deleted leaf nodes, clearly the heights of the children of the node do not change. Also, the heights of the children of a deleted node with one child do not change either. </p>
                    </content>
                </q>
                <q name="Thus, if a delete causes a violation of the AVL Tree height property, this would HAVE to occur on so&#8230;" id="q11_35_406" au="dyg" cDate="2017-08-10T10:00:03" mDate="2017-08-10T10:00:03" loc="start=363 end=536 startpage=6 endpage=6">
                    <content size="173">
                        <p>Thus, if a delete causes a violation of the AVL Tree height property, this would HAVE to occur on some node on the path from the parent of the deleted node to the root node.</p>
                    </content>
                </q>
                <q name="Thus, once again, as above, to restructure the tree after a delete we will call the restructure meth&#8230;" id="q11_36_407" au="dyg" cDate="2017-08-10T10:00:34" mDate="2017-08-10T10:00:34" loc="start=537 end=674 startpage=6 endpage=6">
                    <content size="137">
                        <p>Thus, once again, as above, to restructure the tree after a delete we will call the restructure method on the parent of the deleted node.</p>
                    </content>
                </q>
                <q name="One thing to note: whereas in an insert there is at most one node that needs to be rebalanced, there&#8230;" id="q11_37_408" au="dyg" cDate="2017-08-10T10:00:58" mDate="2017-08-10T10:00:58" loc="start=675 end=839 startpage=6 endpage=6">
                    <content size="164">
                        <p>One thing to note: whereas in an insert there is at most one node that needs to be rebalanced, there may be multiple nodes in the delete that need to be rebalanced.</p>
                    </content>
                </q>
                <q name="Technically speaking, at any point in the restructuring algorithm ONLY one node will ever be unbalan&#8230;" id="q11_38_409" au="dyg" cDate="2017-08-10T10:02:20" mDate="2017-08-10T10:02:20" loc="start=840 end=944 startpage=6 endpage=6">
                    <content size="104">
                        <p>Technically speaking, at any point in the restructuring algorithm ONLY one node will ever be unbalanced.</p>
                    </content>
                </q>
                <q name="But, what may happen is when that node is  xed, it may propagate an error to an ancestor node." id="q11_39_410" au="dyg" cDate="2017-08-10T10:02:32" mDate="2017-08-10T10:02:32" loc="start=945 end=1039 startpage=6 endpage=6">
                    <content size="94">
                        <p>But, what may happen is when that node is  xed, it may propagate an error to an ancestor node.</p>
                    </content>
                </q>
                <q name="But, this is NOT a problem because our restructuring algorithm goes all the way to the root node." id="q11_40_411" au="dyg" cDate="2017-08-10T10:02:37" mDate="2017-08-10T10:02:37" loc="start=1040 end=1137 startpage=6 endpage=6">
                    <content size="97">
                        <p>But, this is NOT a problem because our restructuring algorithm goes all the way to the root node.</p>
                    </content>
                </q>
                <q name="1) Consider inserting 46 into the following AVL Tree:" id="q11_41_412" au="dyg" cDate="2017-08-10T10:03:10" mDate="2017-08-10T10:03:10" loc="start=18 end=71 startpage=7 endpage=7">
                    <content size="53">
                        <p>1) Consider inserting 46 into the following AVL Tree:</p>
                    </content>
                </q>
                <q name="Now, let's trace through the rebalancing process from this place." id="q11_42_413" au="dyg" cDate="2017-08-10T10:03:33" mDate="2017-08-10T10:03:33" loc="start=225 end=290 startpage=7 endpage=7">
                    <content size="65">
                        <p>Now, let's trace through the rebalancing process from this place.</p>
                    </content>
                </q>
                <q name="First, we call the method on this node. Once we set its height, we check to see if the node is balan&#8230;" id="q11_43_414" au="dyg" cDate="2017-08-10T10:04:19" mDate="2017-08-10T10:04:35" loc="start=291 end=1006 startpage=7 endpage=7">
                    <content size="715">
                        <p>First, we call the method on this node. Once we set its height, we check to see if the node is balanced. (This simply looks up the heights of the left and right subtrees, and decides if the di erence is more than 1.) In this case, the node is balanced, so we march up to the parent node, that stores 44.</p>
                        <p>We will trace through the same steps here, setting the new height of this node (this is important!) and determining that this node is balanced, since its left subtree has a height of -1 and the right subtree has a height of 0.</p>
                        <p>Similarly, we set the height and decide that the nodes storing 40 and 48 are balanced as well. Finally, when we reach the root node storing 32, we realize that our tree is imbalanced.</p>
                    </content>
                </q>
                <q name="Now, we  nally get to execute the code inside the if statement in the rebalance method. Here we set&#8230;" id="q11_44_415" au="dyg" cDate="2017-08-10T10:04:57" mDate="2017-08-10T10:04:57" loc="start=0 end=205 startpage=8 endpage=8">
                    <content size="205">
                        <p>Now, we  nally get to execute the code inside the if statement in the rebalance method. Here we set xPos to be the tallest grandchild of the root node. (This is the node storing 40, since its height is 2.)</p>
                    </content>
                </q>
                <q name="Thus, the restructuring occurs on the nodes containing the 32, 48 and 40." id="q11_45_416" au="dyg" cDate="2017-08-10T10:05:54" mDate="2017-08-10T10:05:54" loc="start=206 end=279 startpage=8 endpage=8">
                    <content size="73">
                        <p>Thus, the restructuring occurs on the nodes containing the 32, 48 and 40.</p>
                    </content>
                </q>
                <q name="40 /\" id="q11_46_417" au="dyg" cDate="2017-08-10T10:06:06" mDate="2017-08-10T10:06:06" loc="start=367 end=372 startpage=8 endpage=8">
                    <content size="5">
                        <p>40 /\</p>
                    </content>
                </q>
                <q name="2) Now, for the second example, consider inserting 61 into the following AVL Tree:" id="q11_47_418" au="dyg" cDate="2017-08-10T10:07:05" mDate="2017-08-10T10:07:05" loc="start=673 end=755 startpage=8 endpage=8">
                    <content size="82">
                        <p>2) Now, for the second example, consider inserting 61 into the following AVL Tree:</p>
                    </content>
                </q>
                <q name="32 /\" id="q11_48_419" au="dyg" cDate="2017-08-10T10:07:11" mDate="2017-08-10T10:07:11" loc="start=756 end=761 startpage=8 endpage=8">
                    <content size="5">
                        <p>32 /\</p>
                    </content>
                </q>
                <q name="61, inserted Tracing through the code, we  nd the  rst place an imbalance occurs tracing up the ance&#8230;" id="q11_49_420" au="dyg" cDate="2017-08-10T10:09:44" mDate="2017-08-10T10:10:10" loc="start=8 end=359 startpage=9 endpage=9">
                    <content size="351">
                        <p>61, inserted Tracing through the code, we  nd the  rst place an imbalance occurs tracing up the ancestry of the node storing 61 is at the noce storing 56. This time, we have that node A stores 56, node B stores 60, and node C stores 62. Using our restucturing algorithm, we  nd the tallest grandchild of 56 to be 62, and</p>
                        <p>rearrange the tree as follows:</p>
                    </content>
                </q>
                <q name="32 /\" id="q11_50_421" au="dyg" cDate="2017-08-10T10:10:21" mDate="2017-08-10T10:10:21" loc="start=360 end=365 startpage=9 endpage=9">
                    <content size="5">
                        <p>32 /\</p>
                    </content>
                </q>
                <q name="T0 is the subtree rooted at 52, T1 is the subtree rooted at 58, T2 is the subtree rooted at 61, and&#8230;" id="q11_51_422" au="dyg" cDate="2017-08-10T10:10:30" mDate="2017-08-10T10:10:30" loc="start=421 end=542 startpage=9 endpage=9">
                    <content size="121">
                        <p>T0 is the subtree rooted at 52, T1 is the subtree rooted at 58, T2 is the subtree rooted at 61, and T3 is a null subtree.</p>
                    </content>
                </q>
                <q name="3) For this example, we will delete the node storing 8 from the AVL tree below:" id="q11_52_423" au="dyg" cDate="2017-08-10T10:11:03" mDate="2017-08-10T10:11:03" loc="start=543 end=622 startpage=9 endpage=9">
                    <content size="79">
                        <p>3) For this example, we will delete the node storing 8 from the AVL tree below:</p>
                    </content>
                </q>
                <q name="32 /\" id="q11_53_424" au="dyg" cDate="2017-08-10T10:11:11" mDate="2017-08-10T10:11:11" loc="start=623 end=628 startpage=9 endpage=9">
                    <content size="5">
                        <p>32 /\</p>
                    </content>
                </q>
                <q name="Tracing through the code, we  nd that we must  rst call the rebalance method on the parent of the de&#8230;" id="q11_54_425" au="dyg" cDate="2017-08-10T10:11:27" mDate="2017-08-10T10:11:27" loc="start=9 end=199 startpage=10 endpage=10">
                    <content size="190">
                        <p>Tracing through the code, we  nd that we must  rst call the rebalance method on the parent of the deleted node, which stores 16. This node needs rebalancing and gets restructured as follows:</p>
                    </content>
                </q>
                <q name="32 /\" id="q11_55_426" au="dyg" cDate="2017-08-10T10:11:35" mDate="2017-08-10T10:11:35" loc="start=200 end=205 startpage=10 endpage=10">
                    <content size="5">
                        <p>32 /\</p>
                    </content>
                </q>
                <q name="Notice that all four subtrees for this restructuring are null, and we only use the nodes A, B, and C&#8230;" id="q11_56_427" au="dyg" cDate="2017-08-10T10:12:39" mDate="2017-08-10T10:13:00" loc="start=254 end=469 startpage=10 endpage=10">
                    <content size="215">
                        <p>Notice that all four subtrees for this restructuring are null, and we only use the nodes A, B, and C. Next, we march up to the parent of the node storing 24, the node storing 32. Once again, this node is imbalanced.</p>
                    </content>
                </q>
                <q name="The reason for this is that the restructuring of the node with a 16 reduced the height of that subtr&#8230;" id="q11_57_428" au="dyg" cDate="2017-08-10T10:14:02" mDate="2017-08-10T10:14:10" loc="start=470 end=759 startpage=10 endpage=10">
                    <content size="289">
                        <p>The reason for this is that the restructuring of the node with a 16 reduced the height of that subtree. By doing so, there was in INCREASE in the di erence of height between the subtrees of the old parent of the node storing 16. This increase could propogate an imbalance in the AVL tree.</p>
                    </content>
                </q>
                <q name="When we restructure at the node storing the 32, we identify the node storing the 56 as the tallest g&#8230;" id="q11_58_429" au="dyg" cDate="2017-08-10T10:16:31" mDate="2017-08-10T10:16:31" loc="start=759 end=869 startpage=10 endpage=10">
                    <content size="110">
                        <p>When we restructure at the node storing the 32, we identify the node storing the 56 as the tallest grandchild.</p>
                    </content>
                </q>
                <q name="Following the steps we've done previously, we get the  nal tree as follows:" id="q11_59_430" au="dyg" cDate="2017-08-10T10:16:39" mDate="2017-08-10T10:16:39" loc="start=870 end=945 startpage=10 endpage=10">
                    <content size="75">
                        <p>Following the steps we've done previously, we get the  nal tree as follows:</p>
                    </content>
                </q>
                <q name="4) The  nal example, we will delete the node storing 4 from the AVL tree below:" id="q11_60_431" au="dyg" cDate="2017-08-10T10:16:57" mDate="2017-08-10T10:16:57" loc="start=54 end=133 startpage=11 endpage=11">
                    <content size="79">
                        <p>4) The  nal example, we will delete the node storing 4 from the AVL tree below:</p>
                    </content>
                </q>
                <q name="When we call rebalance on the node storing an 8, (the parent of the deleted node), we do NOT  nd an&#8230;" id="q11_61_432" au="dyg" cDate="2017-08-10T10:17:15" mDate="2017-08-10T10:17:15" loc="start=191 end=364 startpage=11 endpage=11">
                    <content size="173">
                        <p>When we call rebalance on the node storing an 8, (the parent of the deleted node), we do NOT  nd an imbalance at an ancestral node until we get to the root node of the tree.</p>
                    </content>
                </q>
                <q name="Here we once again identify the node storing 32 as node A, the node storing 48 as node B and the nod&#8230;" id="q11_62_433" au="dyg" cDate="2017-08-10T10:17:22" mDate="2017-08-10T10:17:32" loc="start=365 end=47 startpage=11 endpage=12">
                    <content size="124">
                        <p>Here we once again identify the node storing 32 as node A, the node storing</p>
                        <p>48 as node B and the node storing 56 as node C.</p>
                    </content>
                </q>
                <q name="Accordingly, we restructure as follows:" id="q11_63_434" au="dyg" cDate="2017-08-10T10:17:48" mDate="2017-08-10T10:17:48" loc="start=48 end=87 startpage=12 endpage=12">
                    <content size="39">
                        <p>Accordingly, we restructure as follows:</p>
                    </content>
                </q>
                <q name="Now the question remains, how do we maintain an AVL tree? What extra work do we have to do to make s&#8230;" id="q11_64_435" au="dyg" cDate="2017-08-19T15:28:11" mDate="2017-08-19T15:28:11" loc="start=69 end=210 startpage=2 endpage=2">
                    <content size="141">
                        <p>Now the question remains, how do we maintain an AVL tree? What extra work do we have to do to make sure that the AVL property is maintained?</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="DJK04.pdf" id="pd_12_11" loc="doc_11" au="dyg" cDate="2017-08-10T10:18:10" mDate="2017-08-24T11:13:59" qIndex="">
            <quotations size="24">
                <q name="AB   @8 ?  , / 38&gt;=-  &lt;7,$3 :;89(7* 56  34  ,210 /&quot; . -  , *+()&amp;' %#$!&quot;" id="q12_1_436" au="dyg" cDate="2017-08-10T10:18:33" mDate="2017-08-10T10:18:33" loc="start=1145 end=1216 startpage=0 endpage=0">
                    <content size="71">
                        <p>AB   @8 ?  , / 38&gt;=-  &lt;7,$3 :;89(7* 56  34  ,210 /" . -  , *+()&amp;' %#$!"</p>
                    </content>
                </q>
                <q name="f+Nb]TZRP9Xed`X2_RP%N6V2Z9XOScabSTQKS`X2_9V^]-E6X\Z[Y6X WRW6V?" id="q12_2_437" au="dyg" cDate="2017-08-10T10:18:44" mDate="2017-08-10T10:18:44" loc="start=1053 end=1115 startpage=0 endpage=0">
                    <content size="62">
                        <p>f+Nb]TZRP9Xed`X2_RP%N6V2Z9XOScabSTQKS`X2_9V^]-E6X\Z[Y6X WRW6V?</p>
                    </content>
                </q>
                <q name="R  q    u 6    q  K \z qyw   URq    \ u}`~u}r|I{\z%xyw.v 9t\ usqrpMl6hon m[l  2k.  ijh   g" id="q12_3_438" au="dyg" cDate="2017-08-10T10:19:04" mDate="2017-08-10T10:19:04" loc="start=1311 end=1401 startpage=0 endpage=0">
                    <content size="90">
                        <p>R  q    u 6    q  K \z qyw   URq    \ u}`~u}r|I{\z%xyw.v 9t\ usqrpMl6hon m[l  2k.  ijh   g</p>
                    </content>
                </q>
                <q name="1E&#776; A&#778;cI&#776;^A&#770;CA&#768;-I&#770; I&#769; I&#768;&#172;A&#771;;E&#776;^A&#778;E&#770;E&#769;eA&#768; E&#768;KE&#768;oA&#771;C&#807;&#198; A&#778;2A&#776; A&#771;^A&#770;KA&#770;CA&#768;A&#769;" id="q12_4_439" au="dyg" cDate="2017-08-10T10:19:38" mDate="2017-08-10T10:19:38" loc="start=864 end=936 startpage=0 endpage=0">
                    <content size="72">
                        <p>1E&#776; A&#778;cI&#776;^A&#770;CA&#768;-I&#770; I&#769; I&#768;&#172;A&#771;;E&#776;^A&#778;E&#770;E&#769;eA&#768; E&#768;KE&#768;oA&#771;C&#807;&#198; A&#778;2A&#776; A&#771;^A&#770;KA&#770;CA&#768;A&#769;</p>
                    </content>
                </q>
                <q name="K]GN Yc&#807;XRWRW6V9 &#769;rX%O&#771;6V&#177;&#222;Ke&#769;Ge&#768;c&#807;&#956;}a&#776;9a&#776;9a&#776;}a&#770;\&#956;}&#222;&#223;&#956; SRP-Ec&#807;XbY[QKS`XK]-&#230;ef ]%N6V^L VrXO&#769;a&#778;6&#956;a&#768;Ka&#776;&#8230;" id="q12_5_440" au="dyg" cDate="2017-08-10T10:20:01" mDate="2017-08-10T10:20:08" loc="start=592 end=862 startpage=0 endpage=0">
                    <content size="270">
                        <p>K]GN Yc&#807;XRWRW6V9 &#769;rX%O&#771;6V&#177;&#222;Ke&#769;Ge&#768;c&#807;&#956;}a&#776;9a&#776;9a&#776;}a&#770;\&#956;}&#222;&#223;&#956; SRP-Ec&#807;XbY[QKS`XK]-&#230;ef ]%N6V^L VrXO&#769;a&#778;6&#956;a&#768;Ka&#776;9a&#776;9a&#776;a&#768;fC&#807;a&#771;rU&#770;6&#956; SRPa&#769;a&#768;e&#776;e&#768;C&#807;a&#770;c&#807;&#956;\&#956;ee&#770;6Qa&#769;a&#768;-EuO&#771;C&#222;TQ&#223;&#956;IE%EY&#769; c&#807;X  &#769;6XU&#776;U&#770;bYFN6X9XGO&#771;N&#771;KL</p>
                        <p>fbU&#769;+U&#768;'&#216;&#215;E6XGN\Q&#215;O&#776;rX%O&#771;OH%N  &#769;6XN&#771;SRP&gt;E\V$Y6XKS^O&#770;.XbY XO&#769;? &#956;}2 c{O&#768;;N9XN&#771;</p>
                    </content>
                </q>
                <q name="-  yw?wo  G o&#771;v% ux o&#769; wRq&#248; &#772;&#956;  cwM  &#247;2 %x+o&#776; 1o&#769;o&#770;w\zu&#768;o&#771; w.v% Iwux2 Oo&#769;uv&gt; ^o&#769;o&#770;wE\Vo&#768; n&#771;Si&#776;P&#215;XGO&#771;&#8230;" id="q12_6_441" au="dyg" cDate="2017-08-10T10:23:13" mDate="2017-08-10T10:23:13" loc="start=362 end=587 startpage=0 endpage=0">
                    <content size="225">
                        <p>-  yw?wo  G o&#771;v% ux o&#769; wRq&#248; &#772;&#956;  cwM  &#247;2 %x+o&#776; 1o&#769;o&#770;w\zu&#768;o&#771; w.v% Iwux2 Oo&#769;uv&gt; ^o&#769;o&#770;wE\Vo&#768; n&#771;Si&#776;P&#215;XGO&#771;jV &#956;&#240;e&#770;jQ?EuO&#771;TQIE%Ec&#807;X  &#769;6XbY6XGO&#771;KLKWi&#776;WjV&gt;N6V^]%N ]u &#769;^H E &#956; QGN J\QGO&#771; e&#770;i&#770;U&#770; ]GNjV^LCNIEc&#807;X%N%O&#771;TQK]IE1XK]GN&#215;XKSi&#769;O&#770; Xi&#768;</p>
                    </content>
                </q>
                <q name="}2 y{O&#768;  &#187;^ &#807;  &#182;     &#187;^ &#807; Si&#776;PMJ &#187;^ &#807;w\zOo&#769; w  o&#769;&#254; ^o&#769;o&#770;w[ +v&#161;v q ` qx2 +o&#776; 2   &#254;x2  &#247; .x z. %xyw^o&#769;&#8230;" id="q12_7_442" au="dyg" cDate="2017-08-10T10:24:08" mDate="2017-08-10T10:24:08" loc="start=2 end=339 startpage=0 endpage=0">
                    <content size="337">
                        <p>}2 y{O&#768;  &#187;^ &#807;  &#182;     &#187;^ &#807; Si&#776;PMJ &#187;^ &#807;w\zOo&#769; w  o&#769;&#254; ^o&#769;o&#770;w[ +v&#161;v q ` qx2 +o&#776; 2   &#254;x2  &#247; .x z. %xyw^o&#769;.vo&#770;w9tuxus[ q rp   o&#776;I    o&#771;yw  wj y&#776;   c G u o&#771;R Rqv% Oo&#769;&#254;xE&#770;o&#769; o&#770;wRq^o&#769;o&#770;w&#248; &#164;o&#776;&#956;I a yw  q7 yw\z&#169;&#247;%x&#254; 2 Iw%xRq1&#8260;4+o&#776;Kae y&#769;o&#769;o&#770;w  y     &#177;  o&#769;^o&#769;o&#770;wo&#770;w\z xo&#771;. w w1&#8260;4.v.o&#776;% Iz w&#254;xFw2 [o&#769;Oo&#769;quv11&#8260;2&gt; ^o&#769; w&#169;u&#776;;o&#776;1&#8260;43&#8260;4u&#770;I Ka-w u&#769;[o&#769; u&#769;q. [l&#248;</p>
                    </content>
                </q>
                <q name="10 10 99" id="q12_8_443" au="dyg" cDate="2017-08-10T10:24:22" mDate="2017-08-10T10:24:22" loc="start=6 end=14 startpage=1 endpage=1">
                    <content size="8">
                        <p>10 10 99</p>
                    </content>
                </q>
                <q name="\Qi&#776;P%Nf6V EuO&#771;6X9XOHGNRWRPjVT_$]&#254; &#769; WTVjV6X^S&gt;O&#771;i&#769;O&#770;9XGNX e&#770;O]c&#807;V%N S`X%O&#771;TQRP6VGNjV e&#770;^H{GNRPe&#770;IEj&#8230;" id="q12_9_444" au="dyg" cDate="2017-08-10T10:24:52" mDate="2017-08-10T10:24:52" loc="start=185 end=991 startpage=1 endpage=1">
                    <content size="806">
                        <p>\Qi&#776;P%Nf6V EuO&#771;6X9XOHGNRWRPjVT_$]&#254; &#769; WTVjV6X^S&gt;O&#771;i&#769;O&#770;9XGNX e&#770;O]c&#807;V%N S`X%O&#771;TQRP6VGNjV e&#770;^H{GNRPe&#770;IEjQrX  K]-&#230; Yi&#769;S e&#770;jV{a&#164; &#807; Cf2O&#769; { S\Qfi&#776;P%NjVX O&#771;9XbY%N[Qi&#776;PKS&gt;N&gt;Eb \V XKS S9X`XIEK] Q%NK]u &#769;$SRP Ya^SE6VTV XOH SRW9XjVIET_ QK]7 &#807;&#254; &#769;e&#776;N1XIERW6X. &#769;i&#776;WuO&#771;RWRP6V. &#769;$J YIE6XK] ] E%Ni&#776;P\V&gt;dKY ]  GNRP SRP&gt;d</p>
                        <p>XbY[QKSFXO]%N-E P;XRW. &#769;uO&#771;RP. &#769;n&#771;Yc&#807;XK]IETV i&#768; f L\Q2Qi&#776;Wca.XRWRPO]&gt;d@XO]%N e&#770;jQ aMSTQRP%N6VuO&#771;9XGNRP&gt;N EuO&#771;^O&#770;FXK]GN@XGO&#771;\Q e&#770; X O&#769; Nb]TZRP%O&#771;$STQRP%N6V^H%Ni&#776;PIErXK]-&#230;   V { f.E6XKHi&#776;WjVT_CO&#771;\QIEGE6X  &#769;6X[Y6X%O&#771;KL;X%N6V9 &#769; P[Y^SRPCE6X\ZbYc&#807;X Y6XOS9X2  O&#771;6V i&#768; fe n&#771;Si&#776;P z%x-Eyw6X.vbY9t[Qus qKSrp;XK]%N1X%O&#771;jV E6XRW  &#769; O&#771;RP  &#769; Y6XKS9X2  O&#771;jV i&#768; f.E6XbY[QKSFXO]%N SRPK]GNRP&gt;d S&gt;d6QK]IE$XGO&#771;jVFEc&#807;X%NjVE&#770;JRP%N E6X ]%N6V^Lca NIE6XGN%O&#771;TQK]IE XK]-&#230;$fJO]%NRPGO&#771;\QTZRWjV1e&#770;6QSTQRPGNKH  &#769;6X[    UTU&#768; XGO&#771;KH\Zi&#776;P</p>
                    </content>
                </q>
                <q name="fS\QRPGN  &#769;^HbYi&#769;SRP  O&#769;VMJMJ+XRW-E PO]%N`X2_6Q%O&#771;KL`X &#772;    3i i6h" id="q12_10_445" au="dyg" cDate="2017-08-10T10:25:27" mDate="2017-08-10T10:25:27" loc="start=3894 end=3960 startpage=2 endpage=2">
                    <content size="66">
                        <p>fS\QRPGN  &#769;^HbYi&#769;SRP  O&#769;VMJMJ+XRW-E PO]%N`X2_6Q%O&#771;KL`X &#772;    3i i6h</p>
                    </content>
                </q>
                <q name="2X2_RPGNjV Z9XKSyabS\QKS`XGO&#771;jV&gt;EuN[]\Zi&#776;P9X-d`XTZbY6X WRW6V;NjV^]GN&#215;N. &#769;\Vye&#770; FXK]%N QGN`XKHbY &#182;&#8230;" id="q12_11_446" au="dyg" cDate="2017-08-10T10:26:14" mDate="2017-08-10T10:26:14" loc="start=3102 end=3846 startpage=2 endpage=2">
                    <content size="744">
                        <p>2X2_RPGNjV Z9XKSyabS\QKS`XGO&#771;jV&gt;EuN[]\Zi&#776;P9X-d`XTZbY6X WRW6V;NjV^]GN&#215;N. &#769;\Vye&#770; FXK]%N QGN`XKHbY &#182;    &#187;^ &#807; Si&#776;PMJ &#187;^ &#807;&gt;E N  &#769;O&#769; P[Y\VuO&#771;GNbSTQ  &#769; fEP2XK]KHi&#776;W%NjVT_ Y^SM &#807;6V&gt;N? IEEc&#807;Xc&#807;XRWRW\Z6VbY6X$JIE$Q&#161;XedINK]%N`N E ]\V%Ni&#776;P6Xi&#776;W&gt;d@N6VX&#164;XbY2_9V[Q^]KSFNFO&#771;IETQ e&#770;i&#769;H 7J}a&#223; y{QO&#768;GN J&#187;\Q^ &#807;GO&#771; e&#770;2 X TZ  bY6X X&#177;K]`XRW%NTZ&#164;XKSIERPP E&gt;d1&#8260;4MV%O&#771;9X K] O&#769;GN\Q  rNjVJ^]TQGN%O&#771; e&#770;1&#8260;47XFXKa ERW^HO&#769;jVV9 &#769;^]c&#807;Xu &#769;\V6XEPGO&#771;EP  K] &#772;S-&#230;RP</p>
                        <p>E6XbY[QOS Wi&#776;WjVrZKSTQMJjV2 X%O&#771;\Q J%O&#771;9XK]GN%O&#771;aKH f2Y6XGNKHKLMJaTQ  &#769; W%N  &#769;c&#807;X%O&#771;1&#8260;4%O&#771;KaTQ  &#769;`XGO&#771;jV &#772; &#164;Q%NCN  &#769;6X^LIEc&#807;X%O&#771;M]GNRP&gt;d&#169; n&#771;Si&#776;P"E6X[Y[QKS-O&#771;TQ e&#770;EC    e&#770;jQ-E Nb]TZRP9Xed XK]-&#230;ef &#177;        U&#776;   3&#8260;4Y^S6V &#177;      A&#769; 2  LTQ2QRWya XRWi&#776;PK]&gt;d XO]%NCe&#770;6Qn&#771;STQRPGNjVuO&#771;+X%NRP&gt;N EuO&#771;^O&#770;`XK]%NeO&#771;9X%N e&#770;&gt;D    6vjz</p>
                    </content>
                </q>
                <q name="fTU&#768;         7o\ E^S\Qi&#776;P%NjV O&#771;9X%Ni&#776;PMoCO&#771;9X%N e&#770;9V&gt;EKY WTQK]FV$JMJ9Xi&#776;W`XK]%NrXIE2Q^LKLOH2   v q+&#8230;" id="q12_12_447" au="dyg" cDate="2017-08-10T10:27:25" mDate="2017-08-10T10:27:25" loc="start=2984 end=3097 startpage=2 endpage=2">
                    <content size="113">
                        <p>fTU&#768;         7o\ E^S\Qi&#776;P%NjV O&#771;9X%Ni&#776;PMoCO&#771;9X%N e&#770;9V&gt;EKY WTQK]FV$JMJ9Xi&#776;W`XK]%NrXIE2Q^LKLOH2   v q+vG ^o&#769;o&#770;w\ o&#771;</p>
                    </content>
                </q>
                <q name="&#230;efe  d9XKS{Q%N&gt;N  &#769;6X^L E6X%O&#771;$]%Ni&#776;P&gt;d  &#182;^  &#956; S 6VFO&#771;TQ e&#770;b  &#956;{MQGN  J\Q%O&#771; e&#770;     ]%NjVi&#769;L&#215;N E6X%&#8230;" id="q12_13_448" au="dyg" cDate="2017-08-10T10:28:04" mDate="2017-08-10T10:28:13" loc="start=2044 end=2982 startpage=2 endpage=2">
                    <content size="938">
                        <p>&#230;efe  d9XKS{Q%N&gt;N  &#769;6X^L E6X%O&#771;$]%Ni&#776;P&gt;d  &#182;^  &#956; S 6VFO&#771;TQ e&#770;b  &#956;{MQGN  J\Q%O&#771; e&#770;     ]%NjVi&#769;L&#215;N E6X%NGO&#771;\QK] E`XK]%N e&#770;jQ-N[]\Zi&#776;P9X-d1XK]%N-E P   &#956; &#187;^ &#807;^  L\Q2Qi&#776;Wca Xi&#776;WRPK]&gt;d1XK]%N e&#770;jQ$S\Qi&#776;P%N6V  uO&#771;9X }GNRP {$]%N`~ya U&#768;  $  XO]%N O&#771;+X%N e&#770;c&#807;VNjV^]GN@X2_6QGO&#771;KLMQ%N;N[SjV&gt;d rX} {#f`~e  d9XKSrXK]%N$Y6XRWi&#776;W1&#8260;4jV9 &#769;;E P Y6X[YKY\V]%NRP &gt;d}  {MXO]`~-&#230;&gt;f&#956;  &#187;^ &#807; &#772;SjVi&#769;]%N O&#771;+X%NjVc&#807;X%O&#771;\Z-EP&#956;&#187;^ &#807; Y W\Q`XK]GN e&#770; P&#956;  &#187;^ &#807;  U&#956;&#187;^ &#807;;E\V Yc&#807;X%N jVOY2LOHan&#771;Y^S6V&#956;  &#187;^ &#807;a ]%Ni&#776;P&gt;d1&#8260;47Y6XKaGO&#771;jV^LMJTQ{  &#769;</p>
                        <p>XGO&#771;jV&#187; oc &#807;F&#183;1&#8260;4 &#182; &#956;FE6XbY[QOSoWi&#776;WjVe&#776;e&#770;jQ&gt;Ea6XKHi&#776;WjVT_1&#8260;4i&#769;a&#956;&#187;^ &#807; Y WTQ1&#8260;4 XK]%N Y^S6VK XMJRPGN XMJ6V%E&#161;XK]a%NFN6V 1&#8260;4KaJ\QGO&#771; e&#770; Y c&#807;X%N9Xi&#776;W9XbY{ Y^S6V   Q%N1&#8260;4[SKaRPMY6X[Y^HRW  &#769;i&#769;SRPO&#769;&#215;EP i&#770;&#182;M   &#187;^ &#807; SRP1&#8260;4MJ &#187;^ &#807;rNjV^]GN ]u &#769;^HIE &#776; A&#769;Si&#776;PX[Y[QKS2  STQRP%N6VuO&#771;9XGNRP ]GNca U&#768;  &#169;   qyw"   b XO]%N Sc!fe n&#771;Y WTQ`XK]%N`XS\Q&#177;i&#776;P%N6VuO&#771;9XGNRP1&#8260;4$]%Nya7  XK]%N$Si&#776;P1&#8260;4 Yi&#769;a6X J%O&#771;\Q e&#770; &#772; &#215;N9X ErXK]%N&gt;N9XN&#771;afTU&#768;     7oCO&#771;9XbYPIE^STQ   .</p>
                    </content>
                </q>
                <q name="bY EP^Hi&#776;WIE  &#769;6X^SK]RPGN\Q&gt;NTQ^LKS ]&gt;E6X`X2QK]bYGN S  \Q d$Y9X6XKSIETV SO&#769;RP E O&#771;\Q E%E6X  &#769;c&#807;XbY6X&#8230;" id="q12_14_449" au="dyg" cDate="2017-08-10T10:28:27" mDate="2017-08-10T10:28:36" loc="start=1338 end=2042 startpage=2 endpage=2">
                    <content size="704">
                        <p>bY EP^Hi&#776;WIE  &#769;6X^SK]RPGN\Q&gt;NTQ^LKS ]&gt;E6X`X2QK]bYGN S  \Q d$Y9X6XKSIETV SO&#769;RP E O&#771;\Q E%E6X  &#769;c&#807;XbY6X%O&#771;OLoWi&#776;WjV &#772;]%Ni&#776;P&gt;d &#956;$Q%N JTQ%O&#771; e&#770; ]%N6V^LFNIEc&#807;X%N%O&#771;TQK]IE&#164;XO]%NFN1&#8260;4KHO&#769;&gt;  &#956;}a{Xa\ZbYc&#807;XS6VFE PrX%O&#771;9XK]-&#230;;U PRPi&#776;P{X E\V </p>
                        <p>f E P E6XK]GN\Q^L   ] XK]GN$S\Q7Y6X E\VO&#769;Y6XGNKHKLMJTQ  &#769; WGN  &#769;6X%O&#771; GO&#771;\Q  &#769;&gt;EP &#772; U&#776;d9XKSFXK]GN Q%NeN  &#769;6X^LIE6XGO&#771;M]%N i&#776;P&gt;d} {&#956;&#187;^ &#807;K  S+XK]-&#230;CfEc&#807;XbY^HRW. &#769; ^SRP{  U&#776;d9X KS</p>
                        <p>%</p>
                        <p>Si&#776;P"EuO&#771;TQIEGE6X  &#769;6XbYc&#807;X%O&#771;KL WRWjVE&#770;]%NRP&gt;d[  &#956; Q%NJTQ%O&#771; e&#770;M]%N6V^L-N E6X%NGO&#771;\QK] E`XK]GNE&#770;Yi&#769;SjV  &#956;1&#8260;4aXTZbY6X$SjVeE PaFXGO&#771;9XK]-&#230; UPRPX E\V f2XKHGO&#771;%N-EPJi&#776;PjV W. &#769;&gt;E PK]GNK E P E6XK]GN\Q^L ]`XK]%N  O&#769;  S+XK]-&#230;Cf  &#956;}a{X\ZbY6X&#164;QKS-EPFX%O&#771;9XO]-&#230;CU P{X E\V </p>
                        <p>  { f E6X E\V9 &#769; %&amp;X%O&#771;jVX%O&#771;9XK</p>
                    </content>
                </q>
                <q name="fbV JMJ 9XRW`X{K]GNCe&#770;jQ&gt;NGO&#771;jV^L;NIE O&#771;^O&#770;" id="q12_15_450" au="dyg" cDate="2017-08-10T10:29:19" mDate="2017-08-10T10:29:19" loc="start=3850 end=3893 startpage=2 endpage=2">
                    <content size="43">
                        <p>fbV JMJ 9XRW`X{K]GNCe&#770;jQ&gt;NGO&#771;jV^L;NIE O&#771;^O&#770;</p>
                    </content>
                </q>
                <q name="c&#807;X%O&#771;KH E^S9X-E^]GN\ZKS9Xi&#776;W `X\ZbY6X`X2_i&#776;P%NjV Z9XKSyabS\QOS?e&#770;6Q&gt;N  &#769; \Vye&#770;FXK]GN?U2X%NTQKS{{Q%N&#8230;" id="q12_16_451" au="dyg" cDate="2017-08-10T10:30:37" mDate="2017-08-10T10:30:37" loc="start=1 end=910 startpage=2 endpage=2">
                    <content size="909">
                        <p>c&#807;X%O&#771;KH E^S9X-E^]GN\ZKS9Xi&#776;W `X\ZbY6X`X2_i&#776;P%NjV Z9XKSyabS\QOS?e&#770;6Q&gt;N  &#769; \Vye&#770;FXK]GN?U2X%NTQKS{{Q%N J\Q%O&#771; e&#770;$]%N 6V^L2W6V9 &#769; PGN9XK]%NTQ^L ]O&#769;FXK]GN SjVi&#769;]%N O&#771;+X%N%O&#771;TQK]IECEPE&#770;(*QGNJ TQ%O&#771; e&#770;7]GNjV^L{;XK]GN&#223; S9X K]-&#230;Cf XGO&#771;KH\Zi&#776;P X9XIEa{N6V ZOSRP[_RP%O&#771;GO&#771;jVW+X%NjVE&#770;JRP%Ni&#776;WKH;X%O&#771;\Q e&#770;.X Ce&#770;jQ-NOH\Q Y^SjV&#164;QGNbSi&#776;P&#215;EuO&#771;+XbY^SjVe&#776;dEi&#769;LjV^]GO&#771;9X^LS+X K]%N SRP&gt;E P;NRPrXIE O&#771;KH\Q  &#769;"e&#770;jQa|()X[Y[QKS V E&#770;Q%NMQTZ7QGN  &#215;E6X2_9V6XRW;NIE O&#771;^O&#770;&#215;NjVi&#769;]%N QGN U&#770;A&#769;]GNjV^L;O&#771;9XGN%O&#771;\QO]IE WjV9 &#769; P%N9XK]GN\Q^L ]7V;E PrX%O&#771;9XO]%N XIE Q^LKLKH2  f   SRP QGN J\Q%O&#771; e&#770; ]GNjV^L1NIE6XGN%O&#771;\QO]IE   XO]}%N2 y{&gt;E P a n&#771;QGN&gt;N  &#769;6X^LIEc&#807;X%O&#771; ]GNRP&gt;dK  y&#769;&#182;&#164;   &#187;^ &#807; SRP JC&#807;EP&#187;^ &#807; X E2QK]&gt;dK Q%NJ\QaGO&#771; e&#770;n&#771;]%N6V^L;NIE6XGN%O&#771;\QO]IE XO]%N?f2XfcPK O&#768;</p>
                        <p>  &#177;   &#182;     1&#8260;4   &#187;^ &#807;   Si&#776;PMJ &#177;   1&#8260;4Ka &#187;^ &#807;^  1&#8260;4 L\Q2QRWya Xi&#776;WRPK]&gt;dFX1&#8260;4O]i&#769;a%N e&#770;jQMSTQRP%N6VuO&#771;9X aGNRP$]%Nya\o?O&#771;9XGN e&#770;c&#807;V;N6V^]%NFX2_6QGO&#771;KL QGN&gt;NbS6V&gt;dFXedb  a d6Q&#215;O&#776;</p>
                    </content>
                </q>
                <q name="Quotation 12:17" id="q12_17_452" au="dyg" cDate="2017-08-10T10:30:45" mDate="2017-08-10T10:30:45" loc="x=214 y=509 width=142 height=142 page=3"/>
                <q name="&#182;7&#956;v%    R \z`x2 +o&#776;  &#956;}2 c{O&#768;  &#956;&#187;^ &#807;o&#769; wRq&#248;v% Iw\zq &#247; x.  wC  &gt;   Gxb 2 +v z~  qcw.  +o&#776;2w[o&#769;q. &#248;&#8230;" id="q12_18_453" au="dyg" cDate="2017-08-10T10:31:11" mDate="2017-08-10T10:31:11" loc="start=1160 end=1380 startpage=3 endpage=3">
                    <content size="220">
                        <p> &#182;7&#956;v%    R \z`x2 +o&#776;  &#956;}2 c{O&#768;  &#956;&#187;^ &#807;o&#769; wRq&#248;v% Iw\zq &#247; x.  wC  &gt;   Gxb 2 +v z~  qcw.  +o&#776;2w[o&#769;q. &#248;  j  qyw\z       o&#769;o&#770;wRq&#248; r   } { |i&#770;o&#769;o&#771;zGx 1&#8260;4  Iw. G &#254;x q z     .x   z%xyw.v9tusqrp&#247;Oo&#769;  wRq.x2    ;  u&#776; u&#769;[l6h i[l  &#163;</p>
                    </content>
                </q>
                <q name="PMS\Qi&#776;P%N6VuO&#771;9XGNRP&gt;NIETV W`XK]-&#230;Cf.E^S\Qi&#776;P%NjV O&#771;9X%Ni&#776;P  O&#771;TQ e&#770;&quot;E^SKHGO&#771;n&#771;LTQ2QRWya XRWi&#776;PK]O&#769;&#8230;" id="q12_19_454" au="dyg" cDate="2017-08-10T10:31:23" mDate="2017-08-10T10:31:23" loc="start=638 end=1156 startpage=3 endpage=3">
                    <content size="518">
                        <p> PMS\Qi&#776;P%N6VuO&#771;9XGNRP&gt;NIETV W`XK]-&#230;Cf.E^S\Qi&#776;P%NjV O&#771;9X%Ni&#776;P  O&#771;TQ e&#770;"E^SKHGO&#771;n&#771;LTQ2QRWya XRWi&#776;PK]O&#769;&gt;d`XK]-&#230;Cf   &#772;&#182;M&#956;&gt;E6XbY[QKSf Wi&#776;W9NjV[SjV;O&#771;KY\Q e&#770;^S OH&#956;bY}6X&#223; %O&#771;y{ O&#768;WRW  6V^H%N&#956;&#187;. &#769;\V^ &#807;O&#769;</p>
                        <p> E^STQRPGNjVuO&#771;+X%NRP;U&#768;   !O&#771;9XGN e&#770;C&#807;D?f.E^S\Qi&#776;P%NjV O&#771;9X%Ni&#776;PCO&#771;9X%N6V W&#164;SRP Y6X\ZKS6V^]u &#769;FXN\QKSOWRWRP&gt;d EuN[]\ZRP+X-d;XIE6XK]-&#230; f2Yc&#807;X%NKH KL J\Q  &#769;i S1&#8260;4 i9X6h9X X2_c&#807;Vi&#769;]-E6XbY[QKSFU&#768;   oCO&#771;TQ e&#770;E&#770;]GNjV^L&gt;N E6X%NGO&#771;\QK] E e&#770;jQCEuN[]\ZRP+X-db  S\QRPGNjV O&#771;9X%Ni&#776;Pn&#771;]GNca\o&gt;XO]%N-O&#771;+X%N e&#770;c&#807;V^  U&#768; V$JMJ+X N&#771;     3</p>
                    </content>
                </q>
                <q name="I&#769;C  &#198;I&#768;  A&#778;cI&#776;;  A&#771;II&#769;1  &#208;&gt;A&#768;A&#769;&#191;A&#771;&#208;%I&#776;" id="q12_20_455" au="dyg" cDate="2017-08-10T10:31:39" mDate="2017-08-10T10:35:40" loc="start=1861 end=1902 startpage=3 endpage=3">
                    <content size="41">
                        <p>  I&#769;C  &#198;I&#768;  A&#778;cI&#776;;  A&#771;II&#769;1  &#208;&gt;A&#768;A&#769;&#191;A&#771;&#208;%I&#776;</p>
                    </content>
                </q>
                <q name="f    ZRW9a&#776;   {#$E P-EWRW6V9 &#769;q &#772;&#174;   w  2z%xyw&#173;C&#171;?WRW6VFO&#771;TQ e&#770;C&#807;X JRP%N W6VuNTQ%N`XK]%N2  XMJRPGN&#8230;" id="q12_21_456" au="dyg" cDate="2017-08-10T10:34:05" mDate="2017-08-10T10:34:05" loc="start=361 end=636 startpage=3 endpage=3">
                    <content size="275">
                        <p>f    ZRW9a&#776;   {#$E P-EWRW6V9 &#769;q &#772;&#174;   w  2z%xyw&#173;C&#171;?WRW6VFO&#771;TQ e&#770;C&#807;X JRP%N W6VuNTQ%N`XK]%N2  XMJRPGN    Zi&#776;W{#$E6X2 VuNM]u &#769; PK]&gt;d{ X  &#769;i&#769;S\Q q &#772;&#174;   w  2zGxcw&#173;C&#171;7EWRWjV+ &#769;  ]&#254; &#769;TV6X?    EPLTQ2QRWya XRWi&#776;PK]&gt;d$XK]%N1e&#770;jQ`E^S\Qi&#776;P%N6VuO&#771;9XGNRP1e&#770;jQ O&#771;+XO&#769;JKH[SMXK]GNMX  &#769;^Si&#776;P2 "</p>
                    </content>
                </q>
                <q name="gKu&#770;bl &#163;u!" id="q12_22_457" au="dyg" cDate="2017-08-10T10:35:51" mDate="2017-08-10T10:35:51" loc="start=1792 end=1802 startpage=3 endpage=3">
                    <content size="10">
                        <p>gKu&#770;bl &#163;u!</p>
                    </content>
                </q>
                <q name="u&#770;6h6hKu&#770;&#164;hKu&#770;[lo  &#165; &#166; &#772;u&#770;     m[l6    lA&#769;u&#769;[l   &#166;og u&#769; &#165;   &#165;" id="q12_23_458" au="dyg" cDate="2017-08-10T10:36:13" mDate="2017-08-10T10:36:13" loc="start=302 end=363 startpage=4 endpage=4">
                    <content size="61">
                        <p>u&#770;6h6hKu&#770;&#164;hKu&#770;[lo  &#165; &#166; &#772;u&#770;     m[l6    lA&#769;u&#769;[l   &#166;og u&#769; &#165;   &#165;</p>
                    </content>
                </q>
                <q name="EP &#173;zy&#776; u F1&#8260;2 Q%N;E{ WRW6V9 &#769;eWRW6Vq O&#771; &#772;&#174;TQ   e&#770; w  @X2zGxMJcwi&#776;P%NCWjV N\QGN&#240;  V O&#771;%O&#771;6VA&#769;S6V@EP&#8230;" id="q12_24_459" au="dyg" cDate="2017-08-10T10:36:19" mDate="2017-08-10T10:36:19" loc="start=0 end=182 startpage=4 endpage=4">
                    <content size="182">
                        <p>EP &#173;zy&#776; u F1&#8260;2 Q%N;E{ WRW6V9 &#769;eWRW6Vq O&#771; &#772;&#174;TQ   e&#770; w  @X2zGxMJcwi&#776;P%NCWjV N\QGN&#240;  V O&#771;%O&#771;6VA&#769;S6V@EP Fe&#770; P`XMJRPGN U&#768;{# Ec&#807;X2 V{uN XOHRWjVT_ Xq2  &#772;&#174;V   w Z  OS2zRPGxIEcwTV6X%O&#771;. &#769;6XbY</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="MS03.pdf" id="pd_13_12" loc="doc_12" au="dyg" cDate="2017-08-16T19:13:37" mDate="2017-08-24T11:13:39" qIndex="">
            <quotations size="23">
                <q name="2.2 Mergesort" id="q13_1_460" au="dyg" cDate="2017-08-16T19:15:17" mDate="2017-08-16T19:15:17" loc="start=110 end=123 startpage=2 endpage=2">
                    <content size="13">
                        <p>2.2 Mergesort</p>
                    </content>
                </q>
                <q name="The algorithms that we consider in this section is based on a simple operation known as merging: com&#8230;" id="q13_2_461" au="dyg" cDate="2017-08-16T19:15:31" mDate="2017-08-16T19:15:31" loc="start=131 end=290 startpage=2 endpage=2">
                    <content size="159">
                        <p>The algorithms that we consider in this section is based on a simple operation known as merging: combining two ordered arrays to make one larger ordered array.</p>
                    </content>
                </q>
                <q name="This operation immediately lends itself to a simple recursive sort method known as mergesort: to sor&#8230;" id="q13_3_462" au="dyg" cDate="2017-08-16T19:16:35" mDate="2017-08-16T19:16:35" loc="start=291 end=492 startpage=2 endpage=2">
                    <content size="201">
                        <p>This operation immediately lends itself to a simple recursive sort method known as mergesort: to sort an array, divide it into two halves, sort the two halves (recursively), and then merge the results.</p>
                    </content>
                </q>
                <q name="Mergesort guarantees to sort an array of N items in time proportional to N log N, no matter what the&#8230;" id="q13_4_463" au="dyg" cDate="2017-08-16T19:18:53" mDate="2017-08-16T19:18:53" loc="start=495 end=602 startpage=2 endpage=2">
                    <content size="107">
                        <p>Mergesort guarantees to sort an array of N items in time proportional to N log N, no matter what the input.</p>
                    </content>
                </q>
                <q name="prime disadvantage is that it uses extra space proportional to N." id="q13_5_464" au="dyg" cDate="2017-08-16T19:19:03" mDate="2017-08-16T19:19:03" loc="start=607 end=672 startpage=2 endpage=2">
                    <content size="65">
                        <p>prime disadvantage is that it uses extra space proportional to N.</p>
                    </content>
                </q>
                <q name="Abstract in-place merge." id="q13_6_465" au="dyg" cDate="2017-08-16T19:19:59" mDate="2017-08-16T19:19:59" loc="start=673 end=697 startpage=2 endpage=2">
                    <content size="24">
                        <p>Abstract in-place merge.</p>
                    </content>
                </q>
                <q name="The method merge(a, lo, mid, hi) in Merge.java puts the results of merging the subarrays a[lo..mid]&#8230;" id="q13_7_466" au="dyg" cDate="2017-08-16T19:20:09" mDate="2017-08-16T19:20:09" loc="start=700 end=879 startpage=2 endpage=2">
                    <content size="179">
                        <p>The method merge(a, lo, mid, hi) in Merge.java puts the results of merging the subarrays a[lo..mid] with a[mid+1..hi] into a single ordered array, leaving the result in a[lo..hi].</p>
                    </content>
                </q>
                <q name="While it would be desirable to implement this method without using a significant amount of extra spa&#8230;" id="q13_8_467" au="dyg" cDate="2017-08-16T19:27:47" mDate="2017-08-16T19:28:00" loc="start=880 end=1122 startpage=2 endpage=2">
                    <content size="242">
                        <p>While it would be desirable to implement this method without using a significant amount of extra space, such solutions are remarkably complicated. Instead, merge() copies everything to an auxiliary array and then merges back to the original.</p>
                    </content>
                </q>
                <q name="original" id="q13_9_468" au="dyg" cDate="2017-08-16T19:30:33" mDate="2017-08-16T19:30:33" loc="start=1112 end=1120 startpage=2 endpage=2">
                    <content size="8">
                        <p>original</p>
                    </content>
                </q>
                <q name="Merge.java is a recursive mergesort implementation based on this abstract in-place merge. It is one&#8230;" id="q13_10_469" au="dyg" cDate="2017-08-16T19:31:17" mDate="2017-08-16T19:32:14" loc="start=2 end=204 startpage=3 endpage=3">
                    <content size="202">
                        <p>Merge.java is a recursive mergesort implementation based on this abstract in-place merge. It is one of the best-</p>
                        <p>known examples of the utility of the divide-and-conquer paradigm for efficient algorithm </p>
                    </content>
                </q>
                <q name="design" id="q13_11_470" au="dyg" cDate="2017-08-16T19:32:24" mDate="2017-08-16T19:32:24" loc="start=204 end=210 startpage=3 endpage=3">
                    <content size="6">
                        <p>design</p>
                    </content>
                </q>
                <q name="Top-down mergesort uses between 1/2 N lg N and N lg N compares and at most 6 N lg N array accesses t&#8230;" id="q13_12_471" au="dyg" cDate="2017-08-16T19:32:53" mDate="2017-08-16T19:32:53" loc="start=409 end=515 startpage=3 endpage=3">
                    <content size="106">
                        <p>Top-down mergesort uses between 1/2 N lg N and N lg N compares and at most 6 N lg N array accesses to sort</p>
                    </content>
                </q>
                <q name="We can cut the running time of mergesort substantially with some carefully considered modifications&#8230;" id="q13_13_472" au="dyg" cDate="2017-08-16T19:35:44" mDate="2017-08-16T19:35:44" loc="start=251 end=373 startpage=3 endpage=3">
                    <content size="122">
                        <p>We can cut the running time of mergesort substantially with some carefully considered modifications to the implementation.</p>
                    </content>
                </q>
                <q name="Use insertion sort for small subarrays." id="q13_14_473" au="dyg" cDate="2017-08-16T19:40:52" mDate="2017-08-16T19:40:52" loc="start=0 end=39 startpage=4 endpage=4">
                    <content size="39">
                        <p>Use insertion sort for small subarrays.</p>
                    </content>
                </q>
                <q name="We can improve most recursive algorithms by handling small cases differently. Switching to insertion&#8230;" id="q13_15_474" au="dyg" cDate="2017-08-16T19:41:00" mDate="2017-08-16T19:41:00" loc="start=40 end=1178 startpage=4 endpage=4">
                    <content size="1138">
                        <p>We can improve most recursive algorithms by handling small cases differently. Switching to insertion sort for small subarrays will improve the running time of a typical mergesort implementation by 10 to 15 percent.</p>
                        <p>Test whether array is already in order. We can reduce the running time to be linear for arrays that are already in order by adding a test to skip call to merge() if a[mid] is less than or equal to a[mid+1]. With this change, we still do all the recursive calls, but the running time for any sorted subarray is linear. Eliminate the copy to the auxiliary array. It is possible to eliminate the time (but not the space) taken to copy to the auxiliary array used for merging. To do so, we use two invocations of the sort method, one that takes its input from the given array and puts the sorted output in the auxiliary array; the other takes its input from the auxiliary array and puts the sorted output in the given array. With this approach, in a bit of mindbending recursive trickery, we can arrange the recursive calls such that the computation switches the roles of the input array and the auxiliary array at each level.</p>
                    </content>
                </q>
                <q name="MergeBars.java provides a visualization of mergesort with cutoff for small subarrays." id="q13_16_475" au="dyg" cDate="2017-08-16T19:41:29" mDate="2017-08-16T19:41:29" loc="start=1223 end=1308 startpage=4 endpage=4">
                    <content size="85">
                        <p>MergeBars.java provides a visualization of mergesort with cutoff for small subarrays.</p>
                    </content>
                </q>
                <q name="Bottom-up mergesort." id="q13_17_476" au="dyg" cDate="2017-08-16T19:42:08" mDate="2017-08-16T19:42:08" loc="start=1324 end=1344 startpage=4 endpage=4">
                    <content size="20">
                        <p>Bottom-up mergesort.</p>
                    </content>
                </q>
                <q name="Even though we are thinking in terms of merging together two large subarrays, the fact is that most&#8230;" id="q13_18_477" au="dyg" cDate="2017-08-16T19:43:01" mDate="2017-08-16T19:43:08" loc="start=0 end=728 startpage=5 endpage=5">
                    <content size="728">
                        <p>Even though we are thinking in terms of merging together two large subarrays, the fact is that most merges are merging together tiny subarrays. Another way to implement mergesort is to organize the merges so that we do all the merges of tiny arrays on one pass, then do a second pass to merge those arrays in pairs, and so forth, continuing until we do a merge that encompasses the whole array. This method requires even less code than the standard recursive implementation. We start by doing a pass of 1-by-1 merges (considering individual items as subarrays of size 1), then a pass of 2-by-2 merges (merge subarrays of size 2 to make subarrays of size 4), then 4-by-4 merges, and so forth. MergeBU.java is an implementation of</p>
                    </content>
                </q>
                <q name="bottom-up mergesort." id="q13_19_478" au="dyg" cDate="2017-08-16T19:43:22" mDate="2017-08-16T19:43:22" loc="start=729 end=749 startpage=5 endpage=5">
                    <content size="20">
                        <p>bottom-up mergesort.</p>
                    </content>
                </q>
                <q name="Bottom-up mergesort uses between 1/2 N lg N and N lg N compares and at most 6 N lg N array accesses&#8230;" id="q13_20_479" au="dyg" cDate="2017-08-16T19:43:40" mDate="2017-08-16T19:43:40" loc="start=752 end=859 startpage=5 endpage=5">
                    <content size="107">
                        <p>Bottom-up mergesort uses between 1/2 N lg N and N lg N compares and at most 6 N lg N array accesses to sort</p>
                    </content>
                </q>
                <q name="No compare-based sorting algorithm can guarantee to sort N items with fewer than lg(N!) ~ N lg N com&#8230;" id="q13_21_480" au="dyg" cDate="2017-08-16T19:44:05" mDate="2017-08-16T19:44:05" loc="start=896 end=1003 startpage=5 endpage=5">
                    <content size="107">
                        <p>No compare-based sorting algorithm can guarantee to sort N items with fewer than lg(N!) ~ N lg N compares.</p>
                    </content>
                </q>
                <q name="Mergesort is an asymptotically optimal compare-based sorting algorithm. That is, both the number of&#8230;" id="q13_22_481" au="dyg" cDate="2017-08-16T19:44:27" mDate="2017-08-16T19:44:27" loc="start=1018 end=1265 startpage=5 endpage=5">
                    <content size="247">
                        <p>Mergesort is an asymptotically optimal compare-based sorting algorithm. That is, both the number of compares used by mergesort in the worst case and the minimum number of compares that any compare-based sorting algorithm can guarantee are ~N lg N.</p>
                    </content>
                </q>
                <q name="Quotation 13:23" id="q13_23_482" au="dyg" cDate="2017-10-08T12:17:08" mDate="2017-10-08T12:17:08" loc="x=158 y=267 width=297 height=65 page=2"/>
            </quotations>
        </primDoc>
        <primDoc name="DJK01.pdf" id="pd_14_13" loc="doc_13" au="dyg" cDate="2017-08-17T09:33:24" mDate="2017-08-24T11:14:10" qIndex="">
            <quotations size="19">
                <q name="10.2 Dijkstra's Algorithm" id="q14_1_483" au="dyg" cDate="2017-08-17T09:33:38" mDate="2017-08-17T09:33:38" loc="start=0 end=25 startpage=0 endpage=0">
                    <content size="25">
                        <p>10.2 Dijkstra's Algorithm</p>
                    </content>
                </q>
                <q name="Djikstra's algorithm (named after its discover, E.W. Dijkstra)" id="q14_2_484" au="dyg" cDate="2017-08-17T09:34:50" mDate="2017-08-17T09:34:50" loc="start=26 end=89 startpage=0 endpage=0">
                    <content size="63">
                        <p>Djikstra's algorithm (named after its discover, E.W. Dijkstra) </p>
                    </content>
                </q>
                <q name="solves the problem of finding the shortest path from a point in a graph (the source) to a destinatio&#8230;" id="q14_3_485" au="dyg" cDate="2017-08-17T09:35:32" mDate="2017-08-17T09:35:32" loc="start=89 end=191 startpage=0 endpage=0">
                    <content size="102">
                        <p>solves the problem of finding the shortest path from a point in a graph (the source) to a destination.</p>
                    </content>
                </q>
                <q name="It turns out that one can find the shortest paths from a given source to all points in a graph in th&#8230;" id="q14_4_486" au="dyg" cDate="2017-08-17T09:38:00" mDate="2017-08-17T09:38:00" loc="start=192 end=385 startpage=0 endpage=0">
                    <content size="193">
                        <p>It turns out that one can find the shortest paths from a given source to all points in a graph in the same time, hence this problem is sometimes called the single-source shortest paths problem.</p>
                    </content>
                </q>
                <q name="The somewhat unexpected result that all the paths can be found as easily as one further demonstrates&#8230;" id="q14_5_487" au="dyg" cDate="2017-08-17T09:38:19" mDate="2017-08-17T09:38:19" loc="start=386 end=537 startpage=0 endpage=0">
                    <content size="151">
                        <p>The somewhat unexpected result that all the paths can be found as easily as one further demonstrates the value of reading the literature on algorithms!</p>
                    </content>
                </q>
                <q name="This problem is related to the spanning tree one." id="q14_6_488" au="dyg" cDate="2017-08-17T09:39:18" mDate="2017-08-17T09:39:18" loc="start=538 end=587 startpage=0 endpage=0">
                    <content size="49">
                        <p>This problem is related to the spanning tree one.</p>
                    </content>
                </q>
                <q name="The graph representing all the paths from one vertex to all the others must be a spanning tree - it&#8230;" id="q14_7_489" au="dyg" cDate="2017-08-17T09:59:11" mDate="2017-08-17T09:59:16" loc="start=588 end=841 startpage=0 endpage=0">
                    <content size="253">
                        <p>The graph representing all the paths from one vertex to all the others must be a spanning tree - it must include all vertices. There will also be no cycles as a cycle would define more than one path from the selected vertex to at least one other vertex.</p>
                    </content>
                </q>
                <q name="G = (V,E) where V is a set of vertices and E is a set of edges." id="q14_8_490" au="dyg" cDate="2017-08-17T09:59:24" mDate="2017-08-17T09:59:24" loc="start=855 end=918 startpage=0 endpage=0">
                    <content size="63">
                        <p>G = (V,E) where V is a set of vertices and E is a set of edges.</p>
                    </content>
                </q>
                <q name="Dijkstra's" id="q14_9_491" au="dyg" cDate="2017-08-17T10:01:55" mDate="2017-08-17T10:01:55" loc="start=919 end=929 startpage=0 endpage=0">
                    <content size="10">
                        <p>Dijkstra's</p>
                    </content>
                </q>
                <q name="algorithm keeps two sets of vertices: S the set of vertices whose shortest paths from the source hav&#8230;" id="q14_10_492" au="dyg" cDate="2017-08-17T10:03:31" mDate="2017-08-17T10:03:41" loc="start=930 end=1205 startpage=0 endpage=0">
                    <content size="275">
                        <p>algorithm keeps two sets of vertices:</p>
                        <p>S the set of vertices whose shortest paths from the source have already been</p>
                        <p>determined and</p>
                        <p>V- S</p>
                        <p>The other data structures needed are:</p>
                        <p>d array of best estimates of shortest path to each vertex pi an array of predecessors for each vertex</p>
                    </content>
                </q>
                <q name="The basic mode of operation is:" id="q14_11_493" au="dyg" cDate="2017-08-17T10:03:52" mDate="2017-08-17T10:03:52" loc="start=1205 end=1236 startpage=0 endpage=0">
                    <content size="31">
                        <p>The basic mode of operation is:</p>
                    </content>
                </q>
                <q name="Relaxation" id="q14_12_494" au="dyg" cDate="2017-08-17T10:04:03" mDate="2017-08-17T10:04:03" loc="start=1524 end=1534 startpage=0 endpage=0">
                    <content size="10">
                        <p>Relaxation</p>
                    </content>
                </q>
                <q name="The relaxation process updates the costs of all the vertices, v, connected to a vertex, u, if we cou&#8230;" id="q14_13_495" au="dyg" cDate="2017-08-17T10:04:22" mDate="2017-08-17T10:04:22" loc="start=1535 end=1726 startpage=0 endpage=0">
                    <content size="191">
                        <p>The relaxation process updates the costs of all the vertices, v, connected to a vertex, u, if we could improve the best estimate of the shortest path to v by including (u,v) in the path to v.</p>
                    </content>
                </q>
                <q name="The relaxation procedure proceeds as follows:" id="q14_14_496" au="dyg" cDate="2017-08-17T10:04:32" mDate="2017-08-17T10:04:32" loc="start=1727 end=1772 startpage=0 endpage=0">
                    <content size="45">
                        <p>The relaxation procedure proceeds as follows:</p>
                    </content>
                </q>
                <q name="This sets up the graph so that each node has no predecessor (pi[v] = nil) and the estimates of the c&#8230;" id="q14_15_497" au="dyg" cDate="2017-08-17T10:04:41" mDate="2017-08-17T10:04:41" loc="start=1919 end=2129 startpage=0 endpage=0">
                    <content size="210">
                        <p>This sets up the graph so that each node has no predecessor (pi[v] = nil) and the estimates of the cost (distance) of each node from the source (d[v]) are infinite, except for the source node itself (d[s] = 0).</p>
                    </content>
                </q>
                <q name="Note that we have also introduced a further way to store a graph (or part of a graph - as this struc&#8230;" id="q14_16_498" au="dyg" cDate="2017-08-17T10:05:36" mDate="2017-08-17T10:05:36" loc="start=2185 end=2465 startpage=1 endpage=1">
                    <content size="280">
                        <p>Note that we have also introduced a further way to store a graph (or part of a graph - as this structure can only store a spanning tree), the predecessor sub-graph - the list of predecessors of each node,</p>
                        <p>pi[j], 1 &lt;= j &lt;= |V| The edges in the predecessor sub-graph are (pi[v],v).</p>
                    </content>
                </q>
                <q name="The relaxation procedure checks whether the current best estimate of the shortest distance to v (d[v&#8230;" id="q14_17_499" au="dyg" cDate="2017-08-17T10:05:48" mDate="2017-08-17T10:05:48" loc="start=0 end=178 startpage=1 endpage=1">
                    <content size="178">
                        <p>The relaxation procedure checks whether the current best estimate of the shortest distance to v (d[v]) can be improved by going through u (i.e. by making u the predecessor of v):</p>
                    </content>
                </q>
                <q name="relax( Node u, Node v, double w[][] )" id="q14_18_500" au="dyg" cDate="2017-08-17T10:05:56" mDate="2017-08-17T10:05:56" loc="start=179 end=216 startpage=1 endpage=1">
                    <content size="37">
                        <p>relax( Node u, Node v, double w[][] )</p>
                    </content>
                </q>
                <q name="The algorithm itself is now:" id="q14_19_501" au="dyg" cDate="2017-08-17T10:06:07" mDate="2017-08-17T10:06:07" loc="start=297 end=325 startpage=1 endpage=1">
                    <content size="28">
                        <p>The algorithm itself is now:</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="MS05.pdf" id="pd_15_14" loc="doc_14" au="dyg" cDate="2017-08-17T10:21:34" mDate="2017-08-24T11:13:49" qIndex="">
            <quotations size="23">
                <q name="In lecture 6, we saw three algorithms for sorting a list of n items." id="q15_1_502" au="dyg" cDate="2017-08-17T10:22:29" mDate="2017-08-17T10:22:29" loc="start=92 end=160 startpage=0 endpage=0">
                    <content size="68">
                        <p>In lecture 6, we saw three algorithms for sorting a list of n items.</p>
                    </content>
                </q>
                <q name="We saw that, in the worst case, all of these algorithm required O(n2) operations." id="q15_2_503" au="dyg" cDate="2017-08-17T10:22:38" mDate="2017-08-17T10:22:38" loc="start=161 end=242 startpage=0 endpage=0">
                    <content size="81">
                        <p>We saw that, in the worst case, all of these algorithm required O(n2) operations.</p>
                    </content>
                </q>
                <q name="Such algorithms will be unacceptably slow if n is large." id="q15_3_504" au="dyg" cDate="2017-08-17T10:22:45" mDate="2017-08-17T10:22:45" loc="start=243 end=299 startpage=0 endpage=0">
                    <content size="56">
                        <p>Such algorithms will be unacceptably slow if n is large.</p>
                    </content>
                </q>
                <q name="To make this claim more concrete, consider that if n = 220 &#8776; 106 i.e one million, then n2 &#8776; 1012." id="q15_4_505" au="dyg" cDate="2017-08-17T10:22:53" mDate="2017-08-17T10:22:53" loc="start=300 end=397 startpage=0 endpage=0">
                    <content size="97">
                        <p>To make this claim more concrete, consider that if n = 220 &#8776; 106 i.e one million, then n2 &#8776; 1012.</p>
                    </content>
                </q>
                <q name="How long would it take a program to run that many instructions?" id="q15_5_506" au="dyg" cDate="2017-08-17T10:22:59" mDate="2017-08-17T10:22:59" loc="start=398 end=461 startpage=0 endpage=0">
                    <content size="63">
                        <p>How long would it take a program to run that many instructions?</p>
                    </content>
                </q>
                <q name="Today&#8217;s processors run at about 109 basic operations per second (i.e. GHz). So a problem that takes&#8230;" id="q15_6_507" au="dyg" cDate="2017-08-17T10:23:19" mDate="2017-08-17T10:23:19" loc="start=462 end=789 startpage=0 endpage=0">
                    <content size="327">
                        <p>Today&#8217;s processors run at about 109 basic operations per second (i.e. GHz). So a problem that takes in the order of 1012 operations would require thousands of seconds of processing time. Having a multicore machine with say 4 processors only can speed things up by a factor of 4 &#8211; max! &#8211; which doesn&#8217;t change the argument here.</p>
                    </content>
                </q>
                <q name="Here is the idea. If the list has just one number (n = 1), then do nothing. Otherwise, partition the&#8230;" id="q15_8_508" au="dyg" cDate="2017-08-17T10:23:57" mDate="2017-08-20T14:33:46" loc="start=936 end=1203 startpage=0 endpage=0">
                    <content size="267">
                        <p>Here is the idea. If the list has just one number (n = 1), then do nothing. Otherwise, partition the list of n elements into two lists of size about n/2 elements each, sort the two individual lists (recursively, using mergesort), and then merge the two sorted lists.</p>
                    </content>
                </q>
                <q name="For example, suppose we have a list" id="q15_9_509" au="dyg" cDate="2017-08-17T10:24:12" mDate="2017-08-17T10:24:12" loc="start=1203 end=1238 startpage=0 endpage=0">
                    <content size="35">
                        <p>For example, suppose we have a list</p>
                    </content>
                </q>
                <q name="Here is pseudocode for the algorithm. Note that it uses a helper method merge which in fact does mos&#8230;" id="q15_10_510" au="dyg" cDate="2017-08-17T10:25:00" mDate="2017-08-17T10:25:00" loc="start=1500 end=1614 startpage=0 endpage=0">
                    <content size="114">
                        <p>Here is pseudocode for the algorithm. Note that it uses a helper method merge which in fact</p>
                        <p>does most of the work.</p>
                    </content>
                </q>
                <q name="Here is the merge algorithm." id="q15_11_511" au="dyg" cDate="2017-08-17T10:27:08" mDate="2017-08-17T10:27:08" loc="start=82 end=110 startpage=1 endpage=1">
                    <content size="28">
                        <p>Here is the merge algorithm.</p>
                    </content>
                </q>
                <q name="Note that it has two phases. The first phase initializes a new list (empty), steps through the two l&#8230;" id="q15_12_512" au="dyg" cDate="2017-08-17T10:27:27" mDate="2017-08-17T10:27:27" loc="start=111 end=792 startpage=1 endpage=1">
                    <content size="681">
                        <p>Note that it has two phases. The first phase initializes a new list (empty), steps through the two lists, (list1) and (list2), compares the front element of each list and removes the smaller of the two, and this removed element to to the back of the merged list. See the detailed example in the slides for an illustration.</p>
                        <p>The second phase of the algorithm starts after one of list1 or list2 becomes empty. In this case, the remaining elements from the non-empty list are moved to list. This second phase uses two while loops in the above pseudocode, and note that only one of these two loops will be used since we only reach phase two when one of list1 or list2 is already empty.</p>
                    </content>
                </q>
                <q name="merge( list1,  list2){" id="q15_13_513" au="dyg" cDate="2017-08-17T10:27:42" mDate="2017-08-17T10:27:42" loc="start=792 end=814 startpage=1 endpage=1">
                    <content size="22">
                        <p>merge( list1,  list2){</p>
                    </content>
                </q>
                <q name="I have written the mergesort and merge algorithms using abstract list operations only, rather than s&#8230;" id="q15_14_514" au="dyg" cDate="2017-08-17T10:28:20" mDate="2017-08-17T10:28:20" loc="start=1216 end=1493 startpage=1 endpage=1">
                    <content size="277">
                        <p>I have written the mergesort and merge algorithms using abstract list operations only, rather than specifying how exactly it is implemented (array list versus linked list). Staying at an abstract level has the advantage of getting us quickly to the main ideas of the algorithm:</p>
                    </content>
                </q>
                <q name="what is being computed and in which sequence?" id="q15_15_515" au="dyg" cDate="2017-08-17T10:28:29" mDate="2017-08-17T10:28:29" loc="start=1494 end=1539 startpage=1 endpage=1">
                    <content size="45">
                        <p>what is being computed and in which sequence?</p>
                    </content>
                </q>
                <q name="However, be aware that there are disadvantages of hiding the implementation details, i.e. the data s&#8230;" id="q15_16_516" au="dyg" cDate="2017-08-17T10:28:48" mDate="2017-08-17T10:28:48" loc="start=1540 end=1741 startpage=1 endpage=1">
                    <content size="201">
                        <p>However, be aware that there are disadvantages of hiding the implementation details, i.e. the data structures. As we have seen, sometimes the choice of data structure can be important for performance.</p>
                    </content>
                </q>
                <q name="For example, compare an array versus a linked list implementation. The call getElements() within mer&#8230;" id="q15_17_517" au="dyg" cDate="2017-08-17T10:30:12" mDate="2017-08-17T10:30:12" loc="start=1741 end=2697 startpage=1 endpage=1">
                    <content size="956">
                        <p>For example, compare an array versus a linked list implementation. The call getElements() within mergesort would be different for these two data structures. For the array, getElements() might just compute the start and end indices for the two lists. These indices could be passed as parameters to the mergesort calls. For a linked list, it would be necessary to iterate through the list to find the location of the mid element, and one could then break up the list into the list1 and list2 with the mid list element being at the tail of list1 and the mid + 1 element being at the head of list2.</p>
                        <p>For the merge, if one were using an array, then one could use a second array (list) as a buffer for doing the merges. One could copy the elements from list1 and list2 to this second array. At the next level of the recursion, one could copy back to the first array, and go back and forth. So the space requirements would be double the size of the original list.</p>
                    </content>
                </q>
                <q name="mergesort is O(n log n)" id="q15_18_518" au="dyg" cDate="2017-08-17T10:30:38" mDate="2017-08-17T10:30:38" loc="start=2697 end=2720 startpage=1 endpage=1">
                    <content size="23">
                        <p>mergesort is O(n log n)</p>
                    </content>
                </q>
                <q name="There are log n levels of the recursion, namely the number of levels is the number of times that you&#8230;" id="q15_19_519" au="dyg" cDate="2017-08-17T10:30:54" mDate="2017-08-17T10:30:54" loc="start=2721 end=2921 startpage=1 endpage=1">
                    <content size="200">
                        <p>There are log n levels of the recursion, namely the number of levels is the number of times that you</p>
                        <p>can divide the list size n by 2 until you reach 1 element per list. The number of instructions that</p>
                    </content>
                </q>
                <q name="must be executed at each level of the recursion is proportional to the number n of items in the list&#8230;" id="q15_20_520" au="dyg" cDate="2017-08-17T10:31:12" mDate="2017-08-17T10:31:12" loc="start=82 end=363 startpage=2 endpage=2">
                    <content size="281">
                        <p>must be executed at each level of the recursion is proportional to the number n of items in the list. Thus, the total number of instructions is proportional to n &#8727; log2 n, or as usually written n log2 n. I will discuss this again a few lectures from now, when we study recurrences.</p>
                    </content>
                </q>
                <q name="To appreciate the difference between the number of operations for the earlier O(n2) sorting algorith&#8230;" id="q15_21_521" au="dyg" cDate="2017-08-17T10:31:47" mDate="2017-08-17T10:31:47" loc="start=364 end=529 startpage=2 endpage=2">
                    <content size="165">
                        <p>To appreciate the difference between the number of operations for the earlier O(n2) sorting algorithms versus O(n log n) for mergesort, consider the following table.</p>
                    </content>
                </q>
                <q name="Thus, the time it takes to run mergesort is significantly less than the time it takes to run bub- bl&#8230;" id="q15_22_522" au="dyg" cDate="2017-08-17T10:32:29" mDate="2017-08-17T10:32:29" loc="start=633 end=1157 startpage=2 endpage=2">
                    <content size="524">
                        <p>Thus, the time it takes to run mergesort is significantly less than the time it takes to run bub- ble/selection/insertion sort, when n becomes large. Very roughly speaking, on a computer that runs 109 operations per second running mergesort on a list of size n = 109 would take in the order of minutes, whereas running insertion sort would take centuries. (After class, one student asked me how I came up with such time estimates. That&#8217;s easy: just consider there are 60 seconds/minute, 60 minutes/hour, 24 hours/day, etc.)</p>
                    </content>
                </q>
                <q name="In the lectures slides, I went over an examples of how the various calls to mergesort and merge work&#8230;" id="q15_23_523" au="dyg" cDate="2017-08-17T10:32:37" mDate="2017-08-17T10:33:18" loc="start=1157 end=1593 startpage=2 endpage=2">
                    <content size="436">
                        <p>In the lectures slides, I went over an examples of how the various calls to mergesort and merge work. The tricky part is to see the order of the various recursive calls and exits. It is easy to understand this with pictures, so please see the slides. (We will many more examples of recursive algorithm later in the course when we look at trees and graphs, so if you don&#8217;t yet get this, then please be patient with yourself &#8211; you will!)</p>
                    </content>
                </q>
                <q name="Mergesort" id="q15_24_524" au="dyg" cDate="2017-08-20T14:33:16" mDate="2017-08-20T14:33:16" loc="start=82 end=91 startpage=0 endpage=0">
                    <content size="9">
                        <p>Mergesort</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
        <primDoc name="AVT05.pdf" id="pd_16_15" loc="doc_15" au="dyg" cDate="2017-08-17T10:50:18" mDate="2017-08-24T11:14:14" qIndex="">
            <quotations size="59">
                <q name="Binary Search Trees" id="q16_1_525" au="dyg" cDate="2017-08-17T10:50:57" mDate="2017-08-17T10:50:57" loc="start=1063 end=1082 startpage=1 endpage=1">
                    <content size="19">
                        <p>Binary Search Trees</p>
                    </content>
                </q>
                <q name="Binary Search Trees are not Unique The same data can yield different binary search trees" id="q16_2_526" au="dyg" cDate="2017-08-17T10:51:20" mDate="2017-08-17T10:51:20" loc="start=766 end=855 startpage=1 endpage=1">
                    <content size="89">
                        <p>Binary Search Trees are not Unique</p>
                        <p>The same data can yield different binary search trees</p>
                    </content>
                </q>
                <q name="1,2,4,5,8" id="q16_3_527" au="dyg" cDate="2017-08-17T10:51:27" mDate="2017-08-17T10:51:27" loc="start=863 end=872 startpage=1 endpage=1">
                    <content size="9">
                        <p>1,2,4,5,8</p>
                    </content>
                </q>
                <q name="BST in worst case &#8226; BST degenerated into linear sequence &#8226; expectednumberofcomparisonsis(n+1)/2" id="q16_4_528" au="dyg" cDate="2017-08-17T10:51:39" mDate="2017-08-17T10:52:06" loc="start=910 end=1006 startpage=1 endpage=1">
                    <content size="96">
                        <p>BST in worst case</p>
                        <p>&#8226; BST degenerated into linear sequence</p>
                        <p>&#8226; expectednumberofcomparisonsis(n+1)/2</p>
                    </content>
                </q>
                <q name="Balanced BST &#8226; height is O(log2 n) &#8226; O(log2n)comparisons" id="q16_5_529" au="dyg" cDate="2017-08-17T10:52:36" mDate="2017-08-17T10:52:39" loc="start=1006 end=1063 startpage=1 endpage=1">
                    <content size="57">
                        <p>Balanced BST</p>
                        <p>&#8226; height is O(log2 n)</p>
                        <p>&#8226; O(log2n)comparisons</p>
                    </content>
                </q>
                <q name="&#8226; Self balancing BST/height balanced BST" id="q16_7_530" au="dyg" cDate="2017-08-17T10:53:30" mDate="2017-08-17T10:53:30" loc="start=21 end=61 startpage=2 endpage=2">
                    <content size="40">
                        <p>&#8226; Self balancing BST/height balanced BST</p>
                    </content>
                </q>
                <q name="&#8226; AVL = Adelson-Velskii och Landis, 1962" id="q16_8_531" au="dyg" cDate="2017-08-17T10:53:39" mDate="2017-08-17T10:53:39" loc="start=62 end=102 startpage=2 endpage=2">
                    <content size="40">
                        <p>&#8226; AVL = Adelson-Velskii och Landis, 1962</p>
                    </content>
                </q>
                <q name="&#8226; The idea: Keep updated balance information in each node" id="q16_9_532" au="dyg" cDate="2017-08-17T10:53:47" mDate="2017-08-17T10:53:47" loc="start=103 end=160 startpage=2 endpage=2">
                    <content size="57">
                        <p>&#8226; The idea: Keep updated balance information in each node</p>
                    </content>
                </q>
                <q name="&#8226; AVLpropertyForeachinternalnodevinT,theheightsofthechildrenofvdifferbyatmost1...or alternatively. .&#8230;" id="q16_10_533" au="dyg" cDate="2017-08-17T10:54:00" mDate="2017-08-17T10:54:22" loc="start=161 end=294 startpage=2 endpage=2">
                    <content size="133">
                        <p>&#8226; AVLpropertyForeachinternalnodevinT,theheightsofthechildrenofvdifferbyatmost1...or</p>
                        <p>alternatively. . . For each internal node v in T </p>
                    </content>
                </q>
                <q name="the following holds: b(v) &#8712; {&#8722;1, 0, 1}, where b(v) = height(leftChild(v)) &#8722; height(rightChild(v))" id="q16_11_534" au="dyg" cDate="2017-08-17T10:54:14" mDate="2017-08-17T10:54:29" loc="start=296 end=394 startpage=2 endpage=2">
                    <content size="98">
                        <p>the following holds: b(v) &#8712; {&#8722;1, 0, 1}, where</p>
                        <p>b(v) = height(leftChild(v)) &#8722; height(rightChild(v)) </p>
                    </content>
                </q>
                <q name="TheheightofanAVLtreestoringnelementsisO(logn)." id="q16_12_535" au="dyg" cDate="2017-08-17T10:55:28" mDate="2017-08-17T10:55:28" loc="start=435 end=481 startpage=2 endpage=2">
                    <content size="46">
                        <p>TheheightofanAVLtreestoringnelementsisO(logn).</p>
                    </content>
                </q>
                <q name="We can do find, insert, and remove in an AVL tree in time O(logn) while preserving the AVL property." id="q16_13_536" au="dyg" cDate="2017-08-17T10:55:36" mDate="2017-08-17T10:55:36" loc="start=533 end=633 startpage=2 endpage=2">
                    <content size="100">
                        <p>We can do find, insert, and remove in an AVL tree in time O(logn) while preserving the AVL property.</p>
                    </content>
                </q>
                <q name="an AVL tree" id="q16_14_537" au="dyg" cDate="2017-08-17T10:55:46" mDate="2017-08-19T15:45:13" loc="start=658 end=669 startpage=2 endpage=2">
                    <content size="11">
                        <p>an AVL tree</p>
                    </content>
                </q>
                <q name="Insertion in AVL trees" id="q16_15_538" au="dyg" cDate="2017-08-17T10:55:56" mDate="2017-08-17T10:55:56" loc="start=1117 end=1139 startpage=2 endpage=2">
                    <content size="22">
                        <p>Insertion in AVL trees</p>
                    </content>
                </q>
                <q name="&#8226; The new node changes the tree height and the tree has to be re-balanced. &#8211; Information about the h&#8230;" id="q16_16_539" au="dyg" cDate="2017-08-17T10:56:05" mDate="2017-08-17T10:56:05" loc="start=689 end=1057 startpage=2 endpage=2">
                    <content size="368">
                        <p>&#8226; The new node changes the tree height and the tree has to be re-balanced.</p>
                        <p>&#8211; Information about the height of sub trees can be represented in different ways:</p>
                        <p>&#8727; Store the height explicitly in each node</p>
                        <p>&#8727; Store the balance factor in each node</p>
                        <p>&#8226; The change is usually described as a left or right rotation of a sub tree.</p>
                        <p>&#8226; One rotation is sufficient to re-balance the tree</p>
                    </content>
                </q>
                <q name="Insertion in AVL trees (simple cases)" id="q16_17_540" au="dyg" cDate="2017-08-17T10:56:24" mDate="2017-08-17T10:56:24" loc="start=1059 end=1096 startpage=2 endpage=2">
                    <content size="37">
                        <p>Insertion in AVL trees (simple cases)</p>
                    </content>
                </q>
                <q name="&#8226; Start from the new node and search upwards until a node x is found, such that its grandparent z is&#8230;" id="q16_18_541" au="dyg" cDate="2017-08-17T10:56:36" mDate="2017-08-17T10:56:36" loc="start=30 end=205 startpage=3 endpage=3">
                    <content size="175">
                        <p>&#8226; Start from the new node and search upwards until a node x is found, such that its grandparent z is unbalanced. Mark the parent of x with y. Reconstruct the tree as follows:</p>
                    </content>
                </q>
                <q name="&#8211; Rename x,y,z to a,b,c based on their inorder order. &#8211; Let T0,T1,T2,T3 be an enumeration in inorder&#8230;" id="q16_19_542" au="dyg" cDate="2017-08-17T10:57:22" mDate="2017-08-17T10:57:22" loc="start=205 end=505 startpage=3 endpage=3">
                    <content size="300">
                        <p>&#8211; Rename x,y,z to a,b,c based on their inorder order.</p>
                        <p>&#8211; Let T0,T1,T2,T3 be an enumeration in inorder of the sub trees of x, y och z. (None of the sub</p>
                        <p>trees can have x, y, or z as root.)</p>
                        <p>&#8211; Exchange z for b, its children are now a and c.</p>
                        <p>&#8211; T0 and T1 are children of a, and T2 and T3 are children of c.</p>
                    </content>
                </q>
                <q name="Example: insertion in an AVL tree" id="q16_20_543" au="dyg" cDate="2017-08-17T10:59:14" mDate="2017-08-17T10:59:14" loc="start=505 end=538 startpage=3 endpage=3">
                    <content size="33">
                        <p>Example: insertion in an AVL tree</p>
                    </content>
                </q>
                <q name="Four different rotations" id="q16_21_544" au="dyg" cDate="2017-08-17T11:00:56" mDate="2017-08-17T11:00:56" loc="start=66 end=90 startpage=4 endpage=4">
                    <content size="24">
                        <p>Four different rotations</p>
                    </content>
                </q>
                <q name="If b = y we call it a single rotation.&#8221;Rotate y up above z&#8221;" id="q16_22_545" au="dyg" cDate="2017-08-17T11:01:25" mDate="2017-08-17T11:01:25" loc="start=169 end=229 startpage=4 endpage=4">
                    <content size="60">
                        <p>If b = y we call it a single rotation.&#8221;Rotate y up above z&#8221; </p>
                    </content>
                </q>
                <q name="rotations" id="q16_23_546" au="dyg" cDate="2017-08-17T11:01:35" mDate="2017-08-17T11:01:35" loc="start=244 end=253 startpage=4 endpage=4">
                    <content size="9">
                        <p>rotations</p>
                    </content>
                </q>
                <q name="If b = y we call it a single rotation.&#8221;Rotate y up above z&#8221;" id="q16_24_547" au="dyg" cDate="2017-08-17T11:01:45" mDate="2017-08-17T11:01:45" loc="start=314 end=374 startpage=4 endpage=4">
                    <content size="60">
                        <p>If b = y we call it a single rotation.&#8221;Rotate y up above z&#8221; </p>
                    </content>
                </q>
                <q name="rotations" id="q16_25_548" au="dyg" cDate="2017-08-17T11:02:13" mDate="2017-08-17T11:02:13" loc="start=389 end=398 startpage=4 endpage=4">
                    <content size="9">
                        <p>rotations</p>
                    </content>
                </q>
                <q name="If b = x we call it a double rotation.&#8221;Rotate x up above y and then above z&#8221;" id="q16_26_549" au="dyg" cDate="2017-08-17T11:02:24" mDate="2017-08-17T11:02:24" loc="start=465 end=542 startpage=4 endpage=4">
                    <content size="77">
                        <p>If b = x we call it a double rotation.&#8221;Rotate x up above y and then above z&#8221;</p>
                    </content>
                </q>
                <q name="Four different rotations" id="q16_27_550" au="dyg" cDate="2017-08-17T11:02:36" mDate="2017-08-17T11:02:36" loc="start=0 end=24 startpage=5 endpage=5">
                    <content size="24">
                        <p>Four different rotations</p>
                    </content>
                </q>
                <q name="If b = x we call it a double.&#8221;Rotate x up above y and then above z&#8221;" id="q16_28_551" au="dyg" cDate="2017-08-17T11:02:46" mDate="2017-08-17T11:02:46" loc="start=92 end=159 startpage=5 endpage=5">
                    <content size="67">
                        <p>If b = x we call it a double.&#8221;Rotate x up above y and then above z&#8221;</p>
                    </content>
                </q>
                <q name="other way to describe it" id="q16_29_552" au="dyg" cDate="2017-08-17T11:03:03" mDate="2017-08-17T11:03:03" loc="start=167 end=192 startpage=5 endpage=5">
                    <content size="25">
                        <p>other way to describe it</p>
                    </content>
                </q>
                <q name="Another way to describe it" id="q16_30_553" au="dyg" cDate="2017-08-17T11:03:48" mDate="2017-08-17T11:03:48" loc="start=242 end=268 startpage=5 endpage=5">
                    <content size="26">
                        <p>Another way to describe it</p>
                    </content>
                </q>
                <q name=". . . and then insert something which destroys it" id="q16_31_554" au="dyg" cDate="2017-08-17T11:03:59" mDate="2017-08-17T11:03:59" loc="start=285 end=334 startpage=5 endpage=5">
                    <content size="49">
                        <p>. . . and then insert something which destroys it</p>
                    </content>
                </q>
                <q name="Do a single rotation" id="q16_32_555" au="dyg" cDate="2017-08-17T11:04:20" mDate="2017-08-17T11:04:20" loc="start=28 end=48 startpage=6 endpage=6">
                    <content size="20">
                        <p>Do a single rotation</p>
                    </content>
                </q>
                <q name="Do a single rotation" id="q16_33_556" au="dyg" cDate="2017-08-17T11:04:47" mDate="2017-08-17T11:04:47" loc="start=91 end=111 startpage=6 endpage=6">
                    <content size="20">
                        <p>Do a single rotation</p>
                    </content>
                </q>
                <q name="Do a single rotation" id="q16_34_557" au="dyg" cDate="2017-08-17T11:04:55" mDate="2017-08-17T11:04:55" loc="start=0 end=20 startpage=7 endpage=7">
                    <content size="20">
                        <p>Do a single rotation</p>
                    </content>
                </q>
                <q name="Do a single rotation" id="q16_35_558" au="dyg" cDate="2017-08-17T11:05:03" mDate="2017-08-17T11:05:03" loc="start=69 end=89 startpage=7 endpage=7">
                    <content size="20">
                        <p>Do a single rotation</p>
                    </content>
                </q>
                <q name="Do a single rotation" id="q16_36_559" au="dyg" cDate="2017-08-17T11:05:12" mDate="2017-08-17T11:05:12" loc="start=139 end=159 startpage=7 endpage=7">
                    <content size="20">
                        <p>Do a single rotation</p>
                    </content>
                </q>
                <q name="Done!" id="q16_37_560" au="dyg" cDate="2017-08-17T11:05:38" mDate="2017-08-17T11:05:38" loc="start=17 end=22 startpage=8 endpage=8">
                    <content size="5">
                        <p>Done!</p>
                    </content>
                </q>
                <q name="Another way to describe it" id="q16_38_561" au="dyg" cDate="2017-08-17T11:05:49" mDate="2017-08-17T11:05:49" loc="start=23 end=49 startpage=8 endpage=8">
                    <content size="26">
                        <p>Another way to describe it</p>
                    </content>
                </q>
                <q name=". . . this time the insertion is in another position" id="q16_39_562" au="dyg" cDate="2017-08-17T11:06:23" mDate="2017-08-17T11:06:23" loc="start=0 end=52 startpage=9 endpage=9">
                    <content size="52">
                        <p>. . . this time the insertion is in another position</p>
                    </content>
                </q>
                <q name=". . . hmm, we did not get balance" id="q16_40_563" au="dyg" cDate="2017-08-17T11:06:42" mDate="2017-08-17T11:06:42" loc="start=158 end=191 startpage=9 endpage=9">
                    <content size="33">
                        <p>. . . hmm, we did not get balance</p>
                    </content>
                </q>
                <q name="Start over. . . and look at the structure" id="q16_42_564" au="dyg" cDate="2017-08-17T11:07:06" mDate="2017-08-17T11:08:15" loc="start=4 end=45 startpage=10 endpage=10">
                    <content size="41">
                        <p>Start over. . . and look at the structure</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_43_565" au="dyg" cDate="2017-08-17T11:08:53" mDate="2017-08-17T11:08:53" loc="start=103 end=139 startpage=10 endpage=10">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_44_566" au="dyg" cDate="2017-08-17T11:09:15" mDate="2017-08-17T11:09:15" loc="start=0 end=36 startpage=11 endpage=11">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_45_567" au="dyg" cDate="2017-08-17T11:09:22" mDate="2017-08-17T11:09:22" loc="start=89 end=125 startpage=11 endpage=11">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_46_568" au="dyg" cDate="2017-08-17T11:09:29" mDate="2017-08-17T11:09:29" loc="start=178 end=214 startpage=11 endpage=11">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_47_569" au="dyg" cDate="2017-08-17T11:09:42" mDate="2017-08-17T11:09:42" loc="start=20 end=56 startpage=12 endpage=12">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="We have to perform a double rotation" id="q16_48_570" au="dyg" cDate="2017-08-17T11:09:53" mDate="2017-08-17T11:09:53" loc="start=104 end=140 startpage=12 endpage=12">
                    <content size="36">
                        <p>We have to perform a double rotation</p>
                    </content>
                </q>
                <q name="Done!" id="q16_49_571" au="dyg" cDate="2017-08-17T11:09:59" mDate="2017-08-17T11:09:59" loc="start=0 end=5 startpage=13 endpage=13">
                    <content size="5">
                        <p>Done!</p>
                    </content>
                </q>
                <q name="restructuring = rotations. . ." id="q16_50_572" au="dyg" cDate="2017-08-17T11:10:23" mDate="2017-08-17T11:12:21" loc="start=19 end=49 startpage=13 endpage=13">
                    <content size="30">
                        <p>restructuring = rotations. . .</p>
                    </content>
                </q>
                <q name="Some authors use left and right rotations: Single left rotation: &#8226; left part of subtree (a and j) is&#8230;" id="q16_51_573" au="dyg" cDate="2017-08-17T11:10:33" mDate="2017-08-17T11:10:41" loc="start=50 end=159 startpage=13 endpage=13">
                    <content size="109">
                        <p>Some authors use left and right rotations: Single left rotation: &#8226; left part of subtree (a and j) is lowered</p>
                    </content>
                </q>
                <q name="&#8226; we have &#8221;rotated (up) b above a&#8221;" id="q16_52_574" au="dyg" cDate="2017-08-17T11:10:49" mDate="2017-08-17T11:10:49" loc="start=159 end=193 startpage=13 endpage=13">
                    <content size="34">
                        <p>&#8226; we have &#8221;rotated (up) b above a&#8221;</p>
                    </content>
                </q>
                <q name="Double rotations. . ." id="q16_54_575" au="dyg" cDate="2017-08-17T11:12:39" mDate="2017-08-17T11:12:39" loc="start=229 end=250 startpage=13 endpage=13">
                    <content size="21">
                        <p>Double rotations. . .</p>
                    </content>
                </q>
                <q name="Two rotations are needed when the nodes to be re-balanced are placed in a zig-zag pattern." id="q16_55_576" au="dyg" cDate="2017-08-17T11:12:49" mDate="2017-08-17T11:12:49" loc="start=251 end=341 startpage=13 endpage=13">
                    <content size="90">
                        <p>Two rotations are needed when the nodes to be re-balanced are placed in a zig-zag pattern.</p>
                    </content>
                </q>
                <q name="&#8226; Rotate b up above a &#8226; Rotate b up above c" id="q16_56_577" au="dyg" cDate="2017-08-17T11:13:03" mDate="2017-08-17T11:13:03" loc="start=342 end=386 startpage=13 endpage=13">
                    <content size="44">
                        <p>&#8226; Rotate b up above a</p>
                        <p>&#8226; Rotate b up above c</p>
                    </content>
                </q>
                <q name="Deletion in an AVL tree" id="q16_57_578" au="dyg" cDate="2017-08-17T11:13:14" mDate="2017-08-17T11:13:14" loc="start=410 end=433 startpage=13 endpage=13">
                    <content size="23">
                        <p>Deletion in an AVL tree</p>
                    </content>
                </q>
                <q name="&#8226; find and remove as in an ordinary binary search tree &#8226; Update balance information on the way back&#8230;" id="q16_58_579" au="dyg" cDate="2017-08-17T11:13:25" mDate="2017-08-17T11:13:25" loc="start=434 end=807 startpage=13 endpage=13">
                    <content size="373">
                        <p>&#8226; find and remove as in an ordinary binary search tree</p>
                        <p>&#8226; Update balance information on the way back up to the root &#8226; Iftounbalanced:Restructure...but...</p>
                        <p>&#8211; When we restore balance in one position it might incur unbalance in another position &#8211; Have to repeat the re-balancing procedure (or balance control) until the root is reached &#8211; At most O(logn) re-balancing operations</p>
                    </content>
                </q>
                <q name="AVL-trees TDDC32" id="q16_59_580" au="dyg" cDate="2017-08-19T15:40:18" mDate="2017-08-19T15:40:18" loc="start=46 end=62 startpage=0 endpage=0">
                    <content size="16">
                        <p>AVL-trees TDDC32</p>
                    </content>
                </q>
                <q name="Trees" id="q16_60_581" au="dyg" cDate="2017-08-19T15:42:47" mDate="2017-08-19T15:42:47" loc="start=6 end=11 startpage=2 endpage=2">
                    <content size="5">
                        <p>Trees</p>
                    </content>
                </q>
                <q name="Tree" id="q16_61_582" au="dyg" cDate="2017-08-19T15:42:51" mDate="2017-08-19T15:42:51" loc="start=16 end=20 startpage=2 endpage=2">
                    <content size="4">
                        <p>Tree</p>
                    </content>
                </q>
                <q name="Example" id="q16_62_583" au="dyg" cDate="2017-08-19T15:45:17" mDate="2017-08-19T15:45:17" loc="start=649 end=656 startpage=2 endpage=2">
                    <content size="7">
                        <p>Example</p>
                    </content>
                </q>
            </quotations>
        </primDoc>
    </primDocs>
    <codes size="100">
        <code name="Motivation" id="co_1" au="dyg" cDate="2017-07-10T13:54:21" mDate="2017-08-07T14:02:24" color="FF7800" cCount="0" qCount="6">
            <comment type="text/html" size="104">
                <p>This code denotes that the text is discussing the motivation for whatever the current context is set to.</p>
            </comment>
        </code>
        <code name="Complexity" id="co_2" au="dyg" cDate="2017-07-10T13:57:36" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="22">
            <comment type="text/html" size="109">
                <p>This code denotes that the text is discussing the computational complexity of whatever the context is set to.</p>
            </comment>
        </code>
        <code name="Example" id="co_3" au="dyg" cDate="2017-07-10T13:58:04" mDate="2017-08-07T14:39:47" color="006EFF" cCount="0" qCount="51">
            <comment type="text/html" size="93">
                <p>This code denotes that the text is giving, or providing an example in relation to the context</p>
            </comment>
        </code>
        <code name="rebalance" id="co_4" au="dyg" cDate="2017-07-10T14:04:07" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="1">
            <comment type="text/html" size="170">
                <p>rebalance is an in vivo term for Trees in general. This means it will not be able to be applied to other algorithms, perhaps this code should be subsumed into SubOp code.</p>
            </comment>
        </code>
        <code name="History" id="co_5" au="dyg" cDate="2017-07-10T14:18:53" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="6">
            <comment type="text/html" size="93">
                <p>This code denotes that the text is discussing the history of whatever the context was set to.</p>
            </comment>
        </code>
        <code name="Review" id="co_6" au="dyg" cDate="2017-07-10T14:21:15" mDate="2017-08-03T10:40:15" color="FFBE00" cCount="0" qCount="9">
            <comment type="text/html" size="159">
                <p>This modifier takes any number of tags of any type. It denotes that the purpose of those tags is to provide a pedagogical review of the material to the reader.</p>
            </comment>
        </code>
        <code name="Invariant" id="co_7" au="dyg" cDate="2017-07-10T14:23:21" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="5">
            <comment type="text/html" size="50">
                <p>Another in vivo term that may not be transmissible</p>
            </comment>
        </code>
        <code name="Recursive" id="co_8" au="dyg" cDate="2017-07-10T14:24:48" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Cartoon" id="co_9" au="dyg" cDate="2017-07-10T14:26:55" mDate="2017-08-01T11:45:39" color="46AA00" cCount="0" qCount="71">
            <comment type="text/html" size="57">
                <p>The content is represented in a drawn or animated graphic</p>
            </comment>
        </code>
        <code name="Solution" id="co_10" au="dyg" cDate="2017-07-10T14:39:07" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="10">
            <comment type="text/html" size="160">
                <p>This code denotes that the text is now discussing a solution to whatever is in the current context. This is always used to &#8220;close&#8221; a previous &#8220;Problem&#8221; context.</p>
            </comment>
        </code>
        <code name="In vivo term introduction" id="co_11" au="dyg" cDate="2017-07-10T14:41:16" mDate="2017-08-07T15:36:48" color="006EFF" cCount="0" qCount="40">
            <comment type="text/html" size="166">
                <p>This code denotes that the text is defining a term that practitioners of algorithms would be familiar with. In Vivo terms are the &#8220;language of the trade&#8221; so to speak.</p>
            </comment>
        </code>
        <code name="Code" id="co_12" au="dyg" cDate="2017-07-10T15:02:08" mDate="2017-08-01T11:45:39" color="46AA00" cCount="0" qCount="29">
            <comment type="text/html" size="76">
                <p>The content is represented as a block of code from some programming language</p>
            </comment>
        </code>
        <code name="Insertion" id="co_13" au="dyg" cDate="2017-07-10T15:13:18" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="7"/>
        <code name="Search" id="co_14" au="dyg" cDate="2017-07-10T15:13:26" mDate="2017-08-07T15:14:55" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Cases" id="co_15" au="dyg" cDate="2017-07-10T15:19:48" mDate="2017-08-08T09:58:37" color="006EFF" cCount="0" qCount="9">
            <comment type="text/html" size="300">
                <p>This code denotes that the text is breaking down the context into chunks of information, or cases. Often used after a &#8220;Base Case&#8221; code.

Merged comment from Base Case on 10/8/17, 12:00 PM

This code denotes the text is giving an explicit base case in an inductive procedure in relation to the context</p>
            </comment>
        </code>
        <code name="Definition" id="co_16" au="dyg" cDate="2017-07-10T15:26:48" mDate="2017-08-20T14:46:20" color="006EFF" cCount="0" qCount="60">
            <comment type="text/html" size="72">
                <p>This code denotes that the text is defining some term about the context.</p>
            </comment>
        </code>
        <code name="Mathematic" id="co_17" au="dyg" cDate="2017-07-10T15:27:44" mDate="2017-08-01T11:45:39" color="46AA00" cCount="0" qCount="35">
            <comment type="text/html" size="77">
                <p>The content is represented using Mathematic formulae, variables, or equations</p>
            </comment>
        </code>
        <code name="Legend" id="co_18" au="dyg" cDate="2017-07-17T10:38:02" mDate="2017-08-07T14:49:39" color="006EFF" cCount="0" qCount="11">
            <comment type="text/html" size="367">
                <p>This code denotes that the text is giving a legend to understand something. For example if the text content is expressed in a graphic, there will commonly be a paragraph that describes, in detail, all things of interest in the graph. Here is a textual example: &#8220;The blue nodes are the recursive calls of merge sort, the yellow are the calls to the merge suboperation"</p>
            </comment>
        </code>
        <code name="LIFO" id="co_19" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:48:28" color="8C32A0" cCount="0" qCount="1"/>
        <code name="priority queue" id="co_20" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="path" id="co_21" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="caveat" id="co_22" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:43:04" color="FFBE00" cCount="0" qCount="14">
            <comment type="text/html" size="310">
                <p>This modifier takes any number of tags of any type. It denotes that the purpose of the text at hand is to further clarify a point, provide extra detail, or point out a consequence of some aspect of that which is being discussed. Ex: In general, this process will require many rotations for an insert because...</p>
            </comment>
        </code>
        <code name="internal paths" id="co_23" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-07T15:38:25" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="length" id="co_24" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="shortest-path" id="co_25" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Thesis Topic" id="co_26" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:57:32" color="000000" cCount="0" qCount="11"/>
        <code name="Algorithm" id="co_27" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="18">
            <comment type="text/html" size="183">
                <p>This code denotes that the text is discussing an algorithm in general. This could be the same as the thesis topic, it could be a related algorithm (and have a &#8220;Related&#8221; modifier) etc.</p>
            </comment>
        </code>
        <code name="breadth first search" id="co_28" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:55:32" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="frontier" id="co_29" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="directed graph" id="co_30" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="FIFO" id="co_31" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:48:28" color="8C32A0" cCount="0" qCount="1"/>
        <code name="Description" id="co_32" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:19" color="006EFF" cCount="0" qCount="220">
            <comment type="text/html" size="109">
                <p>This code is the most general Action code. It denotes that the text is describing the context in some manner.</p>
            </comment>
        </code>
        <code name="completed vertices" id="co_33" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Application" id="co_34" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="6">
            <comment type="text/html" size="141">
                <p>This scoping tag denotes that the text is now discussing the Use cases, or applications of the current context. Defaults to the Thesis Topic.</p>
            </comment>
        </code>
        <code name="depth first search" id="co_35" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Proposal" id="co_36" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-04T10:35:03" color="006EFF" cCount="0" qCount="14">
            <comment type="text/html" size="156">
                <p>This code is similar to &#8220;Assumption&#8221; however this code denotes the text suggesting a path forward. For example: We can solve this problem with BFS algorithm</p>
            </comment>
        </code>
        <code name="Related" id="co_37" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:43:04" color="FFBE00" cCount="0" qCount="13">
            <comment type="text/html" size="269">
                <p>This modifier takes any number of arguments of any type. It denotes that the tags it is attached to are substantially related to the thesis topic in some manner. Ex: The more general shortest-path problem, is related, to the motivating problem for Dijkstra&#8217;s algorithm.</p>
            </comment>
        </code>
        <code name="weighted" id="co_38" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Problem" id="co_39" au="dyg" cDate="2017-07-24T09:37:54" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="19">
            <comment type="text/html" size="321">
                <p>This code denotes that the text is discussing a problem that is solved by whatever the context is referring to. This does not say what kind of problem it is, such things are handled through modifiers. This code can also refer to the introduction of a sub problem, that will be solved, again done this is done by modifiers</p>
            </comment>
        </code>
        <code name="Greedy" id="co_40" au="dyg" cDate="2017-07-24T09:37:55" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="3"/>
        <code name="unvisited" id="co_41" au="dyg" cDate="2017-07-24T09:37:55" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="undirected graph" id="co_42" au="dyg" cDate="2017-07-24T09:37:55" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Property" id="co_43" au="dyg" cDate="2017-07-24T10:19:07" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="20">
            <comment type="text/html" size="276">
                <p>This code denotes that the text is now discussing some property of whatever is the current context.

Merged comment from Condition on 8/31/17, 7:13 PM

This code denotes that the text is discussing a condition that whatever the context was set to, has,&#160;that must be satisfied.</p>
            </comment>
        </code>
        <code name="Operation" id="co_44" au="dyg" cDate="2017-07-24T10:25:34" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="44">
            <comment type="text/html" size="139">
                <p>This code denotest that the text is discussing an Operation that is a requisite and central part of whatever the current context is set to.</p>
            </comment>
        </code>
        <code name="Abstraction" id="co_45" au="dyg" cDate="2017-07-24T10:34:55" mDate="2017-08-08T09:47:38" color="006EFF" cCount="0" qCount="5">
            <comment type="text/html" size="170">
                <p>This code denotes that the document is abstracting or generalizing that which the context is set to. Ex: &#8220;Now we can generalize this problem to the shortest-path problem"</p>
            </comment>
        </code>
        <code name="Implication" id="co_46" au="dyg" cDate="2017-07-24T10:50:55" mDate="2017-08-01T11:45:19" color="006EFF" cCount="0" qCount="5">
            <comment type="text/html" size="148">
                <p>This code denotes that the text is giving an implication about the context. This could be anything that fits the logical connective if..then..else..</p>
            </comment>
        </code>
        <code name="divide and conquer" id="co_47" au="dyg" cDate="2017-07-25T09:37:54" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="3"/>
        <code name="Summary" id="co_48" au="dyg" cDate="2017-07-25T09:40:57" mDate="2017-08-01T11:45:19" color="006EFF" cCount="0" qCount="1">
            <comment type="text/html" size="82">
                <p>This code denotes a concluding block of text that summarizes the previous contexts</p>
            </comment>
        </code>
        <code name="Design" id="co_49" au="dyg" cDate="2017-07-25T09:45:39" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="9">
            <comment type="text/html" size="122">
                <p>This code denotes that the text is talking about the design, or design considerations of that which the context is set to.</p>
            </comment>
        </code>
        <code name="recurrence" id="co_50" au="dyg" cDate="2017-07-25T09:47:25" mDate="2017-08-08T09:55:32" color="6E6E6E" cCount="0" qCount="3"/>
        <code name="Goal" id="co_51" au="dyg" cDate="2017-07-25T09:49:08" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="4">
            <comment type="text/html" size="140">
                <p>This code denotes that the text is discussing the goal, the end game, that which is the desired outcome, of whatever the context was set to.</p>
            </comment>
        </code>
        <code name="divide" id="co_52" au="dyg" cDate="2017-07-25T09:52:48" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="conquer" id="co_53" au="dyg" cDate="2017-07-25T09:53:12" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="combine" id="co_54" au="dyg" cDate="2017-07-25T09:53:17" mDate="2017-08-08T09:50:47" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Assumption" id="co_55" au="dyg" cDate="2017-07-25T10:03:18" mDate="2017-08-08T10:01:57" color="006EFF" cCount="0" qCount="4">
            <comment type="text/html" size="106">
                <p>This code denotes that the text is giving the reader or telling the reader an assumption about the context</p>
            </comment>
        </code>
        <code name="Aside" id="co_56" au="dyg" cDate="2017-07-25T10:13:39" mDate="2017-08-01T11:43:04" color="FFBE00" cCount="0" qCount="11">
            <comment type="text/html" size="366">
                <p>This is a special modifier code. It denotes that the input tags describe text that is not directly related to the scope the input tags refer to. Cases where this modifier is used without any accompanying tag are considered equivalent to the tag set &#8220;Aside&#8221; &#8220;Comment&#8221;. That is to say, if Aside occurs with no input, then the Comment tag is considered as default input</p>
            </comment>
        </code>
        <code name="Solicitation" id="co_57" au="dyg" cDate="2017-07-25T10:14:43" mDate="2017-08-08T09:52:03" color="006EFF" cCount="0" qCount="7">
            <comment type="text/html" size="235">
                <p>This code denotes that the text is explicitly asking something of the reader. These statements are typically formed as questions. &#160;Ex: &#8220;If you find the recursion confusing, make sure you go back and understand it before moving forward"</p>
            </comment>
        </code>
        <code name="Implementation" id="co_58" au="dyg" cDate="2017-07-25T10:18:14" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="5">
            <comment type="text/html" size="409">
                <p>This code denotes that the text is discussing implementation details of that which the context is set to. These are things such as &#8220;typically algorithm x is not implemented with a fibonnacci heap because of y and z&#8221;. This code does not refer to things that are required for the implementation of an algorithm, such as a priority queue for Dijkstra&#8217;s. Such things would either be Constituent or Operation tags.</p>
            </comment>
        </code>
        <code name="stable sorting" id="co_59" au="dyg" cDate="2017-07-25T10:23:32" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Derivation" id="co_60" au="dyg" cDate="2017-07-27T09:37:22" mDate="2017-08-01T11:45:19" color="006EFF" cCount="0" qCount="3">
            <comment type="text/html" size="97">
                <p>This code denotes that the text is making a derivation about something in relation to the context</p>
            </comment>
        </code>
        <code name="Outline" id="co_61" au="dyg" cDate="2017-07-31T09:42:17" mDate="2017-08-01T11:45:19" color="006EFF" cCount="0" qCount="3">
            <comment type="text/html" size="101">
                <p>This code denotes that the text is giving a bulleted list of the content the document will go through</p>
            </comment>
        </code>
        <code name="Industry" id="co_62" au="dyg" cDate="2017-07-31T09:57:28" mDate="2017-07-31T09:57:28" color="" cCount="0" qCount="1"/>
        <code name="distance matrix" id="co_63" au="dyg" cDate="2017-07-31T10:14:58" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="simple paths" id="co_64" au="dyg" cDate="2017-07-31T10:20:32" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Meta" id="co_65" au="dyg" cDate="2017-07-31T10:22:40" mDate="2017-08-01T11:43:04" color="FFBE00" cCount="0" qCount="10">
            <comment type="text/html" size="213">
                <p>This modifier takes any number of tags of any type. It denotes text that is not directly related to explaining the scope at hand. Ex: This algorithm is hard for many people to understand because of its simplicity.</p>
            </comment>
        </code>
        <code name="Comment" id="co_66" au="dyg" cDate="2017-07-31T10:22:40" mDate="2017-08-08T09:58:37" color="006EFF" cCount="0" qCount="3">
            <comment type="text/html" size="109">
                <p>This code is a dummy code whose use is just to provide a binding for an &#8220;Aside&#8221;, &#8220;Caveat&#8221;, or &#8220;Meta&#8221; modifier</p>
            </comment>
        </code>
        <code name="Constituent" id="co_67" au="dyg" cDate="2017-07-31T10:26:07" mDate="2017-08-01T11:15:24" color="FF7800" cCount="0" qCount="9">
            <comment type="text/html" size="240">
                <p>This code can be seen as a more general form of &#8220;Operation&#8221;. This code denotes that the text is discussing some constituent part of whatever the context was set to. This is typically used to denote data structures required for an algorithm.</p>
            </comment>
        </code>
        <code name="dynamic programming" id="co_68" au="dyg" cDate="2017-08-01T10:22:17" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="principle of optimatlity" id="co_69" au="dyg" cDate="2017-08-01T10:23:11" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Pedagogical" id="co_70" au="dyg" cDate="2017-08-01T10:34:49" mDate="2017-08-01T11:47:14" color="FFBE00" cCount="0" qCount="9">
            <comment type="text/html" size="169">
                <p>A modifier, whose purpose is to denote that the specific purpose of a statement is pedagogical in nature. This modifier can be applied to any number of tags of any type.</p>
            </comment>
        </code>
        <code name="dynamic programming functional equation" id="co_71" au="dyg" cDate="2017-08-01T10:45:25" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="stopping rule" id="co_72" au="dyg" cDate="2017-08-01T10:58:40" mDate="2017-08-01T11:45:58" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="comparison sorts" id="co_73" au="dyg" cDate="2017-08-02T09:20:32" mDate="2017-08-08T09:44:30" color="6E6E6E" cCount="0" qCount="1"/>
        <code name="Data Structure" id="co_74" au="dyg" cDate="2017-08-03T10:33:43" mDate="2017-08-10T09:24:27" color="FF7800" cCount="0" qCount="13">
            <comment type="text/html" size="104">
                <p>This code denotes that the text is discussing a Data Structure, this is an analog to the Algorithm code.</p>
            </comment>
        </code>
        <code name="Binary Search Trees" id="co_75" au="dyg" cDate="2017-08-03T10:39:42" mDate="2017-08-08T09:55:32" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="balanced" id="co_76" au="dyg" cDate="2017-08-03T10:44:16" mDate="2017-08-03T10:47:24" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="Conclusion" id="co_77" au="dyg" cDate="2017-08-03T10:45:30" mDate="2017-08-03T10:46:50" color="006EFF" cCount="0" qCount="22">
            <comment type="text/html" size="72">
                <p>This code denotes that the text is making a conclusion about the context</p>
            </comment>
        </code>
        <code name="Class" id="co_78" au="dyg" cDate="2017-08-03T11:23:58" mDate="2017-08-07T15:39:31" color="FF7800" cCount="0" qCount="10">
            <comment type="text/html" size="81">
                <p>This code denotes the explicit discussion of a group, set or class of some thing.</p>
            </comment>
        </code>
        <code name="Big Picture" id="co_79" au="dyg" cDate="2017-08-03T11:27:27" mDate="2017-08-03T11:27:27" color="" cCount="0" qCount="1"/>
        <code name="ADT" id="co_80" au="dyg" cDate="2017-08-03T11:27:50" mDate="2017-08-08T09:48:28" color="8C32A0" cCount="0" qCount="1"/>
        <code name="Proof" id="co_81" au="dyg" cDate="2017-08-04T09:39:39" mDate="2017-08-04T09:40:37" color="006EFF" cCount="0" qCount="6">
            <comment type="text/html" size="81">
                <p>This code denotes the text giving a mathematic or logical proof about the context</p>
            </comment>
        </code>
        <code name="Contrast" id="co_82" au="dyg" cDate="2017-08-04T09:54:51" mDate="2017-08-04T10:23:06" color="006EFF" cCount="0" qCount="1">
            <comment type="text/html" size="218">
                <p>This code denotes that the text is contrasting the context with something else. This code may no longer be viable because it expresses in a worse way what the combination of &#8220;Explanandoid&#8221; &#8220;Relation&#8221; modifiers express.</p>
            </comment>
        </code>
        <code name="-&gt;" id="co_83" au="dyg" cDate="2017-08-04T10:37:09" mDate="2017-08-29T19:27:21" color="DC0000" cCount="0" qCount="109">
            <comment type="text/html" size="429">
                <p>Subscoping operator. This means that scopes are nested. For example, if you have a code at position x that reads &#8220;Constituent, Description&#8221; and then a paragraph/line/s later, at position y, you have &#8220;-&gt;, Complexity&#8221; then you are no denoting teh complexity of the consituent being discussed. This is opposed to having just &#8220;Complexity&#8221; at position y which would denote the complexity of whatever the previous structuring move was.</p>
            </comment>
        </code>
        <code name="Table" id="co_84" au="dyg" cDate="2017-08-04T10:41:20" mDate="2017-08-04T10:42:13" color="46AA00" cCount="0" qCount="2">
            <comment type="text/html" size="46">
                <p>The content is explicitly displayed in a Table</p>
            </comment>
        </code>
        <code name="Observation" id="co_85" au="dyg" cDate="2017-08-07T14:21:20" mDate="2017-08-07T14:33:26" color="006EFF" cCount="0" qCount="37">
            <comment type="text/html" size="213">
                <p>This code denotes the text making a general observation about the context. Example: &#8220;At node 13 the tree has height 0&#8221; or &#8220;We can see that the last loop will never finish and will continue processing in infinitum"</p>
            </comment>
        </code>
        <code name="&lt;-" id="co_86" au="dyg" cDate="2017-08-07T14:21:20" mDate="2017-08-29T19:27:21" color="DC0000" cCount="0" qCount="48">
            <comment type="text/html" size="541">
                <p>Subscoping lifting operator. This operator ends subscoping context, returning the scope to whatever the prior scope was. For example if you had &#8220;Operation&#8221; then a few lines down you have &#8220;-&gt;&#8221; &#8220;Complexity&#8221; then the scope would be talking about Operation Complexity. If after a few more lines you had &#8220;&lt;-&#8220; &#8220;Observation&#8221; Then you are now making a general observation about the Operation, not the Operation complexity. This is in contrast to just &#8220;Observation&#8221; which, in this case, would then be making an Observation of the Operation Complexity</p>
            </comment>
        </code>
        <code name="State" id="co_87" au="dyg" cDate="2017-08-07T14:34:02" mDate="2017-08-07T14:34:25" color="FF7800" cCount="0" qCount="17">
            <comment type="text/html" size="169">
                <p>This scoping operator denotes that the text is now discussing something related to the state or the state of whatever is in&#160;the current context. Defaults to Thesis Topic</p>
            </comment>
        </code>
        <code name="Advantages" id="co_88" au="dyg" cDate="2017-08-07T15:00:13" mDate="2017-08-07T15:03:23" color="FF7800" cCount="0" qCount="3">
            <comment type="text/html" size="93">
                <p>This code denotes the pros, the upside or the advantages to that which the context is set to.</p>
            </comment>
        </code>
        <code name="Disadvantages" id="co_89" au="dyg" cDate="2017-08-07T15:00:32" mDate="2017-08-07T15:03:36" color="FF7800" cCount="0" qCount="4">
            <comment type="text/html" size="119">
                <p>This code denotes that the text is discussing the downsides, the cons or shortfalls of whatever the context was set to.</p>
            </comment>
        </code>
        <code name="&lt;-&gt;" id="co_90" au="dyg" cDate="2017-08-10T09:42:25" mDate="2017-10-08T12:18:29" color="DC0000" cCount="0" qCount="66">
            <comment type="text/html" size="300">
                <p>This code is a sister to the subscoping operators &lt;- and -&gt;. It denotes a sibling scope. For example, if one has &#8220;History&#8221; followed by &#8220;-&gt;&#8221; &#8220;Operation&#8221; then one could use &#8220;|&#8221; &#8220;Design&#8221; to set the context to the &#8220;History&#8221; &#8220;-&gt; Design&#8221;. Basically &#8220;|&#8221; is just syntactic sugar for a &#8220;&lt;-&#8220; &#8220;-&gt;&#8221; &#8220;Design&#8221; tag.</p>
            </comment>
        </code>
        <code name="single rotation" id="co_91" au="dyg" cDate="2017-08-10T09:50:46" mDate="2017-08-10T09:50:46" color="" cCount="0" qCount="1"/>
        <code name="double rotation" id="co_92" au="dyg" cDate="2017-08-10T09:50:46" mDate="2017-08-10T09:50:46" color="" cCount="0" qCount="1"/>
        <code name="rotations" id="co_93" au="dyg" cDate="2017-08-15T13:55:39" mDate="2017-08-15T13:55:39" color="" cCount="0" qCount="2"/>
        <code name="height" id="co_94" au="dyg" cDate="2017-08-16T12:46:46" mDate="2017-08-16T12:47:21" color="6E6E6E" cCount="0" qCount="2"/>
        <code name="merging" id="co_95" au="dyg" cDate="2017-08-16T19:15:31" mDate="2017-08-16T19:45:20" color="6E6E6E" cCount="0" qCount="0"/>
        <code name="relaxation" id="co_96" au="dyg" cDate="2017-08-17T10:04:22" mDate="2017-08-17T10:04:22" color="" cCount="0" qCount="1"/>
        <code name="PseudoCode" id="co_97" au="dyg" cDate="2017-08-17T10:25:00" mDate="2017-08-20T14:46:34" color="46AA00" cCount="0" qCount="2">
            <comment type="text/html" size="121">
                <p>The content is represented in pseudocode. That is a programming-like language that is not an actual programming language.</p>
            </comment>
        </code>
        <code name="Sequence" id="co_98" au="dyg" cDate="2017-08-17T10:57:22" mDate="2017-08-17T10:57:47" color="46AA00" cCount="0" qCount="9">
            <comment type="text/html" size="287">
                <p>This code denotes that the content is being expressed in a ordered, bullted or punctuated way. An Example would be describing an algorithm, in text, without giving explicit code or pseudocode e.g. do x, then d y, then if y do z. Often times these blocks of text belong to bulleted lists.</p>
            </comment>
        </code>
        <code name="&lt;&lt;-" id="co_99" au="dyg" cDate="2017-08-19T16:20:51" mDate="2017-08-29T19:27:21" color="DC0000" cCount="0" qCount="4">
            <comment type="text/html" size="734">
                <p>Ultimate scope closing operator. This modifier can be orphaned (no input) or paired with a subscoping tag. In either case this operator returns to root node (scope) of the document. If a subscoping operator is used orphaned (with no accompanying tags) then that is synonymous with &#8220;&lt;&lt;-&#8220; and that tag. For ex. We have &#8220;Data Structure&#8221; and then "-&gt;&#8221; &#8220;Operation&#8221; then later, &#8220;-&gt;&#8221; &#8220;Motivation&#8221; to denote we are discussing the motivation for an operation of a data structure. If we then have just &#8220;&lt;&lt;-&#8220;, then we return to the Data Structure Scope. Or, if we have &#8220;History&#8221; then we return to the data structure scope and sub scope into history to discuss the history of the data structure. The equivalent code is &#8220;&lt;&lt;-&#8220;, then &#8220;-&gt;&#8221; &#8220;History&#8221;.</p>
            </comment>
        </code>
        <code name="external sorting" id="co_100" au="dyg" cDate="2017-08-20T11:34:44" mDate="2017-08-20T11:35:16" color="6E6E6E" cCount="0" qCount="1"/>
    </codes>
    <superCodes size="0"/>
    <memos size="4">
        <memo name="Memo" id="me_1" au="dyg" cDate="2017-07-17T10:44:32" mDate="2017-07-17T10:56:17" type="Memo" mime="text/html" fn="me_1">
            <comment size="854">
                <p>Before coding the Dijkstra 7, I&#8217;m working on differentiating and organizing the codes. We have 4 basic groups atm:</p>
                <p>1) The codes that denote how the explanation proceeds, similar to bellack. These are structuring, example moves, I&#8217;m wondering if we should also have a &#8220;focusing&#8221; move, where the lecturer zeroes in on a specific point</p>
                <p>2) We have codes that denote general requisite processes for any computational object. Things like invariants, different properties like symmetry, sub-operations</p>
                <p>3) We have codes that are used as a pedagogical device: These are things like history, motivations, problems, in vivo term introductions</p>
                <p>4) We have codes that denote high minded concepts, things like symmetry, insertion, deletion</p>
                <p>5) We have codes that denote how the information payload is being expressed, text, proof, mathematical definition, a cartoon etc.</p>
            </comment>
        </memo>
        <memo name="Thoughts on DIY AVT008" id="me_2" au="dyg" cDate="2017-07-27T09:39:57" mDate="2017-07-27T09:41:48" type="Memo" mime="text/html" fn="me_2">
            <comment size="170">
                <p>AVT008 is very DO IT YOURSELF. There is no in vivo term introduction whatsoever and the entire document relies on one already being savvy in AVL trees. Very minimal case.</p>
            </comment>
        </memo>
        <memo name="Thoughts on DJK008" id="me_3" au="dyg" cDate="2017-07-31T09:49:02" mDate="2017-08-01T10:21:09" type="Memo" mime="text/html" fn="me_3">
            <comment size="526">
                <p>I think we need a tag that dictates a switch in the thing that is being discussed. Typically we use a structuring tag to say ok we are going to set the context in on motivation, or the history, or the Complexity or the Sub Operations. But many documents, this one included, switch contexts, for example this one is changing to shortest-path problems, so I think we need a meta operator.</p>
                <p></p>
                <p>Tags like Example, Review are all sub-scoping tags that are used in response to the major context which is controlled by a structuring tag</p>
            </comment>
        </memo>
        <memo name="Thoughts on DJK010" id="me_4" au="dyg" cDate="2017-08-04T09:55:34" mDate="2017-08-04T10:19:37" type="Memo" mime="text/html" fn="me_4">
            <comment size="1356">
                <p>I need to set demarcation lines for these categories. Here is what I am thinking:</p>
                <p></p>
                <p>1) SubScoping Operators: A tag is a subscoping operator iff it sets the context for some paragraphs, or text. IT must relate to the thesis topic at hand in a general way. Such as: Complexity, to mean we are focusing on the complexity, Constituents, to mean we are focusing on that which makes up the an essential part of the algorithm.</p>
                <p></p>
                <p>2) Actions: A tag is an action if it explicitly does something in the text. Examples would be giving a derivation step by step like in algebra. Giving an Outline, Summary, or Conclusion, Definition.</p>
                <p></p>
                <p>3) Modifiers: a tag is a modifier if it requires information from another tag to exist. These tags typically are used to describe statements that differ in some substantial way from normal statements. For example, meta statements about the class, or the lecture or the algorithm would lead to a &#8220;meta&#8221; modifier. Asides fall into the same camp. An interesting case is the &#8220;Explanadoid modifier which denotes a section of text that describes somethign that is close to the explanandum but not quite it&#8221; this is typically accompanied with the &#8220;Pedagogical&#8221; modifier which denotes a section of text whose purpose is purely pedagogical in nature, something like situating the explanandum in the context of research or a class of problems &amp;c.</p>
            </comment>
        </memo>
    </memos>
    <codeFamilies size="5">
        <codeFamily name="Aspect" id="cf_1" au="dyg" cDate="2017-07-17T09:57:26" mDate="2017-10-08T11:56:31">
            <comment type="text/html" size="396">
                <p>This group holds tags that dictate what the document is discussing, when used with modifiers these codes describe what the document is talking about and in what scope that it is talking about it. For example, if we have &#8220;Problem&#8221; and then &#8220;-&gt; Solution&#8221; then we are now talking about the solution to some problem. If we pop out later with a &#8220;&lt;-&#8220; then we are back to discussing the problem at hand.</p>
            </comment>
            <item id="co_1"/>
            <item id="co_2"/>
            <item id="co_5"/>
            <item id="co_10"/>
            <item id="co_27"/>
            <item id="co_34"/>
            <item id="co_39"/>
            <item id="co_43"/>
            <item id="co_44"/>
            <item id="co_49"/>
            <item id="co_51"/>
            <item id="co_58"/>
            <item id="co_67"/>
            <item id="co_74"/>
            <item id="co_78"/>
            <item id="co_87"/>
            <item id="co_88"/>
            <item id="co_89"/>
        </codeFamily>
        <codeFamily name="Move" id="cf_2" au="dyg" cDate="2017-08-01T11:43:10" mDate="2017-10-08T11:56:34">
            <comment type="text/html" size="101">
                <p>This group denotes the action that is undertaken by the document or author for some selection of text</p>
            </comment>
            <item id="co_3"/>
            <item id="co_11"/>
            <item id="co_15"/>
            <item id="co_16"/>
            <item id="co_18"/>
            <item id="co_32"/>
            <item id="co_36"/>
            <item id="co_45"/>
            <item id="co_46"/>
            <item id="co_48"/>
            <item id="co_55"/>
            <item id="co_57"/>
            <item id="co_60"/>
            <item id="co_61"/>
            <item id="co_66"/>
            <item id="co_77"/>
            <item id="co_81"/>
            <item id="co_82"/>
            <item id="co_85"/>
        </codeFamily>
        <codeFamily name="Notation" id="cf_3" au="dyg" cDate="2017-07-17T10:58:53" mDate="2017-10-08T11:56:16">
            <comment type="text/html" size="101">
                <p>This group denotes how the content is actually expressed. If not otherwise stated, assumed to be text</p>
            </comment>
            <item id="co_9"/>
            <item id="co_12"/>
            <item id="co_17"/>
            <item id="co_84"/>
            <item id="co_97"/>
            <item id="co_98"/>
        </codeFamily>
        <codeFamily name="Operator" id="cf_4" au="dyg" cDate="2017-08-29T19:26:23" mDate="2017-10-08T11:57:01">
            <item id="co_83"/>
            <item id="co_86"/>
            <item id="co_90"/>
            <item id="co_99"/>
        </codeFamily>
        <codeFamily name="Role" id="cf_5" au="dyg" cDate="2017-08-01T11:40:16" mDate="2017-10-08T11:56:24">
            <comment type="text/html" size="109">
                <p>This group denotes all the modifiers, each with special meaning, that can be attached to the sub-scoping tags</p>
            </comment>
            <item id="co_6"/>
            <item id="co_22"/>
            <item id="co_37"/>
            <item id="co_56"/>
            <item id="co_65"/>
            <item id="co_70"/>
        </codeFamily>
    </codeFamilies>
    <superCodeFamilies size="0"/>
    <memoFamilies size="0"/>
    <superMemoFamilies size="0"/>
    <primDocFamilies size="0"/>
    <superPrimDocFamilies size="0"/>
    <netViews size="0"/>
    <networkFamilies size="0"/>
    <superNetworkFamilies size="0"/>
    <links>
        <objectSegmentLinks>
            <codings size="1251">
                <iLink obj="co_1" qRef="q10_2_329"/>
                <iLink obj="co_1" qRef="q3_3_65"/>
                <iLink obj="co_1" qRef="q13_4_463"/>
                <iLink obj="co_1" qRef="q4_8_117"/>
                <iLink obj="co_1" qRef="q6_10_178"/>
                <iLink obj="co_1" qRef="q6_69_230"/>
                <iLink obj="co_2" qRef="q7_2_239"/>
                <iLink obj="co_2" qRef="q15_2_503"/>
                <iLink obj="co_2" qRef="q8_9_279"/>
                <iLink obj="co_2" qRef="q10_9_336"/>
                <iLink obj="co_2" qRef="q4_10_118"/>
                <iLink obj="co_2" qRef="q13_12_471"/>
                <iLink obj="co_2" qRef="q9_17_324"/>
                <iLink obj="co_2" qRef="q10_18_345"/>
                <iLink obj="co_2" qRef="q15_18_518"/>
                <iLink obj="co_2" qRef="q12_20_455"/>
                <iLink obj="co_2" qRef="q13_20_479"/>
                <iLink obj="co_2" qRef="q7_22_257"/>
                <iLink obj="co_2" qRef="q3_24_81"/>
                <iLink obj="co_2" qRef="q10_25_352"/>
                <iLink obj="co_2" qRef="q7_27_262"/>
                <iLink obj="co_2" qRef="q8_29_298"/>
                <iLink obj="co_2" qRef="q7_30_265"/>
                <iLink obj="co_2" qRef="q7_33_268"/>
                <iLink obj="co_2" qRef="q8_36_305"/>
                <iLink obj="co_2" qRef="q4_50_149"/>
                <iLink obj="co_2" qRef="q3_58_108"/>
                <iLink obj="co_2" qRef="q3_66_114"/>
                <iLink obj="co_3" qRef="q16_3_527"/>
                <iLink obj="co_3" qRef="q2_4_4"/>
                <iLink obj="co_3" qRef="q15_4_505"/>
                <iLink obj="co_3" qRef="q8_6_276"/>
                <iLink obj="co_3" qRef="q5_9_162"/>
                <iLink obj="co_3" qRef="q15_9_509"/>
                <iLink obj="co_3" qRef="q7_10_245"/>
                <iLink obj="co_3" qRef="q5_11_164"/>
                <iLink obj="co_3" qRef="q6_11_179"/>
                <iLink obj="co_3" qRef="q6_12_180"/>
                <iLink obj="co_3" qRef="q16_14_537"/>
                <iLink obj="co_3" qRef="q10_15_342"/>
                <iLink obj="co_3" qRef="q7_17_252"/>
                <iLink obj="co_3" qRef="q10_17_344"/>
                <iLink obj="co_3" qRef="q16_17_540"/>
                <iLink obj="co_3" qRef="q2_18_16"/>
                <iLink obj="co_3" qRef="q2_19_17"/>
                <iLink obj="co_3" qRef="q7_20_255"/>
                <iLink obj="co_3" qRef="q16_20_543"/>
                <iLink obj="co_3" qRef="q15_21_521"/>
                <iLink obj="co_3" qRef="q2_22_20"/>
                <iLink obj="co_3" qRef="q4_23_128"/>
                <iLink obj="co_3" qRef="q8_25_294"/>
                <iLink obj="co_3" qRef="q10_27_354"/>
                <iLink obj="co_3" qRef="q2_28_24"/>
                <iLink obj="co_3" qRef="q16_29_552"/>
                <iLink obj="co_3" qRef="q2_31_27"/>
                <iLink obj="co_3" qRef="q6_31_195"/>
                <iLink obj="co_3" qRef="q6_33_197"/>
                <iLink obj="co_3" qRef="q6_35_199"/>
                <iLink obj="co_3" qRef="q2_37_31"/>
                <iLink obj="co_3" qRef="q16_38_561"/>
                <iLink obj="co_3" qRef="q16_39_562"/>
                <iLink obj="co_3" qRef="q3_40_93"/>
                <iLink obj="co_3" qRef="q3_41_94"/>
                <iLink obj="co_3" qRef="q11_41_412"/>
                <iLink obj="co_3" qRef="q10_41_368"/>
                <iLink obj="co_3" qRef="q2_42_36"/>
                <iLink obj="co_3" qRef="q2_43_37"/>
                <iLink obj="co_3" qRef="q11_47_418"/>
                <iLink obj="co_3" qRef="q2_49_43"/>
                <iLink obj="co_3" qRef="q2_50_44"/>
                <iLink obj="co_3" qRef="q11_52_423"/>
                <iLink obj="co_3" qRef="q16_52_574"/>
                <iLink obj="co_3" qRef="q2_58_52"/>
                <iLink obj="co_3" qRef="q11_60_431"/>
                <iLink obj="co_3" qRef="q6_61_222"/>
                <iLink obj="co_3" qRef="q6_63_224"/>
                <iLink obj="co_3" qRef="q6_64_225"/>
                <iLink obj="co_3" qRef="q6_65_226"/>
                <iLink obj="co_3" qRef="q6_66_227"/>
                <iLink obj="co_4" qRef="q2_6_6"/>
                <iLink obj="co_5" qRef="q6_1_172"/>
                <iLink obj="co_5" qRef="q14_2_484"/>
                <iLink obj="co_5" qRef="q11_3_374"/>
                <iLink obj="co_5" qRef="q16_8_531"/>
                <iLink obj="co_5" qRef="q2_10_10"/>
                <iLink obj="co_5" qRef="q6_13_181"/>
                <iLink obj="co_6" qRef="q15_1_502"/>
                <iLink obj="co_6" qRef="q8_3_273"/>
                <iLink obj="co_6" qRef="q2_11_11"/>
                <iLink obj="co_6" qRef="q3_26_82"/>
                <iLink obj="co_6" qRef="q2_37_31"/>
                <iLink obj="co_6" qRef="q2_39_33"/>
                <iLink obj="co_6" qRef="q2_40_34"/>
                <iLink obj="co_6" qRef="q2_41_35"/>
                <iLink obj="co_6" qRef="q2_44_38"/>
                <iLink obj="co_7" qRef="q2_12_12"/>
                <iLink obj="co_7" qRef="q8_13_282"/>
                <iLink obj="co_7" qRef="q2_16_14"/>
                <iLink obj="co_7" qRef="q3_51_102"/>
                <iLink obj="co_7" qRef="q3_54_105"/>
                <iLink obj="co_8" qRef="q7_12_247"/>
                <iLink obj="co_9" qRef="q16_3_527"/>
                <iLink obj="co_9" qRef="q9_5_312"/>
                <iLink obj="co_9" qRef="q8_6_276"/>
                <iLink obj="co_9" qRef="q12_8_443"/>
                <iLink obj="co_9" qRef="q5_9_162"/>
                <iLink obj="co_9" qRef="q13_9_468"/>
                <iLink obj="co_9" qRef="q15_9_509"/>
                <iLink obj="co_9" qRef="q7_10_245"/>
                <iLink obj="co_9" qRef="q8_10_280"/>
                <iLink obj="co_9" qRef="q5_11_164"/>
                <iLink obj="co_9" qRef="q13_11_470"/>
                <iLink obj="co_9" qRef="q16_14_537"/>
                <iLink obj="co_9" qRef="q8_15_284"/>
                <iLink obj="co_9" qRef="q13_16_475"/>
                <iLink obj="co_9" qRef="q11_17_388"/>
                <iLink obj="co_9" qRef="q12_17_452"/>
                <iLink obj="co_9" qRef="q16_17_540"/>
                <iLink obj="co_9" qRef="q2_18_16"/>
                <iLink obj="co_9" qRef="q2_19_17"/>
                <iLink obj="co_9" qRef="q13_19_478"/>
                <iLink obj="co_9" qRef="q7_20_255"/>
                <iLink obj="co_9" qRef="q16_20_543"/>
                <iLink obj="co_9" qRef="q2_21_19"/>
                <iLink obj="co_9" qRef="q7_22_257"/>
                <iLink obj="co_9" qRef="q8_22_291"/>
                <iLink obj="co_9" qRef="q4_23_128"/>
                <iLink obj="co_9" qRef="q8_23_292"/>
                <iLink obj="co_9" qRef="q13_23_482"/>
                <iLink obj="co_9" qRef="q4_24_129"/>
                <iLink obj="co_9" qRef="q6_25_190"/>
                <iLink obj="co_9" qRef="q8_25_294"/>
                <iLink obj="co_9" qRef="q6_26_191"/>
                <iLink obj="co_9" qRef="q11_26_397"/>
                <iLink obj="co_9" qRef="q10_27_354"/>
                <iLink obj="co_9" qRef="q2_28_24"/>
                <iLink obj="co_9" qRef="q10_28_355"/>
                <iLink obj="co_9" qRef="q16_29_552"/>
                <iLink obj="co_9" qRef="q10_30_357"/>
                <iLink obj="co_9" qRef="q16_30_553"/>
                <iLink obj="co_9" qRef="q2_31_27"/>
                <iLink obj="co_9" qRef="q16_32_555"/>
                <iLink obj="co_9" qRef="q10_33_360"/>
                <iLink obj="co_9" qRef="q2_33_29"/>
                <iLink obj="co_9" qRef="q16_33_556"/>
                <iLink obj="co_9" qRef="q10_34_361"/>
                <iLink obj="co_9" qRef="q16_34_557"/>
                <iLink obj="co_9" qRef="q6_35_199"/>
                <iLink obj="co_9" qRef="q16_35_558"/>
                <iLink obj="co_9" qRef="q16_36_559"/>
                <iLink obj="co_9" qRef="q16_38_561"/>
                <iLink obj="co_9" qRef="q16_39_562"/>
                <iLink obj="co_9" qRef="q3_40_93"/>
                <iLink obj="co_9" qRef="q2_42_36"/>
                <iLink obj="co_9" qRef="q16_44_566"/>
                <iLink obj="co_9" qRef="q16_45_567"/>
                <iLink obj="co_9" qRef="q11_46_417"/>
                <iLink obj="co_9" qRef="q16_46_568"/>
                <iLink obj="co_9" qRef="q16_47_569"/>
                <iLink obj="co_9" qRef="q11_48_419"/>
                <iLink obj="co_9" qRef="q16_48_570"/>
                <iLink obj="co_9" qRef="q2_49_43"/>
                <iLink obj="co_9" qRef="q2_50_44"/>
                <iLink obj="co_9" qRef="q11_50_421"/>
                <iLink obj="co_9" qRef="q16_52_574"/>
                <iLink obj="co_9" qRef="q11_53_424"/>
                <iLink obj="co_9" qRef="q11_55_426"/>
                <iLink obj="co_9" qRef="q16_56_577"/>
                <iLink obj="co_9" qRef="q11_59_430"/>
                <iLink obj="co_9" qRef="q6_61_222"/>
                <iLink obj="co_9" qRef="q11_63_434"/>
                <iLink obj="co_9" qRef="q6_64_225"/>
                <iLink obj="co_10" qRef="q5_2_155"/>
                <iLink obj="co_10" qRef="q2_6_6"/>
                <iLink obj="co_10" qRef="q5_8_161"/>
                <iLink obj="co_10" qRef="q7_12_247"/>
                <iLink obj="co_10" qRef="q11_13_384"/>
                <iLink obj="co_10" qRef="q10_21_348"/>
                <iLink obj="co_10" qRef="q3_23_80"/>
                <iLink obj="co_10" qRef="q3_42_95"/>
                <iLink obj="co_10" qRef="q3_62_111"/>
                <iLink obj="co_10" qRef="q2_68_62"/>
                <iLink obj="co_11" qRef="q7_1_238"/>
                <iLink obj="co_11" qRef="q4_2_115"/>
                <iLink obj="co_11" qRef="q13_2_461"/>
                <iLink obj="co_11" qRef="q6_3_174"/>
                <iLink obj="co_11" qRef="q3_5_67"/>
                <iLink obj="co_11" qRef="q2_6_6"/>
                <iLink obj="co_11" qRef="q4_10_118"/>
                <iLink obj="co_11" qRef="q13_10_469"/>
                <iLink obj="co_11" qRef="q3_11_72"/>
                <iLink obj="co_11" qRef="q8_11_281"/>
                <iLink obj="co_11" qRef="q3_12_73"/>
                <iLink obj="co_11" qRef="q2_13_13"/>
                <iLink obj="co_11" qRef="q14_13_495"/>
                <iLink obj="co_11" qRef="q5_15_168"/>
                <iLink obj="co_11" qRef="q2_16_14"/>
                <iLink obj="co_11" qRef="q4_17_124"/>
                <iLink obj="co_11" qRef="q3_18_77"/>
                <iLink obj="co_11" qRef="q4_18_125"/>
                <iLink obj="co_11" qRef="q7_19_254"/>
                <iLink obj="co_11" qRef="q4_19_126"/>
                <iLink obj="co_11" qRef="q11_20_391"/>
                <iLink obj="co_11" qRef="q15_20_520"/>
                <iLink obj="co_11" qRef="q6_22_188"/>
                <iLink obj="co_11" qRef="q6_27_192"/>
                <iLink obj="co_11" qRef="q3_28_84"/>
                <iLink obj="co_11" qRef="q2_30_26"/>
                <iLink obj="co_11" qRef="q8_34_303"/>
                <iLink obj="co_11" qRef="q8_35_304"/>
                <iLink obj="co_11" qRef="q6_37_200"/>
                <iLink obj="co_11" qRef="q6_38_201"/>
                <iLink obj="co_11" qRef="q10_41_368"/>
                <iLink obj="co_11" qRef="q3_44_97"/>
                <iLink obj="co_11" qRef="q6_46_209"/>
                <iLink obj="co_11" qRef="q4_48_147"/>
                <iLink obj="co_11" qRef="q2_50_44"/>
                <iLink obj="co_11" qRef="q3_50_101"/>
                <iLink obj="co_11" qRef="q3_53_104"/>
                <iLink obj="co_11" qRef="q4_53_151"/>
                <iLink obj="co_11" qRef="q6_59_221"/>
                <iLink obj="co_11" qRef="q6_69_230"/>
                <iLink obj="co_12" qRef="q12_3_438"/>
                <iLink obj="co_12" qRef="q3_7_69"/>
                <iLink obj="co_12" qRef="q10_7_334"/>
                <iLink obj="co_12" qRef="q3_10_71"/>
                <iLink obj="co_12" qRef="q5_10_163"/>
                <iLink obj="co_12" qRef="q9_14_321"/>
                <iLink obj="co_12" qRef="q14_14_496"/>
                <iLink obj="co_12" qRef="q10_15_342"/>
                <iLink obj="co_12" qRef="q7_17_252"/>
                <iLink obj="co_12" qRef="q10_17_344"/>
                <iLink obj="co_12" qRef="q14_18_500"/>
                <iLink obj="co_12" qRef="q10_22_349"/>
                <iLink obj="co_12" qRef="q3_27_83"/>
                <iLink obj="co_12" qRef="q4_32_134"/>
                <iLink obj="co_12" qRef="q3_34_89"/>
                <iLink obj="co_12" qRef="q2_38_32"/>
                <iLink obj="co_12" qRef="q3_39_92"/>
                <iLink obj="co_12" qRef="q4_39_141"/>
                <iLink obj="co_12" qRef="q2_40_34"/>
                <iLink obj="co_12" qRef="q2_41_35"/>
                <iLink obj="co_12" qRef="q2_43_37"/>
                <iLink obj="co_12" qRef="q2_53_47"/>
                <iLink obj="co_12" qRef="q2_54_48"/>
                <iLink obj="co_12" qRef="q2_56_50"/>
                <iLink obj="co_12" qRef="q2_57_51"/>
                <iLink obj="co_12" qRef="q2_59_53"/>
                <iLink obj="co_12" qRef="q2_62_56"/>
                <iLink obj="co_12" qRef="q2_63_57"/>
                <iLink obj="co_12" qRef="q3_63_112"/>
                <iLink obj="co_13" qRef="q8_19_288"/>
                <iLink obj="co_13" qRef="q8_25_294"/>
                <iLink obj="co_13" qRef="q11_27_398"/>
                <iLink obj="co_13" qRef="q2_45_39"/>
                <iLink obj="co_13" qRef="q2_49_43"/>
                <iLink obj="co_13" qRef="q2_50_44"/>
                <iLink obj="co_13" qRef="q2_60_54"/>
                <iLink obj="co_14" qRef="q2_44_38"/>
                <iLink obj="co_15" qRef="q5_6_159"/>
                <iLink obj="co_15" qRef="q5_7_160"/>
                <iLink obj="co_15" qRef="q12_10_445"/>
                <iLink obj="co_15" qRef="q12_11_446"/>
                <iLink obj="co_15" qRef="q12_14_449"/>
                <iLink obj="co_15" qRef="q7_14_249"/>
                <iLink obj="co_15" qRef="q11_21_392"/>
                <iLink obj="co_15" qRef="q6_23_189"/>
                <iLink obj="co_15" qRef="q6_65_226"/>
                <iLink obj="co_16" qRef="q12_3_438"/>
                <iLink obj="co_16" qRef="q5_3_156"/>
                <iLink obj="co_16" qRef="q13_3_462"/>
                <iLink obj="co_16" qRef="q6_4_175"/>
                <iLink obj="co_16" qRef="q11_4_375"/>
                <iLink obj="co_16" qRef="q8_5_275"/>
                <iLink obj="co_16" qRef="q11_5_376"/>
                <iLink obj="co_16" qRef="q12_5_440"/>
                <iLink obj="co_16" qRef="q12_6_441"/>
                <iLink obj="co_16" qRef="q3_7_69"/>
                <iLink obj="co_16" qRef="q10_7_334"/>
                <iLink obj="co_16" qRef="q8_8_278"/>
                <iLink obj="co_16" qRef="q14_8_490"/>
                <iLink obj="co_16" qRef="q11_9_380"/>
                <iLink obj="co_16" qRef="q3_10_71"/>
                <iLink obj="co_16" qRef="q14_10_492"/>
                <iLink obj="co_16" qRef="q3_11_72"/>
                <iLink obj="co_16" qRef="q8_11_281"/>
                <iLink obj="co_16" qRef="q16_11_534"/>
                <iLink obj="co_16" qRef="q2_12_12"/>
                <iLink obj="co_16" qRef="q3_12_73"/>
                <iLink obj="co_16" qRef="q16_12_535"/>
                <iLink obj="co_16" qRef="q8_13_282"/>
                <iLink obj="co_16" qRef="q2_13_13"/>
                <iLink obj="co_16" qRef="q16_13_536"/>
                <iLink obj="co_16" qRef="q15_13_513"/>
                <iLink obj="co_16" qRef="q3_14_74"/>
                <iLink obj="co_16" qRef="q14_14_496"/>
                <iLink obj="co_16" qRef="q9_14_321"/>
                <iLink obj="co_16" qRef="q6_15_182"/>
                <iLink obj="co_16" qRef="q10_15_342"/>
                <iLink obj="co_16" qRef="q11_15_386"/>
                <iLink obj="co_16" qRef="q3_16_76"/>
                <iLink obj="co_16" qRef="q10_17_344"/>
                <iLink obj="co_16" qRef="q6_17_184"/>
                <iLink obj="co_16" qRef="q2_17_15"/>
                <iLink obj="co_16" qRef="q14_18_500"/>
                <iLink obj="co_16" qRef="q14_19_501"/>
                <iLink obj="co_16" qRef="q10_22_349"/>
                <iLink obj="co_16" qRef="q6_29_194"/>
                <iLink obj="co_16" qRef="q10_29_356"/>
                <iLink obj="co_16" qRef="q4_32_134"/>
                <iLink obj="co_16" qRef="q6_32_196"/>
                <iLink obj="co_16" qRef="q8_34_303"/>
                <iLink obj="co_16" qRef="q8_35_304"/>
                <iLink obj="co_16" qRef="q6_38_201"/>
                <iLink obj="co_16" qRef="q2_38_32"/>
                <iLink obj="co_16" qRef="q4_39_141"/>
                <iLink obj="co_16" qRef="q6_40_203"/>
                <iLink obj="co_16" qRef="q6_44_207"/>
                <iLink obj="co_16" qRef="q6_45_208"/>
                <iLink obj="co_16" qRef="q6_50_213"/>
                <iLink obj="co_16" qRef="q3_51_102"/>
                <iLink obj="co_16" qRef="q6_54_216"/>
                <iLink obj="co_16" qRef="q4_55_152"/>
                <iLink obj="co_16" qRef="q2_56_50"/>
                <iLink obj="co_16" qRef="q2_57_51"/>
                <iLink obj="co_16" qRef="q6_57_219"/>
                <iLink obj="co_16" qRef="q2_59_53"/>
                <iLink obj="co_16" qRef="q3_63_112"/>
                <iLink obj="co_17" qRef="q9_3_310"/>
                <iLink obj="co_17" qRef="q13_4_463"/>
                <iLink obj="co_17" qRef="q12_5_440"/>
                <iLink obj="co_17" qRef="q13_5_464"/>
                <iLink obj="co_17" qRef="q5_6_159"/>
                <iLink obj="co_17" qRef="q12_6_441"/>
                <iLink obj="co_17" qRef="q5_7_160"/>
                <iLink obj="co_17" qRef="q11_7_378"/>
                <iLink obj="co_17" qRef="q5_8_161"/>
                <iLink obj="co_17" qRef="q14_8_490"/>
                <iLink obj="co_17" qRef="q11_9_380"/>
                <iLink obj="co_17" qRef="q3_11_72"/>
                <iLink obj="co_17" qRef="q12_11_446"/>
                <iLink obj="co_17" qRef="q16_11_534"/>
                <iLink obj="co_17" qRef="q2_12_12"/>
                <iLink obj="co_17" qRef="q2_13_13"/>
                <iLink obj="co_17" qRef="q4_13_121"/>
                <iLink obj="co_17" qRef="q14_13_495"/>
                <iLink obj="co_17" qRef="q12_14_449"/>
                <iLink obj="co_17" qRef="q3_16_76"/>
                <iLink obj="co_17" qRef="q14_16_498"/>
                <iLink obj="co_17" qRef="q6_29_194"/>
                <iLink obj="co_17" qRef="q10_29_356"/>
                <iLink obj="co_17" qRef="q4_31_133"/>
                <iLink obj="co_17" qRef="q6_32_196"/>
                <iLink obj="co_17" qRef="q4_37_139"/>
                <iLink obj="co_17" qRef="q6_40_203"/>
                <iLink obj="co_17" qRef="q6_42_205"/>
                <iLink obj="co_17" qRef="q6_45_208"/>
                <iLink obj="co_17" qRef="q6_50_213"/>
                <iLink obj="co_17" qRef="q4_51_150"/>
                <iLink obj="co_17" qRef="q6_54_216"/>
                <iLink obj="co_17" qRef="q4_55_152"/>
                <iLink obj="co_17" qRef="q6_57_219"/>
                <iLink obj="co_17" qRef="q3_59_109"/>
                <iLink obj="co_18" qRef="q12_9_444"/>
                <iLink obj="co_18" qRef="q11_18_389"/>
                <iLink obj="co_18" qRef="q11_24_395"/>
                <iLink obj="co_18" qRef="q4_24_129"/>
                <iLink obj="co_18" qRef="q6_25_190"/>
                <iLink obj="co_18" qRef="q6_26_191"/>
                <iLink obj="co_18" qRef="q10_28_355"/>
                <iLink obj="co_18" qRef="q2_32_28"/>
                <iLink obj="co_18" qRef="q10_33_360"/>
                <iLink obj="co_18" qRef="q11_51_422"/>
                <iLink obj="co_18" qRef="q6_63_224"/>
                <iLink obj="co_19" qRef="q3_32_87"/>
                <iLink obj="co_20" qRef="q3_44_97"/>
                <iLink obj="co_21" qRef="q3_11_72"/>
                <iLink obj="co_22" qRef="q10_3_330"/>
                <iLink obj="co_22" qRef="q3_8_70"/>
                <iLink obj="co_22" qRef="q7_15_250"/>
                <iLink obj="co_22" qRef="q6_16_183"/>
                <iLink obj="co_22" qRef="q3_18_77"/>
                <iLink obj="co_22" qRef="q8_26_295"/>
                <iLink obj="co_22" qRef="q8_27_296"/>
                <iLink obj="co_22" qRef="q4_36_138"/>
                <iLink obj="co_22" qRef="q11_37_408"/>
                <iLink obj="co_22" qRef="q4_46_146"/>
                <iLink obj="co_22" qRef="q6_47_210"/>
                <iLink obj="co_22" qRef="q6_56_218"/>
                <iLink obj="co_22" qRef="q3_66_114"/>
                <iLink obj="co_22" qRef="q6_71_232"/>
                <iLink obj="co_23" qRef="q3_53_104"/>
                <iLink obj="co_24" qRef="q3_12_73"/>
                <iLink obj="co_25" qRef="q6_46_209"/>
                <iLink obj="co_25" qRef="q6_69_230"/>
                <iLink obj="co_26" qRef="q10_1_328"/>
                <iLink obj="co_26" qRef="q11_1_372"/>
                <iLink obj="co_26" qRef="q2_9_9"/>
                <iLink obj="co_26" qRef="q9_10_317"/>
                <iLink obj="co_26" qRef="q9_12_319"/>
                <iLink obj="co_26" qRef="q10_22_349"/>
                <iLink obj="co_26" qRef="q11_41_412"/>
                <iLink obj="co_26" qRef="q3_46_99"/>
                <iLink obj="co_26" qRef="q4_49_148"/>
                <iLink obj="co_26" qRef="q6_58_220"/>
                <iLink obj="co_26" qRef="q11_60_431"/>
                <iLink obj="co_27" qRef="q12_1_436"/>
                <iLink obj="co_27" qRef="q13_1_460"/>
                <iLink obj="co_27" qRef="q14_1_483"/>
                <iLink obj="co_27" qRef="q9_1_308"/>
                <iLink obj="co_27" qRef="q10_1_328"/>
                <iLink obj="co_27" qRef="q15_1_502"/>
                <iLink obj="co_27" qRef="q3_2_64"/>
                <iLink obj="co_27" qRef="q7_5_242"/>
                <iLink obj="co_27" qRef="q9_10_317"/>
                <iLink obj="co_27" qRef="q13_17_476"/>
                <iLink obj="co_27" qRef="q10_22_349"/>
                <iLink obj="co_27" qRef="q15_24_524"/>
                <iLink obj="co_27" qRef="q7_26_261"/>
                <iLink obj="co_27" qRef="q7_29_264"/>
                <iLink obj="co_27" qRef="q7_32_267"/>
                <iLink obj="co_27" qRef="q4_56_153"/>
                <iLink obj="co_27" qRef="q3_61_110"/>
                <iLink obj="co_27" qRef="q6_67_228"/>
                <iLink obj="co_28" qRef="q3_26_82"/>
                <iLink obj="co_28" qRef="q3_27_83"/>
                <iLink obj="co_29" qRef="q3_28_84"/>
                <iLink obj="co_30" qRef="q3_5_67"/>
                <iLink obj="co_31" qRef="q3_32_87"/>
                <iLink obj="co_32" qRef="q15_1_502"/>
                <iLink obj="co_32" qRef="q4_2_115"/>
                <iLink obj="co_32" qRef="q7_2_239"/>
                <iLink obj="co_32" qRef="q9_2_309"/>
                <iLink obj="co_32" qRef="q10_2_329"/>
                <iLink obj="co_32" qRef="q11_2_373"/>
                <iLink obj="co_32" qRef="q6_2_173"/>
                <iLink obj="co_32" qRef="q5_2_155"/>
                <iLink obj="co_32" qRef="q3_2_64"/>
                <iLink obj="co_32" qRef="q13_2_461"/>
                <iLink obj="co_32" qRef="q14_2_484"/>
                <iLink obj="co_32" qRef="q15_2_503"/>
                <iLink obj="co_32" qRef="q16_2_526"/>
                <iLink obj="co_32" qRef="q9_3_310"/>
                <iLink obj="co_32" qRef="q10_3_330"/>
                <iLink obj="co_32" qRef="q11_3_374"/>
                <iLink obj="co_32" qRef="q3_3_65"/>
                <iLink obj="co_32" qRef="q2_3_3"/>
                <iLink obj="co_32" qRef="q14_3_485"/>
                <iLink obj="co_32" qRef="q10_4_331"/>
                <iLink obj="co_32" qRef="q4_4_116"/>
                <iLink obj="co_32" qRef="q3_4_66"/>
                <iLink obj="co_32" qRef="q13_4_463"/>
                <iLink obj="co_32" qRef="q14_4_486"/>
                <iLink obj="co_32" qRef="q16_4_528"/>
                <iLink obj="co_32" qRef="q5_5_158"/>
                <iLink obj="co_32" qRef="q13_5_464"/>
                <iLink obj="co_32" qRef="q16_5_529"/>
                <iLink obj="co_32" qRef="q10_6_333"/>
                <iLink obj="co_32" qRef="q11_6_377"/>
                <iLink obj="co_32" qRef="q3_6_68"/>
                <iLink obj="co_32" qRef="q15_6_507"/>
                <iLink obj="co_32" qRef="q5_7_160"/>
                <iLink obj="co_32" qRef="q11_7_378"/>
                <iLink obj="co_32" qRef="q2_7_7"/>
                <iLink obj="co_32" qRef="q13_7_466"/>
                <iLink obj="co_32" qRef="q14_7_489"/>
                <iLink obj="co_32" qRef="q16_7_530"/>
                <iLink obj="co_32" qRef="q7_7_243"/>
                <iLink obj="co_32" qRef="q9_8_315"/>
                <iLink obj="co_32" qRef="q10_8_335"/>
                <iLink obj="co_32" qRef="q4_8_117"/>
                <iLink obj="co_32" qRef="q3_8_70"/>
                <iLink obj="co_32" qRef="q15_8_508"/>
                <iLink obj="co_32" qRef="q16_8_531"/>
                <iLink obj="co_32" qRef="q7_9_244"/>
                <iLink obj="co_32" qRef="q8_9_279"/>
                <iLink obj="co_32" qRef="q9_9_316"/>
                <iLink obj="co_32" qRef="q12_9_444"/>
                <iLink obj="co_32" qRef="q13_9_468"/>
                <iLink obj="co_32" qRef="q16_9_532"/>
                <iLink obj="co_32" qRef="q5_10_163"/>
                <iLink obj="co_32" qRef="q8_10_280"/>
                <iLink obj="co_32" qRef="q10_10_337"/>
                <iLink obj="co_32" qRef="q2_10_10"/>
                <iLink obj="co_32" qRef="q13_10_469"/>
                <iLink obj="co_32" qRef="q16_10_533"/>
                <iLink obj="co_32" qRef="q9_11_318"/>
                <iLink obj="co_32" qRef="q10_11_338"/>
                <iLink obj="co_32" qRef="q12_11_446"/>
                <iLink obj="co_32" qRef="q13_11_470"/>
                <iLink obj="co_32" qRef="q14_11_493"/>
                <iLink obj="co_32" qRef="q10_12_339"/>
                <iLink obj="co_32" qRef="q4_12_120"/>
                <iLink obj="co_32" qRef="q15_12_512"/>
                <iLink obj="co_32" qRef="q4_13_121"/>
                <iLink obj="co_32" qRef="q7_13_248"/>
                <iLink obj="co_32" qRef="q9_13_320"/>
                <iLink obj="co_32" qRef="q11_13_384"/>
                <iLink obj="co_32" qRef="q12_13_448"/>
                <iLink obj="co_32" qRef="q6_13_181"/>
                <iLink obj="co_32" qRef="q5_13_166"/>
                <iLink obj="co_32" qRef="q14_13_495"/>
                <iLink obj="co_32" qRef="q7_14_249"/>
                <iLink obj="co_32" qRef="q8_14_283"/>
                <iLink obj="co_32" qRef="q11_14_385"/>
                <iLink obj="co_32" qRef="q12_14_449"/>
                <iLink obj="co_32" qRef="q5_14_167"/>
                <iLink obj="co_32" qRef="q4_14_122"/>
                <iLink obj="co_32" qRef="q9_15_322"/>
                <iLink obj="co_32" qRef="q5_15_168"/>
                <iLink obj="co_32" qRef="q13_15_474"/>
                <iLink obj="co_32" qRef="q14_15_497"/>
                <iLink obj="co_32" qRef="q7_16_251"/>
                <iLink obj="co_32" qRef="q12_16_451"/>
                <iLink obj="co_32" qRef="q4_16_123"/>
                <iLink obj="co_32" qRef="q14_16_498"/>
                <iLink obj="co_32" qRef="q16_16_539"/>
                <iLink obj="co_32" qRef="q9_16_323"/>
                <iLink obj="co_32" qRef="q4_17_124"/>
                <iLink obj="co_32" qRef="q14_17_499"/>
                <iLink obj="co_32" qRef="q15_17_517"/>
                <iLink obj="co_32" qRef="q4_18_125"/>
                <iLink obj="co_32" qRef="q6_18_185"/>
                <iLink obj="co_32" qRef="q13_18_477"/>
                <iLink obj="co_32" qRef="q16_18_541"/>
                <iLink obj="co_32" qRef="q4_19_126"/>
                <iLink obj="co_32" qRef="q9_19_326"/>
                <iLink obj="co_32" qRef="q10_19_346"/>
                <iLink obj="co_32" qRef="q12_19_454"/>
                <iLink obj="co_32" qRef="q3_19_78"/>
                <iLink obj="co_32" qRef="q13_19_478"/>
                <iLink obj="co_32" qRef="q15_19_519"/>
                <iLink obj="co_32" qRef="q8_20_289"/>
                <iLink obj="co_32" qRef="q10_20_347"/>
                <iLink obj="co_32" qRef="q4_20_127"/>
                <iLink obj="co_32" qRef="q15_20_520"/>
                <iLink obj="co_32" qRef="q7_21_256"/>
                <iLink obj="co_32" qRef="q8_21_290"/>
                <iLink obj="co_32" qRef="q10_21_348"/>
                <iLink obj="co_32" qRef="q11_21_392"/>
                <iLink obj="co_32" qRef="q12_21_456"/>
                <iLink obj="co_32" qRef="q3_21_79"/>
                <iLink obj="co_32" qRef="q7_22_257"/>
                <iLink obj="co_32" qRef="q8_22_291"/>
                <iLink obj="co_32" qRef="q13_22_481"/>
                <iLink obj="co_32" qRef="q15_22_522"/>
                <iLink obj="co_32" qRef="q16_22_545"/>
                <iLink obj="co_32" qRef="q8_23_292"/>
                <iLink obj="co_32" qRef="q10_23_350"/>
                <iLink obj="co_32" qRef="q11_23_394"/>
                <iLink obj="co_32" qRef="q4_24_129"/>
                <iLink obj="co_32" qRef="q7_24_259"/>
                <iLink obj="co_32" qRef="q8_24_293"/>
                <iLink obj="co_32" qRef="q10_24_351"/>
                <iLink obj="co_32" qRef="q12_24_459"/>
                <iLink obj="co_32" qRef="q3_24_81"/>
                <iLink obj="co_32" qRef="q16_24_547"/>
                <iLink obj="co_32" qRef="q11_25_396"/>
                <iLink obj="co_32" qRef="q4_25_130"/>
                <iLink obj="co_32" qRef="q10_26_353"/>
                <iLink obj="co_32" qRef="q11_26_397"/>
                <iLink obj="co_32" qRef="q6_26_191"/>
                <iLink obj="co_32" qRef="q16_26_549"/>
                <iLink obj="co_32" qRef="q4_27_132"/>
                <iLink obj="co_32" qRef="q11_28_399"/>
                <iLink obj="co_32" qRef="q3_28_84"/>
                <iLink obj="co_32" qRef="q16_28_551"/>
                <iLink obj="co_32" qRef="q8_29_298"/>
                <iLink obj="co_32" qRef="q3_29_85"/>
                <iLink obj="co_32" qRef="q3_30_86"/>
                <iLink obj="co_32" qRef="q11_30_401"/>
                <iLink obj="co_32" qRef="q4_31_133"/>
                <iLink obj="co_32" qRef="q10_31_358"/>
                <iLink obj="co_32" qRef="q16_31_554"/>
                <iLink obj="co_32" qRef="q8_32_301"/>
                <iLink obj="co_32" qRef="q3_33_88"/>
                <iLink obj="co_32" qRef="q2_33_29"/>
                <iLink obj="co_32" qRef="q16_33_556"/>
                <iLink obj="co_32" qRef="q4_34_136"/>
                <iLink obj="co_32" qRef="q6_34_198"/>
                <iLink obj="co_32" qRef="q16_34_557"/>
                <iLink obj="co_32" qRef="q4_35_137"/>
                <iLink obj="co_32" qRef="q6_35_199"/>
                <iLink obj="co_32" qRef="q16_35_558"/>
                <iLink obj="co_32" qRef="q8_36_305"/>
                <iLink obj="co_32" qRef="q11_36_407"/>
                <iLink obj="co_32" qRef="q16_36_559"/>
                <iLink obj="co_32" qRef="q3_37_91"/>
                <iLink obj="co_32" qRef="q4_37_139"/>
                <iLink obj="co_32" qRef="q8_37_306"/>
                <iLink obj="co_32" qRef="q10_38_365"/>
                <iLink obj="co_32" qRef="q10_40_367"/>
                <iLink obj="co_32" qRef="q3_41_94"/>
                <iLink obj="co_32" qRef="q6_42_205"/>
                <iLink obj="co_32" qRef="q4_42_144"/>
                <iLink obj="co_32" qRef="q3_43_96"/>
                <iLink obj="co_32" qRef="q11_43_414"/>
                <iLink obj="co_32" qRef="q3_44_97"/>
                <iLink obj="co_32" qRef="q4_44_145"/>
                <iLink obj="co_32" qRef="q11_44_415"/>
                <iLink obj="co_32" qRef="q2_44_38"/>
                <iLink obj="co_32" qRef="q16_44_566"/>
                <iLink obj="co_32" qRef="q3_45_98"/>
                <iLink obj="co_32" qRef="q16_45_567"/>
                <iLink obj="co_32" qRef="q4_46_146"/>
                <iLink obj="co_32" qRef="q2_46_40"/>
                <iLink obj="co_32" qRef="q16_46_568"/>
                <iLink obj="co_32" qRef="q6_47_210"/>
                <iLink obj="co_32" qRef="q16_47_569"/>
                <iLink obj="co_32" qRef="q4_48_147"/>
                <iLink obj="co_32" qRef="q6_48_211"/>
                <iLink obj="co_32" qRef="q2_48_42"/>
                <iLink obj="co_32" qRef="q16_48_570"/>
                <iLink obj="co_32" qRef="q3_49_100"/>
                <iLink obj="co_32" qRef="q6_49_212"/>
                <iLink obj="co_32" qRef="q11_49_420"/>
                <iLink obj="co_32" qRef="q3_50_101"/>
                <iLink obj="co_32" qRef="q4_51_150"/>
                <iLink obj="co_32" qRef="q6_51_214"/>
                <iLink obj="co_32" qRef="q2_51_45"/>
                <iLink obj="co_32" qRef="q16_51_573"/>
                <iLink obj="co_32" qRef="q3_52_103"/>
                <iLink obj="co_32" qRef="q2_52_46"/>
                <iLink obj="co_32" qRef="q4_53_151"/>
                <iLink obj="co_32" qRef="q6_53_215"/>
                <iLink obj="co_32" qRef="q3_54_105"/>
                <iLink obj="co_32" qRef="q2_54_48"/>
                <iLink obj="co_32" qRef="q3_55_106"/>
                <iLink obj="co_32" qRef="q6_55_217"/>
                <iLink obj="co_32" qRef="q2_55_49"/>
                <iLink obj="co_32" qRef="q16_55_576"/>
                <iLink obj="co_32" qRef="q3_56_107"/>
                <iLink obj="co_32" qRef="q16_56_577"/>
                <iLink obj="co_32" qRef="q6_58_220"/>
                <iLink obj="co_32" qRef="q11_58_429"/>
                <iLink obj="co_32" qRef="q3_58_108"/>
                <iLink obj="co_32" qRef="q16_58_579"/>
                <iLink obj="co_32" qRef="q3_59_109"/>
                <iLink obj="co_32" qRef="q6_59_221"/>
                <iLink obj="co_32" qRef="q2_61_55"/>
                <iLink obj="co_32" qRef="q11_61_432"/>
                <iLink obj="co_32" qRef="q2_62_56"/>
                <iLink obj="co_32" qRef="q2_63_57"/>
                <iLink obj="co_32" qRef="q6_64_225"/>
                <iLink obj="co_32" qRef="q11_64_435"/>
                <iLink obj="co_32" qRef="q6_66_227"/>
                <iLink obj="co_32" qRef="q2_66_60"/>
                <iLink obj="co_32" qRef="q6_68_229"/>
                <iLink obj="co_32" qRef="q2_69_63"/>
                <iLink obj="co_33" qRef="q3_28_84"/>
                <iLink obj="co_34" qRef="q3_4_66"/>
                <iLink obj="co_34" qRef="q6_11_179"/>
                <iLink obj="co_34" qRef="q8_28_297"/>
                <iLink obj="co_34" qRef="q10_41_368"/>
                <iLink obj="co_34" qRef="q2_66_60"/>
                <iLink obj="co_34" qRef="q2_69_63"/>
                <iLink obj="co_35" qRef="q3_26_82"/>
                <iLink obj="co_35" qRef="q3_27_83"/>
                <iLink obj="co_36" qRef="q5_4_157"/>
                <iLink obj="co_36" qRef="q2_5_5"/>
                <iLink obj="co_36" qRef="q12_7_442"/>
                <iLink obj="co_36" qRef="q12_12_447"/>
                <iLink obj="co_36" qRef="q13_12_471"/>
                <iLink obj="co_36" qRef="q12_18_453"/>
                <iLink obj="co_36" qRef="q13_21_480"/>
                <iLink obj="co_36" qRef="q13_22_481"/>
                <iLink obj="co_36" qRef="q2_28_24"/>
                <iLink obj="co_36" qRef="q16_32_555"/>
                <iLink obj="co_36" qRef="q3_39_92"/>
                <iLink obj="co_36" qRef="q3_42_95"/>
                <iLink obj="co_36" qRef="q16_43_565"/>
                <iLink obj="co_36" qRef="q3_62_111"/>
                <iLink obj="co_37" qRef="q11_4_375"/>
                <iLink obj="co_37" qRef="q14_6_488"/>
                <iLink obj="co_37" qRef="q13_8_467"/>
                <iLink obj="co_37" qRef="q9_10_317"/>
                <iLink obj="co_37" qRef="q3_15_75"/>
                <iLink obj="co_37" qRef="q13_17_476"/>
                <iLink obj="co_37" qRef="q3_21_79"/>
                <iLink obj="co_37" qRef="q6_39_202"/>
                <iLink obj="co_37" qRef="q3_40_93"/>
                <iLink obj="co_37" qRef="q2_44_38"/>
                <iLink obj="co_37" qRef="q2_51_45"/>
                <iLink obj="co_37" qRef="q2_60_54"/>
                <iLink obj="co_37" qRef="q2_64_58"/>
                <iLink obj="co_38" qRef="q3_5_67"/>
                <iLink obj="co_38" qRef="q3_6_68"/>
                <iLink obj="co_39" qRef="q5_1_154"/>
                <iLink obj="co_39" qRef="q11_2_373"/>
                <iLink obj="co_39" qRef="q2_2_2"/>
                <iLink obj="co_39" qRef="q14_3_485"/>
                <iLink obj="co_39" qRef="q5_5_158"/>
                <iLink obj="co_39" qRef="q12_6_441"/>
                <iLink obj="co_39" qRef="q14_6_488"/>
                <iLink obj="co_39" qRef="q7_11_246"/>
                <iLink obj="co_39" qRef="q3_14_74"/>
                <iLink obj="co_39" qRef="q3_15_75"/>
                <iLink obj="co_39" qRef="q10_20_347"/>
                <iLink obj="co_39" qRef="q3_21_79"/>
                <iLink obj="co_39" qRef="q2_29_25"/>
                <iLink obj="co_39" qRef="q3_35_90"/>
                <iLink obj="co_39" qRef="q6_39_202"/>
                <iLink obj="co_39" qRef="q3_41_94"/>
                <iLink obj="co_39" qRef="q11_64_435"/>
                <iLink obj="co_39" qRef="q2_67_61"/>
                <iLink obj="co_39" qRef="q6_75_236"/>
                <iLink obj="co_40" qRef="q6_3_174"/>
                <iLink obj="co_40" qRef="q3_50_101"/>
                <iLink obj="co_40" qRef="q6_58_220"/>
                <iLink obj="co_41" qRef="q3_28_84"/>
                <iLink obj="co_42" qRef="q3_18_77"/>
                <iLink obj="co_43" qRef="q9_3_310"/>
                <iLink obj="co_43" qRef="q5_3_156"/>
                <iLink obj="co_43" qRef="q12_4_439"/>
                <iLink obj="co_43" qRef="q5_4_157"/>
                <iLink obj="co_43" qRef="q11_5_376"/>
                <iLink obj="co_43" qRef="q11_6_377"/>
                <iLink obj="co_43" qRef="q8_7_277"/>
                <iLink obj="co_43" qRef="q2_7_7"/>
                <iLink obj="co_43" qRef="q16_10_533"/>
                <iLink obj="co_43" qRef="q2_11_11"/>
                <iLink obj="co_43" qRef="q16_12_535"/>
                <iLink obj="co_43" qRef="q16_13_536"/>
                <iLink obj="co_43" qRef="q8_16_285"/>
                <iLink obj="co_43" qRef="q2_17_15"/>
                <iLink obj="co_43" qRef="q6_28_193"/>
                <iLink obj="co_43" qRef="q6_38_201"/>
                <iLink obj="co_43" qRef="q6_44_207"/>
                <iLink obj="co_43" qRef="q4_49_148"/>
                <iLink obj="co_43" qRef="q3_51_102"/>
                <iLink obj="co_43" qRef="q6_73_234"/>
                <iLink obj="co_44" qRef="q13_2_461"/>
                <iLink obj="co_44" qRef="q10_5_332"/>
                <iLink obj="co_44" qRef="q13_6_465"/>
                <iLink obj="co_44" qRef="q12_7_442"/>
                <iLink obj="co_44" qRef="q3_8_70"/>
                <iLink obj="co_44" qRef="q5_9_162"/>
                <iLink obj="co_44" qRef="q15_11_511"/>
                <iLink obj="co_44" qRef="q9_11_318"/>
                <iLink obj="co_44" qRef="q14_12_494"/>
                <iLink obj="co_44" qRef="q5_15_168"/>
                <iLink obj="co_44" qRef="q16_15_538"/>
                <iLink obj="co_44" qRef="q4_17_124"/>
                <iLink obj="co_44" qRef="q4_18_125"/>
                <iLink obj="co_44" qRef="q2_19_17"/>
                <iLink obj="co_44" qRef="q4_19_126"/>
                <iLink obj="co_44" qRef="q8_19_288"/>
                <iLink obj="co_44" qRef="q10_19_346"/>
                <iLink obj="co_44" qRef="q11_20_391"/>
                <iLink obj="co_44" qRef="q2_22_20"/>
                <iLink obj="co_44" qRef="q11_27_398"/>
                <iLink obj="co_44" qRef="q11_29_400"/>
                <iLink obj="co_44" qRef="q3_30_86"/>
                <iLink obj="co_44" qRef="q10_31_358"/>
                <iLink obj="co_44" qRef="q2_31_27"/>
                <iLink obj="co_44" qRef="q11_32_403"/>
                <iLink obj="co_44" qRef="q4_33_135"/>
                <iLink obj="co_44" qRef="q3_37_91"/>
                <iLink obj="co_44" qRef="q10_39_366"/>
                <iLink obj="co_44" qRef="q11_42_413"/>
                <iLink obj="co_44" qRef="q2_44_38"/>
                <iLink obj="co_44" qRef="q3_45_98"/>
                <iLink obj="co_44" qRef="q2_45_39"/>
                <iLink obj="co_44" qRef="q3_49_100"/>
                <iLink obj="co_44" qRef="q6_50_213"/>
                <iLink obj="co_44" qRef="q2_50_44"/>
                <iLink obj="co_44" qRef="q16_50_572"/>
                <iLink obj="co_44" qRef="q2_51_45"/>
                <iLink obj="co_44" qRef="q4_51_150"/>
                <iLink obj="co_44" qRef="q6_53_215"/>
                <iLink obj="co_44" qRef="q16_54_575"/>
                <iLink obj="co_44" qRef="q16_57_578"/>
                <iLink obj="co_44" qRef="q2_58_52"/>
                <iLink obj="co_44" qRef="q3_59_109"/>
                <iLink obj="co_44" qRef="q2_60_54"/>
                <iLink obj="co_45" qRef="q3_15_75"/>
                <iLink obj="co_45" qRef="q6_19_186"/>
                <iLink obj="co_45" qRef="q6_22_188"/>
                <iLink obj="co_45" qRef="q3_35_90"/>
                <iLink obj="co_45" qRef="q6_39_202"/>
                <iLink obj="co_46" qRef="q16_5_529"/>
                <iLink obj="co_46" qRef="q9_7_314"/>
                <iLink obj="co_46" qRef="q16_13_536"/>
                <iLink obj="co_46" qRef="q11_57_428"/>
                <iLink obj="co_46" qRef="q6_58_220"/>
                <iLink obj="co_47" qRef="q4_2_115"/>
                <iLink obj="co_47" qRef="q13_10_469"/>
                <iLink obj="co_47" qRef="q7_19_254"/>
                <iLink obj="co_48" qRef="q4_4_116"/>
                <iLink obj="co_49" qRef="q7_3_240"/>
                <iLink obj="co_49" qRef="q13_14_473"/>
                <iLink obj="co_49" qRef="q15_14_514"/>
                <iLink obj="co_49" qRef="q9_16_323"/>
                <iLink obj="co_49" qRef="q3_26_82"/>
                <iLink obj="co_49" qRef="q8_38_307"/>
                <iLink obj="co_49" qRef="q3_44_97"/>
                <iLink obj="co_49" qRef="q2_52_46"/>
                <iLink obj="co_49" qRef="q3_65_113"/>
                <iLink obj="co_50" qRef="q4_10_118"/>
                <iLink obj="co_50" qRef="q15_20_520"/>
                <iLink obj="co_50" qRef="q4_53_151"/>
                <iLink obj="co_51" qRef="q4_14_122"/>
                <iLink obj="co_51" qRef="q6_17_184"/>
                <iLink obj="co_51" qRef="q6_41_204"/>
                <iLink obj="co_51" qRef="q6_61_222"/>
                <iLink obj="co_52" qRef="q4_17_124"/>
                <iLink obj="co_53" qRef="q4_18_125"/>
                <iLink obj="co_54" qRef="q4_19_126"/>
                <iLink obj="co_55" qRef="q12_2_437"/>
                <iLink obj="co_55" qRef="q6_20_187"/>
                <iLink obj="co_55" qRef="q4_26_131"/>
                <iLink obj="co_55" qRef="q3_66_114"/>
                <iLink obj="co_56" qRef="q10_4_331"/>
                <iLink obj="co_56" qRef="q14_5_487"/>
                <iLink obj="co_56" qRef="q13_8_467"/>
                <iLink obj="co_56" qRef="q5_16_169"/>
                <iLink obj="co_56" qRef="q14_16_498"/>
                <iLink obj="co_56" qRef="q10_24_351"/>
                <iLink obj="co_56" qRef="q11_33_404"/>
                <iLink obj="co_56" qRef="q4_38_140"/>
                <iLink obj="co_56" qRef="q6_48_211"/>
                <iLink obj="co_56" qRef="q6_58_220"/>
                <iLink obj="co_56" qRef="q3_65_113"/>
                <iLink obj="co_57" qRef="q15_5_506"/>
                <iLink obj="co_57" qRef="q11_11_382"/>
                <iLink obj="co_57" qRef="q7_11_246"/>
                <iLink obj="co_57" qRef="q15_15_515"/>
                <iLink obj="co_57" qRef="q15_23_523"/>
                <iLink obj="co_57" qRef="q4_40_142"/>
                <iLink obj="co_57" qRef="q4_41_143"/>
                <iLink obj="co_58" qRef="q13_13_472"/>
                <iLink obj="co_58" qRef="q12_22_457"/>
                <iLink obj="co_58" qRef="q12_23_458"/>
                <iLink obj="co_58" qRef="q6_34_198"/>
                <iLink obj="co_58" qRef="q4_42_144"/>
                <iLink obj="co_59" qRef="q4_48_147"/>
                <iLink obj="co_59" qRef="q4_49_148"/>
                <iLink obj="co_60" qRef="q5_8_161"/>
                <iLink obj="co_60" qRef="q8_17_286"/>
                <iLink obj="co_60" qRef="q8_18_287"/>
                <iLink obj="co_61" qRef="q10_1_328"/>
                <iLink obj="co_61" qRef="q8_2_272"/>
                <iLink obj="co_61" qRef="q6_8_177"/>
                <iLink obj="co_62" qRef="q6_12_180"/>
                <iLink obj="co_63" qRef="q6_22_188"/>
                <iLink obj="co_64" qRef="q6_27_192"/>
                <iLink obj="co_65" qRef="q7_4_241"/>
                <iLink obj="co_65" qRef="q2_8_8"/>
                <iLink obj="co_65" qRef="q6_8_177"/>
                <iLink obj="co_65" qRef="q4_11_119"/>
                <iLink obj="co_65" qRef="q15_16_516"/>
                <iLink obj="co_65" qRef="q7_18_253"/>
                <iLink obj="co_65" qRef="q15_23_523"/>
                <iLink obj="co_65" qRef="q10_24_351"/>
                <iLink obj="co_65" qRef="q7_25_260"/>
                <iLink obj="co_65" qRef="q6_28_193"/>
                <iLink obj="co_66" qRef="q7_4_241"/>
                <iLink obj="co_66" qRef="q15_16_516"/>
                <iLink obj="co_66" qRef="q15_23_523"/>
                <iLink obj="co_67" qRef="q8_4_274"/>
                <iLink obj="co_67" qRef="q9_9_316"/>
                <iLink obj="co_67" qRef="q10_10_337"/>
                <iLink obj="co_67" qRef="q14_10_492"/>
                <iLink obj="co_67" qRef="q10_12_339"/>
                <iLink obj="co_67" qRef="q5_13_166"/>
                <iLink obj="co_67" qRef="q8_14_283"/>
                <iLink obj="co_67" qRef="q6_29_194"/>
                <iLink obj="co_67" qRef="q6_32_196"/>
                <iLink obj="co_68" qRef="q6_37_200"/>
                <iLink obj="co_69" qRef="q6_37_200"/>
                <iLink obj="co_69" qRef="q6_38_201"/>
                <iLink obj="co_70" qRef="q7_11_246"/>
                <iLink obj="co_70" qRef="q15_16_516"/>
                <iLink obj="co_70" qRef="q7_18_253"/>
                <iLink obj="co_70" qRef="q8_18_287"/>
                <iLink obj="co_70" qRef="q15_23_523"/>
                <iLink obj="co_70" qRef="q7_25_260"/>
                <iLink obj="co_70" qRef="q4_40_142"/>
                <iLink obj="co_70" qRef="q6_48_211"/>
                <iLink obj="co_70" qRef="q6_61_222"/>
                <iLink obj="co_71" qRef="q6_46_209"/>
                <iLink obj="co_71" qRef="q6_47_210"/>
                <iLink obj="co_72" qRef="q6_59_221"/>
                <iLink obj="co_73" qRef="q7_1_238"/>
                <iLink obj="co_74" qRef="q11_1_372"/>
                <iLink obj="co_74" qRef="q2_1_1"/>
                <iLink obj="co_74" qRef="q16_1_525"/>
                <iLink obj="co_74" qRef="q8_1_271"/>
                <iLink obj="co_74" qRef="q8_3_273"/>
                <iLink obj="co_74" qRef="q11_4_375"/>
                <iLink obj="co_74" qRef="q3_5_67"/>
                <iLink obj="co_74" qRef="q14_8_490"/>
                <iLink obj="co_74" qRef="q2_9_9"/>
                <iLink obj="co_74" qRef="q5_10_163"/>
                <iLink obj="co_74" qRef="q5_12_165"/>
                <iLink obj="co_74" qRef="q16_59_580"/>
                <iLink obj="co_74" qRef="q2_64_58"/>
                <iLink obj="co_75" qRef="q8_3_273"/>
                <iLink obj="co_75" qRef="q8_30_299"/>
                <iLink obj="co_76" qRef="q8_11_281"/>
                <iLink obj="co_76" qRef="q8_16_285"/>
                <iLink obj="co_77" qRef="q15_3_504"/>
                <iLink obj="co_77" qRef="q8_11_281"/>
                <iLink obj="co_77" qRef="q12_15_450"/>
                <iLink obj="co_77" qRef="q10_18_345"/>
                <iLink obj="co_77" qRef="q6_19_186"/>
                <iLink obj="co_77" qRef="q2_27_23"/>
                <iLink obj="co_77" qRef="q10_32_359"/>
                <iLink obj="co_77" qRef="q10_35_362"/>
                <iLink obj="co_77" qRef="q11_35_406"/>
                <iLink obj="co_77" qRef="q16_37_560"/>
                <iLink obj="co_77" qRef="q11_40_411"/>
                <iLink obj="co_77" qRef="q6_43_206"/>
                <iLink obj="co_77" qRef="q11_45_416"/>
                <iLink obj="co_77" qRef="q11_46_417"/>
                <iLink obj="co_77" qRef="q3_46_99"/>
                <iLink obj="co_77" qRef="q16_49_571"/>
                <iLink obj="co_77" qRef="q11_50_421"/>
                <iLink obj="co_77" qRef="q11_55_426"/>
                <iLink obj="co_77" qRef="q11_59_430"/>
                <iLink obj="co_77" qRef="q11_63_434"/>
                <iLink obj="co_77" qRef="q6_70_231"/>
                <iLink obj="co_77" qRef="q6_72_233"/>
                <iLink obj="co_78" qRef="q7_1_238"/>
                <iLink obj="co_78" qRef="q4_2_115"/>
                <iLink obj="co_78" qRef="q14_4_486"/>
                <iLink obj="co_78" qRef="q6_5_176"/>
                <iLink obj="co_78" qRef="q2_8_8"/>
                <iLink obj="co_78" qRef="q3_19_78"/>
                <iLink obj="co_78" qRef="q8_31_300"/>
                <iLink obj="co_78" qRef="q7_35_270"/>
                <iLink obj="co_78" qRef="q6_37_200"/>
                <iLink obj="co_78" qRef="q6_76_237"/>
                <iLink obj="co_79" qRef="q8_33_302"/>
                <iLink obj="co_80" qRef="q8_34_303"/>
                <iLink obj="co_81" qRef="q9_4_311"/>
                <iLink obj="co_81" qRef="q9_6_313"/>
                <iLink obj="co_81" qRef="q11_10_381"/>
                <iLink obj="co_81" qRef="q12_10_445"/>
                <iLink obj="co_81" qRef="q11_12_383"/>
                <iLink obj="co_81" qRef="q12_19_454"/>
                <iLink obj="co_82" qRef="q9_12_319"/>
                <iLink obj="co_83" qRef="q5_1_154"/>
                <iLink obj="co_83" qRef="q6_1_172"/>
                <iLink obj="co_83" qRef="q7_1_238"/>
                <iLink obj="co_83" qRef="q15_1_502"/>
                <iLink obj="co_83" qRef="q7_2_239"/>
                <iLink obj="co_83" qRef="q2_2_2"/>
                <iLink obj="co_83" qRef="q14_2_484"/>
                <iLink obj="co_83" qRef="q15_2_503"/>
                <iLink obj="co_83" qRef="q16_2_526"/>
                <iLink obj="co_83" qRef="q5_2_155"/>
                <iLink obj="co_83" qRef="q4_2_115"/>
                <iLink obj="co_83" qRef="q10_2_329"/>
                <iLink obj="co_83" qRef="q13_2_461"/>
                <iLink obj="co_83" qRef="q3_3_65"/>
                <iLink obj="co_83" qRef="q13_4_463"/>
                <iLink obj="co_83" qRef="q14_4_486"/>
                <iLink obj="co_83" qRef="q8_4_274"/>
                <iLink obj="co_83" qRef="q5_5_158"/>
                <iLink obj="co_83" qRef="q6_5_176"/>
                <iLink obj="co_83" qRef="q2_6_6"/>
                <iLink obj="co_83" qRef="q2_7_7"/>
                <iLink obj="co_83" qRef="q5_8_161"/>
                <iLink obj="co_83" qRef="q4_8_117"/>
                <iLink obj="co_83" qRef="q3_8_70"/>
                <iLink obj="co_83" qRef="q16_8_531"/>
                <iLink obj="co_83" qRef="q10_9_336"/>
                <iLink obj="co_83" qRef="q8_9_279"/>
                <iLink obj="co_83" qRef="q10_10_337"/>
                <iLink obj="co_83" qRef="q2_10_10"/>
                <iLink obj="co_83" qRef="q16_10_533"/>
                <iLink obj="co_83" qRef="q15_11_511"/>
                <iLink obj="co_83" qRef="q9_11_318"/>
                <iLink obj="co_83" qRef="q7_11_246"/>
                <iLink obj="co_83" qRef="q7_12_247"/>
                <iLink obj="co_83" qRef="q13_12_471"/>
                <iLink obj="co_83" qRef="q14_12_494"/>
                <iLink obj="co_83" qRef="q11_13_384"/>
                <iLink obj="co_83" qRef="q16_13_536"/>
                <iLink obj="co_83" qRef="q4_14_122"/>
                <iLink obj="co_83" qRef="q13_14_473"/>
                <iLink obj="co_83" qRef="q16_15_538"/>
                <iLink obj="co_83" qRef="q3_15_75"/>
                <iLink obj="co_83" qRef="q9_16_323"/>
                <iLink obj="co_83" qRef="q9_17_324"/>
                <iLink obj="co_83" qRef="q6_17_184"/>
                <iLink obj="co_83" qRef="q2_17_15"/>
                <iLink obj="co_83" qRef="q4_17_124"/>
                <iLink obj="co_83" qRef="q10_18_345"/>
                <iLink obj="co_83" qRef="q3_19_78"/>
                <iLink obj="co_83" qRef="q2_19_17"/>
                <iLink obj="co_83" qRef="q10_19_346"/>
                <iLink obj="co_83" qRef="q13_20_479"/>
                <iLink obj="co_83" qRef="q16_21_544"/>
                <iLink obj="co_83" qRef="q10_21_348"/>
                <iLink obj="co_83" qRef="q12_22_457"/>
                <iLink obj="co_83" qRef="q3_23_80"/>
                <iLink obj="co_83" qRef="q16_23_546"/>
                <iLink obj="co_83" qRef="q7_23_258"/>
                <iLink obj="co_83" qRef="q3_24_81"/>
                <iLink obj="co_83" qRef="q16_25_548"/>
                <iLink obj="co_83" qRef="q10_25_352"/>
                <iLink obj="co_83" qRef="q16_27_550"/>
                <iLink obj="co_83" qRef="q7_27_262"/>
                <iLink obj="co_83" qRef="q6_28_193"/>
                <iLink obj="co_83" qRef="q11_29_400"/>
                <iLink obj="co_83" qRef="q8_29_298"/>
                <iLink obj="co_83" qRef="q3_30_86"/>
                <iLink obj="co_83" qRef="q7_30_265"/>
                <iLink obj="co_83" qRef="q10_31_358"/>
                <iLink obj="co_83" qRef="q16_32_555"/>
                <iLink obj="co_83" qRef="q4_33_135"/>
                <iLink obj="co_83" qRef="q7_33_268"/>
                <iLink obj="co_83" qRef="q2_34_30"/>
                <iLink obj="co_83" qRef="q8_36_305"/>
                <iLink obj="co_83" qRef="q3_37_91"/>
                <iLink obj="co_83" qRef="q6_38_201"/>
                <iLink obj="co_83" qRef="q10_39_366"/>
                <iLink obj="co_83" qRef="q16_40_563"/>
                <iLink obj="co_83" qRef="q6_41_204"/>
                <iLink obj="co_83" qRef="q3_41_94"/>
                <iLink obj="co_83" qRef="q10_41_368"/>
                <iLink obj="co_83" qRef="q3_42_95"/>
                <iLink obj="co_83" qRef="q11_43_414"/>
                <iLink obj="co_83" qRef="q3_44_97"/>
                <iLink obj="co_83" qRef="q10_44_371"/>
                <iLink obj="co_83" qRef="q4_46_146"/>
                <iLink obj="co_83" qRef="q2_47_41"/>
                <iLink obj="co_83" qRef="q4_49_148"/>
                <iLink obj="co_83" qRef="q2_49_43"/>
                <iLink obj="co_83" qRef="q11_49_420"/>
                <iLink obj="co_83" qRef="q6_50_213"/>
                <iLink obj="co_83" qRef="q2_50_44"/>
                <iLink obj="co_83" qRef="q4_51_150"/>
                <iLink obj="co_83" qRef="q3_51_102"/>
                <iLink obj="co_83" qRef="q2_52_46"/>
                <iLink obj="co_83" qRef="q11_53_424"/>
                <iLink obj="co_83" qRef="q2_58_52"/>
                <iLink obj="co_83" qRef="q3_59_109"/>
                <iLink obj="co_83" qRef="q3_61_110"/>
                <iLink obj="co_83" qRef="q6_62_223"/>
                <iLink obj="co_83" qRef="q3_62_111"/>
                <iLink obj="co_83" qRef="q11_64_435"/>
                <iLink obj="co_83" qRef="q3_66_114"/>
                <iLink obj="co_83" qRef="q2_67_61"/>
                <iLink obj="co_83" qRef="q2_68_62"/>
                <iLink obj="co_83" qRef="q2_69_63"/>
                <iLink obj="co_83" qRef="q6_69_230"/>
                <iLink obj="co_83" qRef="q6_75_236"/>
                <iLink obj="co_83" qRef="q6_76_237"/>
                <iLink obj="co_84" qRef="q9_18_325"/>
                <iLink obj="co_84" qRef="q15_21_521"/>
                <iLink obj="co_85" qRef="q11_8_379"/>
                <iLink obj="co_85" qRef="q10_13_340"/>
                <iLink obj="co_85" qRef="q10_14_341"/>
                <iLink obj="co_85" qRef="q15_14_514"/>
                <iLink obj="co_85" qRef="q10_16_343"/>
                <iLink obj="co_85" qRef="q11_16_387"/>
                <iLink obj="co_85" qRef="q11_19_390"/>
                <iLink obj="co_85" qRef="q2_20_18"/>
                <iLink obj="co_85" qRef="q2_21_19"/>
                <iLink obj="co_85" qRef="q16_21_544"/>
                <iLink obj="co_85" qRef="q11_22_393"/>
                <iLink obj="co_85" qRef="q7_23_258"/>
                <iLink obj="co_85" qRef="q2_23_21"/>
                <iLink obj="co_85" qRef="q16_23_546"/>
                <iLink obj="co_85" qRef="q2_24_22"/>
                <iLink obj="co_85" qRef="q16_25_548"/>
                <iLink obj="co_85" qRef="q6_27_192"/>
                <iLink obj="co_85" qRef="q16_27_550"/>
                <iLink obj="co_85" qRef="q10_30_357"/>
                <iLink obj="co_85" qRef="q11_31_402"/>
                <iLink obj="co_85" qRef="q16_32_555"/>
                <iLink obj="co_85" qRef="q10_34_361"/>
                <iLink obj="co_85" qRef="q2_34_30"/>
                <iLink obj="co_85" qRef="q11_34_405"/>
                <iLink obj="co_85" qRef="q11_38_409"/>
                <iLink obj="co_85" qRef="q11_39_410"/>
                <iLink obj="co_85" qRef="q16_40_563"/>
                <iLink obj="co_85" qRef="q16_42_564"/>
                <iLink obj="co_85" qRef="q11_43_414"/>
                <iLink obj="co_85" qRef="q2_49_43"/>
                <iLink obj="co_85" qRef="q11_49_420"/>
                <iLink obj="co_85" qRef="q11_54_425"/>
                <iLink obj="co_85" qRef="q11_56_427"/>
                <iLink obj="co_85" qRef="q3_56_107"/>
                <iLink obj="co_85" qRef="q6_62_223"/>
                <iLink obj="co_85" qRef="q11_62_433"/>
                <iLink obj="co_85" qRef="q6_66_227"/>
                <iLink obj="co_86" qRef="q6_3_174"/>
                <iLink obj="co_86" qRef="q13_3_462"/>
                <iLink obj="co_86" qRef="q6_8_177"/>
                <iLink obj="co_86" qRef="q13_9_468"/>
                <iLink obj="co_86" qRef="q14_9_491"/>
                <iLink obj="co_86" qRef="q16_9_532"/>
                <iLink obj="co_86" qRef="q7_9_244"/>
                <iLink obj="co_86" qRef="q14_11_493"/>
                <iLink obj="co_86" qRef="q10_13_340"/>
                <iLink obj="co_86" qRef="q2_13_13"/>
                <iLink obj="co_86" qRef="q5_14_167"/>
                <iLink obj="co_86" qRef="q16_14_537"/>
                <iLink obj="co_86" qRef="q9_14_321"/>
                <iLink obj="co_86" qRef="q6_15_182"/>
                <iLink obj="co_86" qRef="q2_16_14"/>
                <iLink obj="co_86" qRef="q13_16_475"/>
                <iLink obj="co_86" qRef="q5_18_171"/>
                <iLink obj="co_86" qRef="q14_19_501"/>
                <iLink obj="co_86" qRef="q4_20_127"/>
                <iLink obj="co_86" qRef="q9_20_327"/>
                <iLink obj="co_86" qRef="q6_22_188"/>
                <iLink obj="co_86" qRef="q16_22_545"/>
                <iLink obj="co_86" qRef="q15_23_523"/>
                <iLink obj="co_86" qRef="q16_24_547"/>
                <iLink obj="co_86" qRef="q16_26_549"/>
                <iLink obj="co_86" qRef="q16_28_551"/>
                <iLink obj="co_86" qRef="q7_28_263"/>
                <iLink obj="co_86" qRef="q7_31_266"/>
                <iLink obj="co_86" qRef="q10_32_359"/>
                <iLink obj="co_86" qRef="q3_32_87"/>
                <iLink obj="co_86" qRef="q7_34_269"/>
                <iLink obj="co_86" qRef="q2_37_31"/>
                <iLink obj="co_86" qRef="q16_38_561"/>
                <iLink obj="co_86" qRef="q10_42_369"/>
                <iLink obj="co_86" qRef="q10_43_370"/>
                <iLink obj="co_86" qRef="q11_44_415"/>
                <iLink obj="co_86" qRef="q2_48_42"/>
                <iLink obj="co_86" qRef="q3_50_101"/>
                <iLink obj="co_86" qRef="q11_52_423"/>
                <iLink obj="co_86" qRef="q4_53_151"/>
                <iLink obj="co_86" qRef="q2_55_49"/>
                <iLink obj="co_86" qRef="q6_59_221"/>
                <iLink obj="co_86" qRef="q2_59_53"/>
                <iLink obj="co_86" qRef="q11_60_431"/>
                <iLink obj="co_86" qRef="q16_60_581"/>
                <iLink obj="co_86" qRef="q16_61_582"/>
                <iLink obj="co_86" qRef="q16_62_583"/>
                <iLink obj="co_86" qRef="q2_65_59"/>
                <iLink obj="co_87" qRef="q11_14_385"/>
                <iLink obj="co_87" qRef="q2_20_18"/>
                <iLink obj="co_87" qRef="q16_21_544"/>
                <iLink obj="co_87" qRef="q7_23_258"/>
                <iLink obj="co_87" qRef="q16_23_546"/>
                <iLink obj="co_87" qRef="q2_24_22"/>
                <iLink obj="co_87" qRef="q16_25_548"/>
                <iLink obj="co_87" qRef="q16_27_550"/>
                <iLink obj="co_87" qRef="q16_32_555"/>
                <iLink obj="co_87" qRef="q2_34_30"/>
                <iLink obj="co_87" qRef="q16_40_563"/>
                <iLink obj="co_87" qRef="q16_42_564"/>
                <iLink obj="co_87" qRef="q11_43_414"/>
                <iLink obj="co_87" qRef="q2_49_43"/>
                <iLink obj="co_87" qRef="q11_49_420"/>
                <iLink obj="co_87" qRef="q11_53_424"/>
                <iLink obj="co_87" qRef="q6_62_223"/>
                <iLink obj="co_88" qRef="q10_36_363"/>
                <iLink obj="co_88" qRef="q10_44_371"/>
                <iLink obj="co_88" qRef="q2_47_41"/>
                <iLink obj="co_89" qRef="q16_2_526"/>
                <iLink obj="co_89" qRef="q13_5_464"/>
                <iLink obj="co_89" qRef="q10_37_364"/>
                <iLink obj="co_89" qRef="q4_46_146"/>
                <iLink obj="co_90" qRef="q14_3_485"/>
                <iLink obj="co_90" qRef="q5_3_156"/>
                <iLink obj="co_90" qRef="q7_3_240"/>
                <iLink obj="co_90" qRef="q5_4_157"/>
                <iLink obj="co_90" qRef="q3_4_66"/>
                <iLink obj="co_90" qRef="q3_5_67"/>
                <iLink obj="co_90" qRef="q13_5_464"/>
                <iLink obj="co_90" qRef="q7_5_242"/>
                <iLink obj="co_90" qRef="q10_5_332"/>
                <iLink obj="co_90" qRef="q12_6_441"/>
                <iLink obj="co_90" qRef="q13_6_465"/>
                <iLink obj="co_90" qRef="q14_6_488"/>
                <iLink obj="co_90" qRef="q12_7_442"/>
                <iLink obj="co_90" qRef="q8_7_277"/>
                <iLink obj="co_90" qRef="q2_8_8"/>
                <iLink obj="co_90" qRef="q14_8_490"/>
                <iLink obj="co_90" qRef="q9_9_316"/>
                <iLink obj="co_90" qRef="q4_10_118"/>
                <iLink obj="co_90" qRef="q14_10_492"/>
                <iLink obj="co_90" qRef="q6_10_178"/>
                <iLink obj="co_90" qRef="q9_10_317"/>
                <iLink obj="co_90" qRef="q6_11_179"/>
                <iLink obj="co_90" qRef="q2_11_11"/>
                <iLink obj="co_90" qRef="q16_12_535"/>
                <iLink obj="co_90" qRef="q10_12_339"/>
                <iLink obj="co_90" qRef="q6_13_181"/>
                <iLink obj="co_90" qRef="q5_13_166"/>
                <iLink obj="co_90" qRef="q13_13_472"/>
                <iLink obj="co_90" qRef="q11_14_385"/>
                <iLink obj="co_90" qRef="q15_14_514"/>
                <iLink obj="co_90" qRef="q5_15_168"/>
                <iLink obj="co_90" qRef="q4_18_125"/>
                <iLink obj="co_90" qRef="q15_18_518"/>
                <iLink obj="co_90" qRef="q4_19_126"/>
                <iLink obj="co_90" qRef="q12_20_455"/>
                <iLink obj="co_90" qRef="q2_20_18"/>
                <iLink obj="co_90" qRef="q11_20_391"/>
                <iLink obj="co_90" qRef="q2_22_20"/>
                <iLink obj="co_90" qRef="q7_22_257"/>
                <iLink obj="co_90" qRef="q12_23_458"/>
                <iLink obj="co_90" qRef="q2_24_22"/>
                <iLink obj="co_90" qRef="q3_26_82"/>
                <iLink obj="co_90" qRef="q6_29_194"/>
                <iLink obj="co_90" qRef="q2_29_25"/>
                <iLink obj="co_90" qRef="q7_29_264"/>
                <iLink obj="co_90" qRef="q2_31_27"/>
                <iLink obj="co_90" qRef="q6_32_196"/>
                <iLink obj="co_90" qRef="q7_32_267"/>
                <iLink obj="co_90" qRef="q6_34_198"/>
                <iLink obj="co_90" qRef="q7_35_270"/>
                <iLink obj="co_90" qRef="q10_37_364"/>
                <iLink obj="co_90" qRef="q6_39_202"/>
                <iLink obj="co_90" qRef="q16_42_564"/>
                <iLink obj="co_90" qRef="q4_42_144"/>
                <iLink obj="co_90" qRef="q6_44_207"/>
                <iLink obj="co_90" qRef="q2_44_38"/>
                <iLink obj="co_90" qRef="q3_45_98"/>
                <iLink obj="co_90" qRef="q2_45_39"/>
                <iLink obj="co_90" qRef="q4_50_149"/>
                <iLink obj="co_90" qRef="q6_53_215"/>
                <iLink obj="co_90" qRef="q16_54_575"/>
                <iLink obj="co_90" qRef="q16_57_578"/>
                <iLink obj="co_90" qRef="q3_58_108"/>
                <iLink obj="co_90" qRef="q2_64_58"/>
                <iLink obj="co_90" qRef="q2_66_60"/>
                <iLink obj="co_90" qRef="q6_73_234"/>
                <iLink obj="co_91" qRef="q11_20_391"/>
                <iLink obj="co_92" qRef="q11_20_391"/>
                <iLink obj="co_93" qRef="q5_15_168"/>
                <iLink obj="co_93" qRef="q2_30_26"/>
                <iLink obj="co_94" qRef="q2_13_13"/>
                <iLink obj="co_94" qRef="q2_16_14"/>
                <iLink obj="co_96" qRef="q14_13_495"/>
                <iLink obj="co_97" qRef="q15_10_510"/>
                <iLink obj="co_97" qRef="q15_13_513"/>
                <iLink obj="co_98" qRef="q13_3_462"/>
                <iLink obj="co_98" qRef="q16_4_528"/>
                <iLink obj="co_98" qRef="q16_5_529"/>
                <iLink obj="co_98" qRef="q16_7_530"/>
                <iLink obj="co_98" qRef="q7_13_248"/>
                <iLink obj="co_98" qRef="q16_16_539"/>
                <iLink obj="co_98" qRef="q16_19_542"/>
                <iLink obj="co_98" qRef="q16_56_577"/>
                <iLink obj="co_98" qRef="q16_58_579"/>
                <iLink obj="co_99" qRef="q15_8_508"/>
                <iLink obj="co_99" qRef="q4_12_120"/>
                <iLink obj="co_99" qRef="q4_48_147"/>
                <iLink obj="co_99" qRef="q6_74_235"/>
                <iLink obj="co_100" qRef="q10_41_368"/>
            </codings>
            <memoings size="0"/>
        </objectSegmentLinks>
        <codeLinkProtos size="7">
            <codeLinkProto id="CONTRADICTS" label1="&lt;&gt;" label2="A" formalProp="symmetric" layout="U" descr="contradicts" au="ATLAS.ti"/>
            <codeLinkProto id="IS A" label1="isa" label2="O" formalProp="transitive" layout="U" descr="is a" au="ATLAS.ti"/>
            <codeLinkProto id="IS ASSOCIATED WITH" label1="==" label2="R" formalProp="symmetric" layout="U" descr="is associated with" au="ATLAS.ti"/>
            <codeLinkProto id="IS CAUSE OF" label1="=&gt;" label2="N" formalProp="transitive" layout="U" descr="is cause of" au="ATLAS.ti"/>
            <codeLinkProto id="IS PART OF" label1="[]" label2="G" formalProp="transitive" layout="U" descr="is part of" au="ATLAS.ti"/>
            <codeLinkProto id="IS PROPERTY OF" label1="*}" label2="P" formalProp="asymmetric" layout="U" descr="is property of" au="ATLAS.ti"/>
            <codeLinkProto id="NONAME" label1="" label2="" formalProp="symmetric" layout="U" descr="noname" au="ATLAS.ti"/>
        </codeLinkProtos>
        <codeLinks size="0"/>
        <hyperLinkProtos size="8">
            <hyperLinkProto id="CONTINUED BY" label1="&gt;&gt;&gt;&gt;" label2="cont" formalProp="asymmetric" layout="U" descr="continued by" au="ATLAS.ti"/>
            <hyperLinkProto id="CONTRADICTS" label1="X&gt;" label2="CO" formalProp="transitive" layout="U" descr="contradicts" au="ATLAS.ti"/>
            <hyperLinkProto id="CRITICIZES" label1="-&gt;|" label2="crit" formalProp="asymmetric" layout="U" descr="criticizes" au="ATLAS.ti"/>
            <hyperLinkProto id="DISCUSSES" label1=":&gt;" label2="disc" formalProp="transitive" layout="U" descr="discusses" au="ATLAS.ti"/>
            <hyperLinkProto id="EXPANDS" label1="?" label2="??" formalProp="transitive" layout="U" descr="expands" au="ATLAS.ti"/>
            <hyperLinkProto id="EXPLAINS" label1="?&gt;" label2="expl" formalProp="transitive" layout="U" descr="explains" au="ATLAS.ti"/>
            <hyperLinkProto id="JUSTIFIES" label1="!&gt;" label2="just" formalProp="transitive" layout="U" descr="justifies" au="ATLAS.ti"/>
            <hyperLinkProto id="SUPPORTS" label1="*&gt;" label2="supp" formalProp="transitive" layout="U" descr="supports" au="ATLAS.ti"/>
        </hyperLinkProtos>
        <hyperLinks size="0"/>
        <memoMemoLinks size="0"/>
        <memoCodeLinks size="0"/>
    </links>
</storedHU>